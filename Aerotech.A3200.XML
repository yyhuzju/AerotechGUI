<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aerotech.A3200</name>
    </assembly>
    <members>
        <member name="T:Aerotech.A3200.Configuration.AccessControlConfiguration">
            <summary>Contains access control settings</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.AccessControlConfiguration.ConfigurationFile">
            <summary>Path to the file for access control configuration</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.CalibrationConfiguration">
            <summary>Contains the configuration of calibration.</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CalibrationConfiguration.Axis1D">
            <summary>Path to the 1 dimensional axis calibration file to use.</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Configuration</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code language="C++">
<![CDATA[
    try 
    {
        // Set the active parameter file path
        Controller::Configuration->ParameterFile = Path::GetFullPath("foo.prma");
        // Set the 1D calibration file path
        Controller::Configuration->Calibration->Axis1D = Path::GetFullPath("default1D.cal");
       // Set and Print the PLC shared tag file path
        Controller::Configuration->PlcSharedTagFile = Path::GetFullPath("shared.plctag");
        Console::WriteLine("PLC shared tag file path : {0}", Controller::Configuration->PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller::Configuration->DistanceLoggingFile = Path::GetFullPath("distance.txt");
        Console::WriteLine("Distance logging file path : {0}", Controller::Configuration->DistanceLoggingFile);
        // Print out all program automation entries
        for each (ProgramAutomationEntry^ entry in Controller::Configuration->ProgramAutomation)
        {
            Console::WriteLine("Tasks: {0}", entry->Mask);
            Console::WriteLine("Path: {0}", entry->ProgramPath);
            Console::WriteLine("Automation Mode: {0}", entry->Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry^ newEntry = gcnew ProgramAutomationEntry(Path::GetFullPath("program.pgm"), ProgramAutomationMode::RunSilent, TaskMask::T01) ;
        Controller::Configuration->ProgramAutomation->Add(newEntry);
        // Print out a few properties of each machine tool
        for each (MachineTool^ tool in Controller::Configuration->MachineTools->MachineTools)
        {
            Console::WriteLine("Name: {0}", tool->Name);
            Console::WriteLine("Units: {0}", tool->Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller::IsRunning;
        Controller^ myController = Controller::Connect();
        // We only have to force a reset if we were previously running
        if(alreadyRunning) { myController->Reset(); }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
  
</code>
<code language="C#">
<![CDATA[
    
    try 
    {
        // Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma");
        // Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal");
        // Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag");
        Console.WriteLine("PLC shared tag file path: {0}", Controller.Configuration.PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt");
        Console.WriteLine("Distance logging file path: {0}", Controller.Configuration.DistanceLoggingFile);
        // Print out all program automation entries
        foreach (ProgramAutomationEntry entry in Controller.Configuration.ProgramAutomation)
        {
            Console.WriteLine("Tasks: {0}", entry.Mask);
            Console.WriteLine("Path: {0}", entry.ProgramPath);
            Console.WriteLine("Automation Mode: {0}", entry.Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry newEntry = new ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01);
        Controller.Configuration.ProgramAutomation.Add(newEntry);
        // Print out a few properties of each machine tool
        foreach (MachineTool tool in Controller.Configuration.MachineTools.MachineTools)
        {
            Console.WriteLine("Name: {0}", tool.Name);
            Console.WriteLine("Units: {0}", tool.Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller.IsRunning;
        Controller myController = Controller.Connect();
        // We only have to force a reset if we were previously running
        if (alreadyRunning) { myController.Reset(); }
    }
    catch(Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }
]]>
</code>
<code language="VB.NET">
<![CDATA[
    
    Try
        ' Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma")
        ' Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal")
        ' Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag")
        Console.WriteLine("PLC shared tag file path : {0}", Controller.Configuration.PlcSharedTagFile)
        ' Print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt")
        Console.WriteLine("Distance logging file path : {0}", Controller.Configuration.DistanceLoggingFile)
        ' Print out all program automation entries
        Dim entry As ProgramAutomationEntry
        For Each entry In Controller.Configuration.ProgramAutomation
            Console.WriteLine("Tasks: {0}", entry.Mask)
            Console.WriteLine("Path: {0}", entry.ProgramPath)
            Console.WriteLine("Automation Mode: {0}", entry.Mode)
        Next
        ' Add a new program automation entry
        Dim newEntry As New ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01)
        Controller.Configuration.ProgramAutomation.Add(newEntry)
        ' Print out a few properties of each machine tool
        Dim tool As MachineTool
        For Each tool In Controller.Configuration.MachineTools.MachineTools
            Console.WriteLine("Name: {0}", tool.Name)
            Console.WriteLine("Units: {0}", tool.Units)
        Next
        ' Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        Dim alreadyRunning as Boolean = Controller.IsRunning
        Dim myController As Controller = Controller.Connect
        ' We only have to force a reset if we were previously running
        If alreadyRunning Then
            myController.Reset
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try
]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CalibrationConfiguration.Axis2D">
            <summary>Path to the 2 dimensional axis calibration file to use.</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Configuration</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code language="C++">
<![CDATA[
    try 
    {
        // Set the active parameter file path
        Controller::Configuration->ParameterFile = Path::GetFullPath("foo.prma");
        // Set the 1D calibration file path
        Controller::Configuration->Calibration->Axis1D = Path::GetFullPath("default1D.cal");
       // Set and Print the PLC shared tag file path
        Controller::Configuration->PlcSharedTagFile = Path::GetFullPath("shared.plctag");
        Console::WriteLine("PLC shared tag file path : {0}", Controller::Configuration->PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller::Configuration->DistanceLoggingFile = Path::GetFullPath("distance.txt");
        Console::WriteLine("Distance logging file path : {0}", Controller::Configuration->DistanceLoggingFile);
        // Print out all program automation entries
        for each (ProgramAutomationEntry^ entry in Controller::Configuration->ProgramAutomation)
        {
            Console::WriteLine("Tasks: {0}", entry->Mask);
            Console::WriteLine("Path: {0}", entry->ProgramPath);
            Console::WriteLine("Automation Mode: {0}", entry->Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry^ newEntry = gcnew ProgramAutomationEntry(Path::GetFullPath("program.pgm"), ProgramAutomationMode::RunSilent, TaskMask::T01) ;
        Controller::Configuration->ProgramAutomation->Add(newEntry);
        // Print out a few properties of each machine tool
        for each (MachineTool^ tool in Controller::Configuration->MachineTools->MachineTools)
        {
            Console::WriteLine("Name: {0}", tool->Name);
            Console::WriteLine("Units: {0}", tool->Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller::IsRunning;
        Controller^ myController = Controller::Connect();
        // We only have to force a reset if we were previously running
        if(alreadyRunning) { myController->Reset(); }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
  
</code>
<code language="C#">
<![CDATA[
    
    try 
    {
        // Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma");
        // Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal");
        // Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag");
        Console.WriteLine("PLC shared tag file path: {0}", Controller.Configuration.PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt");
        Console.WriteLine("Distance logging file path: {0}", Controller.Configuration.DistanceLoggingFile);
        // Print out all program automation entries
        foreach (ProgramAutomationEntry entry in Controller.Configuration.ProgramAutomation)
        {
            Console.WriteLine("Tasks: {0}", entry.Mask);
            Console.WriteLine("Path: {0}", entry.ProgramPath);
            Console.WriteLine("Automation Mode: {0}", entry.Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry newEntry = new ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01);
        Controller.Configuration.ProgramAutomation.Add(newEntry);
        // Print out a few properties of each machine tool
        foreach (MachineTool tool in Controller.Configuration.MachineTools.MachineTools)
        {
            Console.WriteLine("Name: {0}", tool.Name);
            Console.WriteLine("Units: {0}", tool.Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller.IsRunning;
        Controller myController = Controller.Connect();
        // We only have to force a reset if we were previously running
        if (alreadyRunning) { myController.Reset(); }
    }
    catch(Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }
]]>
</code>
<code language="VB.NET">
<![CDATA[
    
    Try
        ' Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma")
        ' Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal")
        ' Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag")
        Console.WriteLine("PLC shared tag file path : {0}", Controller.Configuration.PlcSharedTagFile)
        ' Print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt")
        Console.WriteLine("Distance logging file path : {0}", Controller.Configuration.DistanceLoggingFile)
        ' Print out all program automation entries
        Dim entry As ProgramAutomationEntry
        For Each entry In Controller.Configuration.ProgramAutomation
            Console.WriteLine("Tasks: {0}", entry.Mask)
            Console.WriteLine("Path: {0}", entry.ProgramPath)
            Console.WriteLine("Automation Mode: {0}", entry.Mode)
        Next
        ' Add a new program automation entry
        Dim newEntry As New ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01)
        Controller.Configuration.ProgramAutomation.Add(newEntry)
        ' Print out a few properties of each machine tool
        Dim tool As MachineTool
        For Each tool In Controller.Configuration.MachineTools.MachineTools
            Console.WriteLine("Name: {0}", tool.Name)
            Console.WriteLine("Units: {0}", tool.Units)
        Next
        ' Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        Dim alreadyRunning as Boolean = Controller.IsRunning
        Dim myController As Controller = Controller.Connect
        ' We only have to force a reset if we were previously running
        If alreadyRunning Then
            myController.Reset
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try
]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CalibrationConfiguration.Galvo2D">
            <summary>Path to the 2 dimensional galvo calibration file to use.</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CalibrationConfiguration.GalvoPowerCorrection">
            <summary>Gets or sets the path to the galvo power correction file to use.</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CalibrationConfiguration.GalvoGCals">
            <summary>Contains gcal file calibrations.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.CalibrationGCalCollection">
            <summary>Contains a collection of <see cref="T:Aerotech.A3200.Configuration.CalibrationGCalEntry"/>.</summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalCollection.GetEnumerator">
            <summary>Returns an enumerator to go over all the entries.</summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalCollection.Contains(Aerotech.A3200.Configuration.CalibrationGCalEntry)">
            <summary>Checks if a given entry is already added.</summary>
            <param name="entry">The entry to check.</param>
            <returns>Whether the <paramref name="entry"/> is already in the collection.</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalCollection.IndexOf(Aerotech.A3200.Configuration.CalibrationGCalEntry)">
            <summary>Finds the index of the given entry.</summary>
            <param name="entry">The entry to search for.</param>
            <returns>The index of the entry, or -1 if the <paramref name="entry"/> was not found.</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalCollection.Add(Aerotech.A3200.Configuration.CalibrationGCalEntry)">
            <summary>Adds a new entry to the collection.</summary>
            <param name="entry">The entry to add.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalCollection.Insert(System.Int32,Aerotech.A3200.Configuration.CalibrationGCalEntry)">
            <summary>Inserts a new entry into the collection.</summary>
            <param name="index">The index at which to insert.</param>
            <param name="entry">The entry to insert.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalCollection.Remove(Aerotech.A3200.Configuration.CalibrationGCalEntry)">
            <summary>Removes a given entry from the collection.</summary>
            <param name="entry">The entry to remove.</param>
            <returns>Whether the entry was removed.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalCollection.RemoveAt(System.Int32)">
            <summary>Removes the entry at a given index.</summary>
            <param name="index">The index at which to remove the entry.</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalCollection.Clear">
            <summary>Clears the collection of any entries.</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CalibrationGCalCollection.Count">
            <summary>The number of <see cref="T:Aerotech.A3200.Configuration.CalibrationGCalEntry"/>.</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CalibrationGCalCollection.Item(System.Int32)">
            <summary>Allows to get/set a specific entry.</summary>
            <param name="index">The entry to get/set.</param>
            <returns>The entry corresponding to the given index.</returns>
            <exception cref="T:System.ArgumentNullException">If one sets the value to <c>null</c>.</exception>
        </member>
        <member name="T:Aerotech.A3200.Configuration.CalibrationGCalEntry">
            <summary>Represents one entry in <see cref="T:Aerotech.A3200.Configuration.CalibrationGCalCollection"/>.</summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalEntry.#ctor(System.Int32,System.String)">
            <summary>Creates a new entry with given settings.</summary>
            <param name="axisIndex">The axis index this gcal file is for.</param>
            <param name="path">The path to the gcal file.</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalEntry.GetHashCode">
            <summary>Gets the hashcode of this object.</summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.CalibrationGCalEntry.Equals(System.Object)">
            <summary>Checks equality of two objects</summary>
            <param name="obj">The object to check the equality with</param>
            <returns>Whether the objects contain the same data</returns>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CalibrationGCalEntry.AxisIndex">
            <summary>The axis index for which the gcal file is.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If given value is not a valid axis index.</exception>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CalibrationGCalEntry.Path">
            <summary>The path to the gcal file.</summary>
            <exception cref="T:System.ArgumentNullException">If given value is <c>null</c>.</exception>
        </member>
        <member name="T:Aerotech.A3200.Configuration.FieldbusDeviceCollection">
            <summary>
            Contains the configuration information for Fieldbus devices
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.FieldbusDeviceCollection.Add(Aerotech.A3200.Configuration.FieldbusDevice)">
            <summary>Adds a new entry to the collection</summary>
            <param name="item">The <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/> to add to the collection</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.FieldbusDeviceCollection.Remove(System.Int32)">
            <summary>
            Removes a <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/> from the collection
            </summary>
            <param name="connectionIdentifier">The connection identifier of the <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/> to remove</param>
            <returns>Returns <c>true</c> if an item has been removed, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.FieldbusDeviceCollection.Remove(Aerotech.A3200.Configuration.FieldbusDevice)">
            <summary>
            Removes a <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/> from the collection
            </summary>
            <param name="item">The item to remove</param>
            <returns>Returns <c>true</c> if the item has been removed, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.FieldbusDeviceCollection.Clear">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.FieldbusDeviceCollection.GetEnumerator">
            <summary>Returns enumerator for this collection</summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FieldbusDeviceCollection.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/> with the specified connection identifier
            </summary>
            <param name="connectionIdentifer">The connection identifier of the <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/> to retrieve</param>
            <returns>A <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/> with the specified connection identifier</returns>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FieldbusDeviceCollection.Count">
            <summary>
            Returns the number of <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/> objects in this collection
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.FieldbusDevice">
            <summary>
            Represents a fieldbus device
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.FieldbusDevice.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Configuration.FieldbusType,System.String[])">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/>
            </summary>
            <param name="connectionIdentifier">The connection identifier of the fieldbus device</param>
            <param name="pciDeviceIndex">The PCI device index</param>
            <param name="vendorIdentifier">The vendor ID</param>
            <param name="deviceIdentifier">The device ID</param>
            <param name="kind">The kind of fieldbus device</param>
            <param name="configurationFilePaths">The absolute paths to the fieldbus device's configuration files</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.FieldbusDevice.GetHashCode">
            <summary>
            Retrieves the hash code of the current instance of <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/>
            </summary>
            <returns>The hash code for the current instance</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.FieldbusDevice.Equals(System.Object)">
            <summary>
            Compares the current instance of <see cref="T:Aerotech.A3200.Configuration.FieldbusDevice"/> with another object for equivalence
            </summary>
            <param name="obj">The object to compare for equivalence</param>
            <returns></returns>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FieldbusDevice.PciIDeviceIndex">
            <summary>
            The PCI device index
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FieldbusDevice.PciVendorIdentifier">
            <summary>
            The PCI vendor ID of the device
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FieldbusDevice.PciDeviceIdentifier">
            <summary>
            The PCI device ID of the device
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FieldbusDevice.ConnectionIdentifier">
            <summary>
            The connection identifier for the device
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FieldbusDevice.ConfigurationFilePaths">
            <summary>
            The absolute path(s) to the fieldbus device's configuration file(s)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FieldbusDevice.Kind">
            <summary>
            The kind of fieldbus device
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Information.EnumInformation">
            <summary>Provides information about enumerations.</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.EnumInformation.enumType2id">
            <summary>Contains mapping from enum type to type id</summary>
        </member>
        <member name="M:Aerotech.A3200.Information.EnumInformation.GetEnumName(System.Type)">
            <summary>Get the string representation of an enumeration.</summary>
            <param name="enumType">The enumeration type for which to get the name.</param>
            <returns>The string name of <paramref name="enumType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="enumType"/> is not supported.</exception>
        </member>
        <member name="M:Aerotech.A3200.Information.EnumInformation.GetEnumName(System.Type,System.Globalization.CultureInfo)">
            <summary>Get the string representation of an enumeration.</summary>
            <param name="enumType">The enumeration type for which to get the name.</param>
            <param name="cultureInfo">The culture information to use, if <c>null</c> will use current UI culture.</param>
            <returns>The string name of <paramref name="enumType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="enumType"/> is not supported.</exception>
        </member>
        <member name="M:Aerotech.A3200.Information.EnumInformation.GetValueName(System.Enum)">
            <summary>Get the string representation of a value.</summary>
            <param name="enumValue">The value to convert to a string.</param>
            <returns>The string representation of <paramref name="enumValue."/></returns>
            <exception cref="T:System.ArgumentException">If enumeration of <paramref name="enumValue"/> is not supported.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="enumValue"/> is outside of valid set of values.</exception>
        </member>
        <member name="M:Aerotech.A3200.Information.EnumInformation.GetValueName(System.Enum,System.Globalization.CultureInfo)">
            <summary>Get the string representation of a value.</summary>
            <param name="enumValue">The value to convert to a string.</param>
            <param name="cultureInfo">The culture information to use, if <c>null</c> will use current UI culture.</param>
            <returns>The string representation of <paramref name="enumValue."/></returns>
            <exception cref="T:System.ArgumentException">If enumeration of <paramref name="enumValue"/> is not supported.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="enumValue"/> is outside of valid set of values.</exception>
        </member>
        <member name="M:Aerotech.A3200.Information.EnumInformation.GetValueNames(System.Type)">
            <summary>Get the string representations of values of an enumeration.</summary>
            <param name="enumType">The enumeration type for which to get the names of the values.</param>
            <returns>A mapping from enumeration values to their string representations.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="enumType"/> is not supported.</exception>
        </member>
        <member name="M:Aerotech.A3200.Information.EnumInformation.GetValueNames(System.Type,System.Globalization.CultureInfo)">
            <summary>Get the string representations of values of an enumeration.</summary>
            <param name="enumType">The enumeration type for which to get the names of the values.</param>
            <param name="cultureInfo">The culture information to use, if <c>null</c> will use current UI culture.</param>
            <returns>A mapping from enumeration values to their string representations.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="enumType"/> is not supported.</exception>
        </member>
        <member name="T:Aerotech.A3200.Properties.InfoResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.InfoResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.InfoResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.InfoResources.dataCollectionInfo">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;datacollection&gt;
              &lt;data&gt;
                &lt;category&gt;
                  &lt;ids final=&quot;axis&quot;&gt;
                    &lt;id&gt;axis&lt;/id&gt;
                  &lt;/ids&gt;
                  &lt;fulls final=&quot;Axis&quot;&gt;
                    &lt;full&gt;Axis&lt;/full&gt;
                  &lt;/fulls&gt;
                  &lt;shorts final=&quot;Axis&quot;&gt;
                    &lt;short&gt;Axis&lt;/short&gt;
                  &lt;/shorts&gt;
                &lt;/category&gt;
                &lt;number&gt;0&lt;/number&gt;
                &lt;scope&gt;public&lt;/scope&gt;
                &lt;type&gt;double&lt;/type&gt;
                &lt;unit&gt;distance&lt;/unit&gt;
                &lt;collectAutomatically /&gt;
                &lt;frequencyAnalysis /&gt;
                &lt;visual&gt;
            			&lt;defaultColor&gt;128,0,128&lt;/ [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.InfoResources.errorCodesInfo">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;!--
            				!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            				!! this file is auto generated, do NOT edit !!
            				!! editing this is a waste of time          !!
            				!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            
            				generated by errorCodesInfo_xml.xslt
            			--&gt;
            &lt;data&gt;
              &lt;error name=&quot;NoError&quot;&gt;
                &lt;category name=&quot;Root&quot; /&gt;
              &lt;/error&gt;
              &lt;error name=&quot;FileAccessDenied&quot;&gt;
                &lt;category name=&quot;Root&quot; /&gt;
                &lt;category name=&quot;IO&quot; /&gt;
                &lt;category name=&quot;FileIO&quot; /&gt;
                &lt; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.InfoResources.ioConfiguration">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;drives&gt;
            	&lt;drive type=&quot;NdriveCP&quot; multiAxis=&quot;false&quot;&gt;
            		&lt;manuals&gt;
            			&lt;manual name=&quot;EDU178_Ndrive_CP.pdf&quot;&gt;
            				&lt;amperage value=&quot;10&quot; /&gt;
            				&lt;amperage value=&quot;20&quot; /&gt;
            				&lt;amperage value=&quot;30&quot; /&gt;
            			&lt;/manual&gt;
            		&lt;/manuals&gt;
            		&lt;io&gt;
            			&lt;digital&gt;
            				&lt;group name=&quot;1&quot; optional=&quot;true&quot;&gt;
            					&lt;inputs connector=&quot;TB204&quot;&gt;
            						&lt;bit number=&quot;0&quot;&gt;
            							&lt;pin number=&quot;2&quot; /&gt;
            						&lt;/bit&gt;
            						&lt;bit number=&quot;1&quot;&gt;
            							&lt;pin number=&quot;3&quot; /&gt;
            						&lt;/bit&gt;
            						&lt;bit number=&quot;2&quot;&gt;
            		 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.InfoResources.parameters">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;configuration version=&quot;5.0&quot; xmlns=&quot;http://www.aerotech.com/xsd/Controller/Parameters/2009/&quot;&gt;
              &lt;Parameters architecture=&quot;A3200&quot;&gt;
                &lt;Controller&gt;
                  &lt;P n=&quot;DataCollectionPoints&quot;&gt;8000&lt;/P&gt;
                  &lt;P n=&quot;DataCollectionItems&quot;&gt;55&lt;/P&gt;
                  &lt;P n=&quot;GlobalDoubles&quot;&gt;256&lt;/P&gt;
                  &lt;P n=&quot;CommandPort&quot;&gt;8000&lt;/P&gt;
                  &lt;P n=&quot;UserDouble0&quot;&gt;0.0&lt;/P&gt;
                  &lt;P n=&quot;UserDouble1&quot;&gt;0.0&lt;/P&gt;
                  &lt;P n=&quot;UserString0&quot;&gt;&lt;/P&gt;
                  &lt;P n=&quot;UserString1&quot;&gt;&lt;/P&gt;
                  &lt;P n=&quot;CommandSetup&quot;&gt;65536&lt;/P&gt;
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.InfoResources.parametersInfo">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;us-ascii&quot;?&gt;
            &lt;data&gt;
              &lt;!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --&gt;
              &lt;!-- !! this file is auto generated, do NOT edit !! --&gt;
              &lt;!-- !! editing this is a waste of time          !! --&gt;
              &lt;!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! --&gt;
              &lt;!----&gt;
              &lt;!-- generated by parametersInfo_xml.xslt --&gt;
              &lt;parameter name=&quot;DataCollectionPoints&quot; type=&quot;int&quot; number=&quot;0&quot;&gt;
                &lt;default&gt;8000&lt;/default&gt;
                &lt;bounds&gt;
            			&lt;min&gt;100&lt;/min&gt;
            			
            		&lt;/bounds&gt;
              &lt;/parameter&gt;
              &lt;p [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.InfoResources.parametersSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema targetNamespace=&quot;http://www.aerotech.com/xsd/Controller/Parameters/2009/&quot; elementFormDefault=&quot;qualified&quot; xmlns=&quot;http://www.aerotech.com/xsd/Controller/Parameters/2009/&quot; xmlns:mstns=&quot;http://www.aerotech.com/xsd/Controller/Parameters/2009/&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
            	&lt;xs:element name=&quot;configuration&quot;&gt;
            		&lt;xs:complexType&gt;
            			&lt;xs:sequence&gt;
            				&lt;xs:element name=&quot;Parameters&quot; maxOccurs=&quot;1&quot; minOccurs=&quot;1&quot;&gt;
            					&lt;xs:complexType&gt;
            						&lt;xs:seque [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Aerotech.A3200.Information.AxisInfo">
            <summary>Provides information about a specific axis on <see cref="P:Aerotech.A3200.Information.AxisInfo.Controller"/></summary>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.Number">
            <summary>The number of the axis</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.AxisType">
            <summary>The kind of hardware this axis is</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.ServoRate">
            <summary>The servo rate of an axis in kHz</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.MaximumAmperage">
            <summary>The maximum current out of this axis</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.MaximumVoltage">
            <summary>The axis maximum voltage.</summary>
            <remarks>If the voltage is unknown, 0 is returned.</remarks>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.CommandOutputType">
            <summary>The type of output an axis generates.</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.Name">
            <summary>The name of this axis</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.Drive">
            <summary>Returns information about the physical drive on which the axis resides</summary>
            <remarks>If the axis is virtual, then this property will return null.</remarks>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.FirmwareVersion">
            <summary>The version of firmware that is controlling this axis</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.FPGAVersion">
            <summary>What FPGA version the axis is running</summary>
            <remarks>
            	<para>
            		This can be <c>0</c> if the version could not be retrieved
            		from the drive.  This can happen if the version is too out of sync
            		to be able to retrieve or the axis is virtual.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Information.AxisInfo.FlashConfigStatus">
            <summary>Information about FlashConfig status.</summary>
        </member>
        <member name="T:Aerotech.Common.Calibration">
            <summary>Contains operations on calibration files</summary>
        </member>
        <member name="M:Aerotech.Common.Calibration.GetFormat(System.String)">
            <summary>Gets the format of a calibration file</summary>
            <param name="path">The path to the file</param>
            <returns>The format description of the calibration file</returns>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.TaskCallbackContainer">
            <summary>Allows access to callbacks</summary>
            <remarks>
            	<para>This can be accessed from <see cref="P:Aerotech.A3200.Tasks.Task.Callbacks"/></para>
            	<para>Each <see cref="T:Aerotech.A3200.Controller"/> object can handle up to 63 callbacks (including message callbacks). To handle more than 63 callbacks, you will need to call Controller.Connect() multiple times and register for callbacks on each <see cref="T:Aerotech.A3200.Controller"/> object returned from the Controller.Connect() method call.</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Callbacks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[
ref class CustomCallbackMonitor abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Register for callback number 900 on task 1.
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred += gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        myController->Commands[TaskId::T01]->Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred -= gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
    }
    private:
    static void NewCustomCallback(Object^ sender, CallbackOccurredEventArgs^ e)
    {
        // Display a few items concerning the callback
        Console::WriteLine(String::Concat("Task ID: ", e->TaskId));
        Console::WriteLine(String::Concat("Callback number: ", e->CallbackNumber));
        // Set the return value of the callback
        e->ReturnValue = 42.0;
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class CustomCallbackMonitor
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller c = Controller.Connect();
        // Register for callback number 900 on task 1.
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred += new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands[TaskId.T01].Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred -= new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
    }

    private static void NewCustomCallback(object sender, CallbackOccurredEventArgs e)
    {
        // Display a few items concerning the callback
        Console.WriteLine("Task ID: " + e.TaskId);
        Console.WriteLine("Callback number: " + e.CallbackNumber);
        // Set the return value of the callback
        e.ReturnValue = 42.0;
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class CustomCallbackMonitor
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim c As Controller = Controller.Connect
        ' Register for callback number 900 on task 1.
        AddHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
        ' Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands.Item(TaskId.T01).Execute("$task[0] = CALLBACK 900, ""argument 1"", ""argument 2"", 3")
        ' Unregister for the custom callback
        RemoveHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
    End Sub

    Private Shared Sub NewCustomCallback(ByVal sender As Object, ByVal e As CallbackOccurredEventArgs)
        ' Display a few items concerning the callback
        Console.WriteLine(("Task ID: " & e.TaskId))
        Console.WriteLine(("Callback number: " & e.CallbackNumber))
        ' Set the return value of the callback
        e.ReturnValue = 42.0
    End Sub

End Class

]]>
</code>

</example>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.Callbacks</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class DisplayCallbackMonitor abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ controller = Controller::Connect();
        // Register for the MSGDISPLAY callback on task 1.
        controller->Tasks[TaskId::T01]->Callbacks->MessageDisplayCallbackOccurred += gcnew EventHandler<MessageDisplayCallbackOccurredEventArgs^>(NewMessageDisplayCallback);
        // Register for the MSGCLEAR callback on task 1.
        controller->Tasks[TaskId::T01]->Callbacks->MessageClearCallbackOccurred += gcnew EventHandler<MessageClearCallbackOccurredEventArgs^>(NewMessageClearCallback);
        // Raise a MSGDISPLAY callback so our callback handler will print it out.
        controller->Commands[TaskId::T01]->Execute("MSGDISPLAY 1, \"Hello World!\"");
        // Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        controller->Commands[TaskId::T01]->Execute("MSGCLEAR -1");
        // Unregister the callback handler for MSGDISPLAY
        controller->Tasks[TaskId::T01]->Callbacks->MessageDisplayCallbackOccurred -= gcnew EventHandler<MessageDisplayCallbackOccurredEventArgs^>(NewMessageDisplayCallback);
    }
    private:
    static void NewMessageClearCallback(Object^ sender, MessageClearCallbackOccurredEventArgs^ e)
    {
        // Clear all messages displayed, regardless of priority
        Console::Clear();
    }
    private:
    static void NewMessageDisplayCallback(Object^ sender, MessageDisplayCallbackOccurredEventArgs^ e)
    {
        // Display the message priority and the message text
        Console::WriteLine(String::Concat("Priority: ", e->Priority));
        Console::WriteLine(String::Concat("Message Text: ", e->Message));
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class DisplayCallbackMonitor
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller c = Controller.Connect();
        // Register for the MSGDISPLAY callback on task 1.
        c.Tasks[TaskId.T01].Callbacks.MessageDisplayCallbackOccurred += new EventHandler<MessageDisplayCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageDisplayCallback);
        // Register for the MSGCLEAR callback on task 1.
        c.Tasks[TaskId.T01].Callbacks.MessageClearCallbackOccurred += new EventHandler<MessageClearCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageClearCallback);
        // Raise a MSGDISPLAY callback so our callback handler will print it out.
        c.Commands[TaskId.T01].Execute("MSGDISPLAY 1, \"Hello World!\"");
        // Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        c.Commands[TaskId.T01].Execute("MSGCLEAR -1");
        // Unregister the callback handler for MSGDISPLAY
        c.Tasks[TaskId.T01].Callbacks.MessageDisplayCallbackOccurred -= new EventHandler<MessageDisplayCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageDisplayCallback);
    }

    private static void NewMessageClearCallback(object sender, MessageClearCallbackOccurredEventArgs e)
    {
        // Clear all messages displayed, regardless of priority
        Console.Clear();
    }

    private static void NewMessageDisplayCallback(object sender, MessageDisplayCallbackOccurredEventArgs e)
    {
        // Display the message priority and the message text
        Console.WriteLine("Priority: " + e.Priority);
        Console.WriteLine("Message Text: " + e.Message);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class DisplayCallbackMonitor
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim c As Controller = Controller.Connect
        ' Register for the MSGDISPLAY callback on task 1.
        AddHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageDisplayCallbackOccurred, New EventHandler(Of MessageDisplayCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageDisplayCallback)
        ' Register for the MSGCLEAR callback on task 1.
        AddHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageClearCallbackOccurred, New EventHandler(Of MessageClearCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageClearCallback)
        ' Raise a MSGDISPLAY callback so our callback handler will print it out.
        c.Commands.Item(TaskId.T01).Execute("MSGDISPLAY 1, ""Hello World!""")
        ' Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        c.Commands.Item(TaskId.T01).Execute("MSGCLEAR -1")
        ' Unregister the callback handler for MSGDISPLAY
        RemoveHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageDisplayCallbackOccurred, New EventHandler(Of MessageDisplayCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageDisplayCallback)
    End Sub

    Private Shared Sub NewMessageClearCallback(ByVal sender As Object, ByVal e As MessageClearCallbackOccurredEventArgs)
        ' Clear all messages displayed, regardless of priority
        Console.Clear
    End Sub

    Private Shared Sub NewMessageDisplayCallback(ByVal sender As Object, ByVal e As MessageDisplayCallbackOccurredEventArgs)
        ' Display the message priority and the message text
        Console.WriteLine(("Priority: " & e.Priority))
        Console.WriteLine(("Message Text: " & e.Message))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.TaskCallbackContainer.Custom">
            <summary>Contains custom callbacks</summary>
            <remarks>
            	<para>
            		Use this class whenever there is not a specific callback event available on this class.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Callbacks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[
ref class CustomCallbackMonitor abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Register for callback number 900 on task 1.
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred += gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        myController->Commands[TaskId::T01]->Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred -= gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
    }
    private:
    static void NewCustomCallback(Object^ sender, CallbackOccurredEventArgs^ e)
    {
        // Display a few items concerning the callback
        Console::WriteLine(String::Concat("Task ID: ", e->TaskId));
        Console::WriteLine(String::Concat("Callback number: ", e->CallbackNumber));
        // Set the return value of the callback
        e->ReturnValue = 42.0;
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class CustomCallbackMonitor
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller c = Controller.Connect();
        // Register for callback number 900 on task 1.
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred += new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands[TaskId.T01].Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred -= new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
    }

    private static void NewCustomCallback(object sender, CallbackOccurredEventArgs e)
    {
        // Display a few items concerning the callback
        Console.WriteLine("Task ID: " + e.TaskId);
        Console.WriteLine("Callback number: " + e.CallbackNumber);
        // Set the return value of the callback
        e.ReturnValue = 42.0;
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class CustomCallbackMonitor
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim c As Controller = Controller.Connect
        ' Register for callback number 900 on task 1.
        AddHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
        ' Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands.Item(TaskId.T01).Execute("$task[0] = CALLBACK 900, ""argument 1"", ""argument 2"", 3")
        ' Unregister for the custom callback
        RemoveHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
    End Sub

    Private Shared Sub NewCustomCallback(ByVal sender As Object, ByVal e As CallbackOccurredEventArgs)
        ' Display a few items concerning the callback
        Console.WriteLine(("Task ID: " & e.TaskId))
        Console.WriteLine(("Callback number: " & e.CallbackNumber))
        ' Set the return value of the callback
        e.ReturnValue = 42.0
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.TaskCallbackContainer.CanRegisterMessageCallbacks">
            <summary>
            Determines whether or not message callbacks can be registered
            </summary>
            <remarks>
            Only 1 Controller object can be registered for a particular callback. If a callback is registered for by another Controller and registration is attempted using another Controller object, then an error will occur.
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.TaskCallbackContainer.CanRegisterScopeLoopTransmissionCallback">
            <summary>
            Determines whether or not the Scope loop transmission callback can be registered
            </summary>
            <remarks>
            Only 1 Controller object can be registered for a particular callback. If a callback is registered for by another Controller and registration is attempted using another Controller object, then an error will occur.
            </remarks>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.ErrorOccurred">
            <summary>Event raised when there is an error in retrieving the callback information</summary>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.MessageDisplayCallbackOccurred">
            <summary>Raised whenever a <c>MSGDISPLAY</c> is done</summary>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.Callbacks</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class DisplayCallbackMonitor abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ controller = Controller::Connect();
        // Register for the MSGDISPLAY callback on task 1.
        controller->Tasks[TaskId::T01]->Callbacks->MessageDisplayCallbackOccurred += gcnew EventHandler<MessageDisplayCallbackOccurredEventArgs^>(NewMessageDisplayCallback);
        // Register for the MSGCLEAR callback on task 1.
        controller->Tasks[TaskId::T01]->Callbacks->MessageClearCallbackOccurred += gcnew EventHandler<MessageClearCallbackOccurredEventArgs^>(NewMessageClearCallback);
        // Raise a MSGDISPLAY callback so our callback handler will print it out.
        controller->Commands[TaskId::T01]->Execute("MSGDISPLAY 1, \"Hello World!\"");
        // Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        controller->Commands[TaskId::T01]->Execute("MSGCLEAR -1");
        // Unregister the callback handler for MSGDISPLAY
        controller->Tasks[TaskId::T01]->Callbacks->MessageDisplayCallbackOccurred -= gcnew EventHandler<MessageDisplayCallbackOccurredEventArgs^>(NewMessageDisplayCallback);
    }
    private:
    static void NewMessageClearCallback(Object^ sender, MessageClearCallbackOccurredEventArgs^ e)
    {
        // Clear all messages displayed, regardless of priority
        Console::Clear();
    }
    private:
    static void NewMessageDisplayCallback(Object^ sender, MessageDisplayCallbackOccurredEventArgs^ e)
    {
        // Display the message priority and the message text
        Console::WriteLine(String::Concat("Priority: ", e->Priority));
        Console::WriteLine(String::Concat("Message Text: ", e->Message));
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class DisplayCallbackMonitor
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller c = Controller.Connect();
        // Register for the MSGDISPLAY callback on task 1.
        c.Tasks[TaskId.T01].Callbacks.MessageDisplayCallbackOccurred += new EventHandler<MessageDisplayCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageDisplayCallback);
        // Register for the MSGCLEAR callback on task 1.
        c.Tasks[TaskId.T01].Callbacks.MessageClearCallbackOccurred += new EventHandler<MessageClearCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageClearCallback);
        // Raise a MSGDISPLAY callback so our callback handler will print it out.
        c.Commands[TaskId.T01].Execute("MSGDISPLAY 1, \"Hello World!\"");
        // Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        c.Commands[TaskId.T01].Execute("MSGCLEAR -1");
        // Unregister the callback handler for MSGDISPLAY
        c.Tasks[TaskId.T01].Callbacks.MessageDisplayCallbackOccurred -= new EventHandler<MessageDisplayCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageDisplayCallback);
    }

    private static void NewMessageClearCallback(object sender, MessageClearCallbackOccurredEventArgs e)
    {
        // Clear all messages displayed, regardless of priority
        Console.Clear();
    }

    private static void NewMessageDisplayCallback(object sender, MessageDisplayCallbackOccurredEventArgs e)
    {
        // Display the message priority and the message text
        Console.WriteLine("Priority: " + e.Priority);
        Console.WriteLine("Message Text: " + e.Message);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class DisplayCallbackMonitor
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim c As Controller = Controller.Connect
        ' Register for the MSGDISPLAY callback on task 1.
        AddHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageDisplayCallbackOccurred, New EventHandler(Of MessageDisplayCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageDisplayCallback)
        ' Register for the MSGCLEAR callback on task 1.
        AddHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageClearCallbackOccurred, New EventHandler(Of MessageClearCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageClearCallback)
        ' Raise a MSGDISPLAY callback so our callback handler will print it out.
        c.Commands.Item(TaskId.T01).Execute("MSGDISPLAY 1, ""Hello World!""")
        ' Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        c.Commands.Item(TaskId.T01).Execute("MSGCLEAR -1")
        ' Unregister the callback handler for MSGDISPLAY
        RemoveHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageDisplayCallbackOccurred, New EventHandler(Of MessageDisplayCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageDisplayCallback)
    End Sub

    Private Shared Sub NewMessageClearCallback(ByVal sender As Object, ByVal e As MessageClearCallbackOccurredEventArgs)
        ' Clear all messages displayed, regardless of priority
        Console.Clear
    End Sub

    Private Shared Sub NewMessageDisplayCallback(ByVal sender As Object, ByVal e As MessageDisplayCallbackOccurredEventArgs)
        ' Display the message priority and the message text
        Console.WriteLine(("Priority: " & e.Priority))
        Console.WriteLine(("Message Text: " & e.Message))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.MessageBoxCallbackOccurred">
            <summary>Raised whenever a <c>MSGBOX</c> is done</summary>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.MessageClearCallbackOccurred">
            <summary>Raised whenever a <c>MSGCLEAR</c> is done</summary>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.Callbacks</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class DisplayCallbackMonitor abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ controller = Controller::Connect();
        // Register for the MSGDISPLAY callback on task 1.
        controller->Tasks[TaskId::T01]->Callbacks->MessageDisplayCallbackOccurred += gcnew EventHandler<MessageDisplayCallbackOccurredEventArgs^>(NewMessageDisplayCallback);
        // Register for the MSGCLEAR callback on task 1.
        controller->Tasks[TaskId::T01]->Callbacks->MessageClearCallbackOccurred += gcnew EventHandler<MessageClearCallbackOccurredEventArgs^>(NewMessageClearCallback);
        // Raise a MSGDISPLAY callback so our callback handler will print it out.
        controller->Commands[TaskId::T01]->Execute("MSGDISPLAY 1, \"Hello World!\"");
        // Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        controller->Commands[TaskId::T01]->Execute("MSGCLEAR -1");
        // Unregister the callback handler for MSGDISPLAY
        controller->Tasks[TaskId::T01]->Callbacks->MessageDisplayCallbackOccurred -= gcnew EventHandler<MessageDisplayCallbackOccurredEventArgs^>(NewMessageDisplayCallback);
    }
    private:
    static void NewMessageClearCallback(Object^ sender, MessageClearCallbackOccurredEventArgs^ e)
    {
        // Clear all messages displayed, regardless of priority
        Console::Clear();
    }
    private:
    static void NewMessageDisplayCallback(Object^ sender, MessageDisplayCallbackOccurredEventArgs^ e)
    {
        // Display the message priority and the message text
        Console::WriteLine(String::Concat("Priority: ", e->Priority));
        Console::WriteLine(String::Concat("Message Text: ", e->Message));
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class DisplayCallbackMonitor
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller c = Controller.Connect();
        // Register for the MSGDISPLAY callback on task 1.
        c.Tasks[TaskId.T01].Callbacks.MessageDisplayCallbackOccurred += new EventHandler<MessageDisplayCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageDisplayCallback);
        // Register for the MSGCLEAR callback on task 1.
        c.Tasks[TaskId.T01].Callbacks.MessageClearCallbackOccurred += new EventHandler<MessageClearCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageClearCallback);
        // Raise a MSGDISPLAY callback so our callback handler will print it out.
        c.Commands[TaskId.T01].Execute("MSGDISPLAY 1, \"Hello World!\"");
        // Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        c.Commands[TaskId.T01].Execute("MSGCLEAR -1");
        // Unregister the callback handler for MSGDISPLAY
        c.Tasks[TaskId.T01].Callbacks.MessageDisplayCallbackOccurred -= new EventHandler<MessageDisplayCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageDisplayCallback);
    }

    private static void NewMessageClearCallback(object sender, MessageClearCallbackOccurredEventArgs e)
    {
        // Clear all messages displayed, regardless of priority
        Console.Clear();
    }

    private static void NewMessageDisplayCallback(object sender, MessageDisplayCallbackOccurredEventArgs e)
    {
        // Display the message priority and the message text
        Console.WriteLine("Priority: " + e.Priority);
        Console.WriteLine("Message Text: " + e.Message);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class DisplayCallbackMonitor
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim c As Controller = Controller.Connect
        ' Register for the MSGDISPLAY callback on task 1.
        AddHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageDisplayCallbackOccurred, New EventHandler(Of MessageDisplayCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageDisplayCallback)
        ' Register for the MSGCLEAR callback on task 1.
        AddHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageClearCallbackOccurred, New EventHandler(Of MessageClearCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageClearCallback)
        ' Raise a MSGDISPLAY callback so our callback handler will print it out.
        c.Commands.Item(TaskId.T01).Execute("MSGDISPLAY 1, ""Hello World!""")
        ' Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        c.Commands.Item(TaskId.T01).Execute("MSGCLEAR -1")
        ' Unregister the callback handler for MSGDISPLAY
        RemoveHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageDisplayCallbackOccurred, New EventHandler(Of MessageDisplayCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageDisplayCallback)
    End Sub

    Private Shared Sub NewMessageClearCallback(ByVal sender As Object, ByVal e As MessageClearCallbackOccurredEventArgs)
        ' Clear all messages displayed, regardless of priority
        Console.Clear
    End Sub

    Private Shared Sub NewMessageDisplayCallback(ByVal sender As Object, ByVal e As MessageDisplayCallbackOccurredEventArgs)
        ' Display the message priority and the message text
        Console.WriteLine(("Priority: " & e.Priority))
        Console.WriteLine(("Message Text: " & e.Message))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.FileSelectCallbackOccurred">
            <summary>Raised whenever a <c>MSGFILESELECT</c> is done</summary>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.MessageHideCallbackOccurred">
            <summary>Raised whenever <c>MSGHIDE</c> is done</summary>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.MessageShowCallbackOccurred">
            <summary>Raised whenever <c>MSGSHOW</c> is done</summary>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.MessageInputCallbackOccurred">
            <summary>Raised whenever <c>MSGINPUT</c> is done</summary>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.MessageLampCallbackOccurred">
            <summary>Raised whenever <c>MSGLAMP</c> is done</summary>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.MessageMenuCallbackOccurred">
            <summary>Raised whenever <c>MSGMENU</c> is done</summary>
            <remarks>
            	<para>This event will not be raised until the <c>DF_MENU_SHOW</c> command is given.</para>
            </remarks>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.TaskCallbackContainer.ScopeLoopTransmissionTriggered">
            <summary>Raised whenever <c>SCOPELTTRIG</c> is done</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.CustomCallbackContainer">
            <summary>Allows access to custom callbacks and handling of the callbacks by hand</summary>
            <remarks>
            <para>Callback numbers are expected to be in the range of 0-999. Registering for a callback number outside of this range may interfere with the operation of built-in callback commands such as FILEREAD, SCOPEOPEN, etc.</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Callbacks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[
ref class CustomCallbackMonitor abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Register for callback number 900 on task 1.
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred += gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        myController->Commands[TaskId::T01]->Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred -= gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
    }
    private:
    static void NewCustomCallback(Object^ sender, CallbackOccurredEventArgs^ e)
    {
        // Display a few items concerning the callback
        Console::WriteLine(String::Concat("Task ID: ", e->TaskId));
        Console::WriteLine(String::Concat("Callback number: ", e->CallbackNumber));
        // Set the return value of the callback
        e->ReturnValue = 42.0;
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class CustomCallbackMonitor
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller c = Controller.Connect();
        // Register for callback number 900 on task 1.
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred += new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands[TaskId.T01].Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred -= new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
    }

    private static void NewCustomCallback(object sender, CallbackOccurredEventArgs e)
    {
        // Display a few items concerning the callback
        Console.WriteLine("Task ID: " + e.TaskId);
        Console.WriteLine("Callback number: " + e.CallbackNumber);
        // Set the return value of the callback
        e.ReturnValue = 42.0;
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class CustomCallbackMonitor
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim c As Controller = Controller.Connect
        ' Register for callback number 900 on task 1.
        AddHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
        ' Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands.Item(TaskId.T01).Execute("$task[0] = CALLBACK 900, ""argument 1"", ""argument 2"", 3")
        ' Unregister for the custom callback
        RemoveHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
    End Sub

    Private Shared Sub NewCustomCallback(ByVal sender As Object, ByVal e As CallbackOccurredEventArgs)
        ' Display a few items concerning the callback
        Console.WriteLine(("Task ID: " & e.TaskId))
        Console.WriteLine(("Callback number: " & e.CallbackNumber))
        ' Set the return value of the callback
        e.ReturnValue = 42.0
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CustomCallbackContainer.Item(System.Int32)">
            <summary>Allows access to a specific callback</summary>
            <param name="index">The callback to access</param>
            <returns>The class for handling specific callback</returns>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.CustomCallback">
            <summary>Represents a custom callback</summary>
            <remarks>
            	<para>See <see cref="T:Aerotech.A3200.Callbacks.CustomCallbackContainer"/> for information on accessing this</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Callbacks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[
ref class CustomCallbackMonitor abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Register for callback number 900 on task 1.
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred += gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        myController->Commands[TaskId::T01]->Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred -= gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
    }
    private:
    static void NewCustomCallback(Object^ sender, CallbackOccurredEventArgs^ e)
    {
        // Display a few items concerning the callback
        Console::WriteLine(String::Concat("Task ID: ", e->TaskId));
        Console::WriteLine(String::Concat("Callback number: ", e->CallbackNumber));
        // Set the return value of the callback
        e->ReturnValue = 42.0;
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class CustomCallbackMonitor
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller c = Controller.Connect();
        // Register for callback number 900 on task 1.
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred += new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands[TaskId.T01].Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred -= new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
    }

    private static void NewCustomCallback(object sender, CallbackOccurredEventArgs e)
    {
        // Display a few items concerning the callback
        Console.WriteLine("Task ID: " + e.TaskId);
        Console.WriteLine("Callback number: " + e.CallbackNumber);
        // Set the return value of the callback
        e.ReturnValue = 42.0;
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class CustomCallbackMonitor
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim c As Controller = Controller.Connect
        ' Register for callback number 900 on task 1.
        AddHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
        ' Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands.Item(TaskId.T01).Execute("$task[0] = CALLBACK 900, ""argument 1"", ""argument 2"", 3")
        ' Unregister for the custom callback
        RemoveHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
    End Sub

    Private Shared Sub NewCustomCallback(ByVal sender As Object, ByVal e As CallbackOccurredEventArgs)
        ' Display a few items concerning the callback
        Console.WriteLine(("Task ID: " & e.TaskId))
        Console.WriteLine(("Callback number: " & e.CallbackNumber))
        ' Set the return value of the callback
        e.ReturnValue = 42.0
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CustomCallback.CanRegister">
            <summary>
            Determines whether or not the custom callback can be registered
            </summary>
            <remarks>
            Only 1 Controller object can be registered for a particular callback. If a callback is registered for by another Controller and registration is attempted using another Controller object, then an error will occur.
            </remarks>
        </member>
        <member name="E:Aerotech.A3200.Callbacks.CustomCallback.CallbackOccurred">
            <summary>Raised when this custom callback occurs</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.CallbackOccurredEventArgs">
            <summary>Event arguments of a <see cref="E:Aerotech.A3200.Callbacks.CustomCallback.CallbackOccurred"/></summary>
            /// <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Callbacks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[
ref class CustomCallbackMonitor abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Register for callback number 900 on task 1.
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred += gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        myController->Commands[TaskId::T01]->Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        myController->Tasks[1]->Callbacks->Custom[900]->CallbackOccurred -= gcnew EventHandler<CallbackOccurredEventArgs^>(NewCustomCallback);
    }
    private:
    static void NewCustomCallback(Object^ sender, CallbackOccurredEventArgs^ e)
    {
        // Display a few items concerning the callback
        Console::WriteLine(String::Concat("Task ID: ", e->TaskId));
        Console::WriteLine(String::Concat("Callback number: ", e->CallbackNumber));
        // Set the return value of the callback
        e->ReturnValue = 42.0;
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class CustomCallbackMonitor
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller c = Controller.Connect();
        // Register for callback number 900 on task 1.
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred += new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
        // Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands[TaskId.T01].Execute("$task[0] = CALLBACK 900, \"argument 1\", \"argument 2\", 3");
        // Unregister for the custom callback
        c.Tasks[1].Callbacks.Custom[900].CallbackOccurred -= new EventHandler<CallbackOccurredEventArgs>(CustomCallbackMonitor.NewCustomCallback);
    }

    private static void NewCustomCallback(object sender, CallbackOccurredEventArgs e)
    {
        // Display a few items concerning the callback
        Console.WriteLine("Task ID: " + e.TaskId);
        Console.WriteLine("Callback number: " + e.CallbackNumber);
        // Set the return value of the callback
        e.ReturnValue = 42.0;
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class CustomCallbackMonitor
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim c As Controller = Controller.Connect
        ' Register for callback number 900 on task 1.
        AddHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
        ' Raise a custom callback on task 1 so our callback handler will handle it.
        c.Commands.Item(TaskId.T01).Execute("$task[0] = CALLBACK 900, ""argument 1"", ""argument 2"", 3")
        ' Unregister for the custom callback
        RemoveHandler c.Tasks.Item(1).Callbacks.Custom.Item(900).CallbackOccurred, New EventHandler(Of CallbackOccurredEventArgs)(AddressOf CustomCallbackMonitor.NewCustomCallback)
    End Sub

    Private Shared Sub NewCustomCallback(ByVal sender As Object, ByVal e As CallbackOccurredEventArgs)
        ' Display a few items concerning the callback
        Console.WriteLine(("Task ID: " & e.TaskId))
        Console.WriteLine(("Callback number: " & e.CallbackNumber))
        ' Set the return value of the callback
        e.ReturnValue = 42.0
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.Status.ControllerEventArgs">
            <summary>
            The base class for classes containing event data related to controllers.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Status.ControllerEventArgs.#ctor(Aerotech.A3200.Controller)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.A3200.Status.ControllerEventArgs"/>
            </summary>
            <param name="controller">The controller with which the event data is associated</param>
        </member>
        <member name="P:Aerotech.A3200.Status.ControllerEventArgs.Controller">
            <summary>
            The controller associated with the event
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CallbackOccurredEventArgs.TaskId">
            <summary>Which task caused the callback</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CallbackOccurredEventArgs.CallbackNumber">
            <summary>The callback number</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CallbackOccurredEventArgs.Arguments">
            <summary>The arguments that were given to the callback</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CallbackOccurredEventArgs.ReturnValue">
            <summary>The value to return to the callback</summary>
            <remarks>
            	<para>Only <see cref="T:System.Double"/> and <see cref="T:System.String"/> types are allowed.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">If an unsupported type is given</exception>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CallbackOccurredEventArgs.Info0">
            <summary>Additional information value to return (in <c>$info0</c>)</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CallbackOccurredEventArgs.Info1">
            <summary>Additional information value to return (in <c>$info1</c>)</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.CallbackErrorEventArgs">
            <summary>
            Provides data for the callback error events
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CallbackErrorEventArgs.TaskId">
            <summary>The task on which the error happened</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.CallbackErrorEventArgs.Exception">
            <summary>The exception that caused the error to happen</summary>
            <remarks>
            	<para>
            		To figure out the exact error inspect the specific type of the exception.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MessageCallbackOccurredEventArgsBase">
            <summary>Event arguments of a message callback</summary>
        </member>
        <member name="F:Aerotech.A3200.Callbacks.MessageCallbackOccurredEventArgsBase.baseEvent">
            <summary>The generic callback information</summary>
        </member>
        <member name="M:Aerotech.A3200.Callbacks.MessageCallbackOccurredEventArgsBase.#ctor(Aerotech.A3200.Callbacks.CallbackOccurredEventArgs)">
            <summary>Creates a new instance of the class with specific generic callback information</summary>
            <param name="e">The generic callback information</param>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageCallbackOccurredEventArgsBase.TaskId">
            <summary>The task generated the callback</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MessageDisplayCallbackOccurredEventArgs">
            <summary>Event arguments for <c>MSGDISPLAY</c></summary>
            /// <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.Callbacks</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class DisplayCallbackMonitor abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ controller = Controller::Connect();
        // Register for the MSGDISPLAY callback on task 1.
        controller->Tasks[TaskId::T01]->Callbacks->MessageDisplayCallbackOccurred += gcnew EventHandler<MessageDisplayCallbackOccurredEventArgs^>(NewMessageDisplayCallback);
        // Register for the MSGCLEAR callback on task 1.
        controller->Tasks[TaskId::T01]->Callbacks->MessageClearCallbackOccurred += gcnew EventHandler<MessageClearCallbackOccurredEventArgs^>(NewMessageClearCallback);
        // Raise a MSGDISPLAY callback so our callback handler will print it out.
        controller->Commands[TaskId::T01]->Execute("MSGDISPLAY 1, \"Hello World!\"");
        // Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        controller->Commands[TaskId::T01]->Execute("MSGCLEAR -1");
        // Unregister the callback handler for MSGDISPLAY
        controller->Tasks[TaskId::T01]->Callbacks->MessageDisplayCallbackOccurred -= gcnew EventHandler<MessageDisplayCallbackOccurredEventArgs^>(NewMessageDisplayCallback);
    }
    private:
    static void NewMessageClearCallback(Object^ sender, MessageClearCallbackOccurredEventArgs^ e)
    {
        // Clear all messages displayed, regardless of priority
        Console::Clear();
    }
    private:
    static void NewMessageDisplayCallback(Object^ sender, MessageDisplayCallbackOccurredEventArgs^ e)
    {
        // Display the message priority and the message text
        Console::WriteLine(String::Concat("Priority: ", e->Priority));
        Console::WriteLine(String::Concat("Message Text: ", e->Message));
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class DisplayCallbackMonitor
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller c = Controller.Connect();
        // Register for the MSGDISPLAY callback on task 1.
        c.Tasks[TaskId.T01].Callbacks.MessageDisplayCallbackOccurred += new EventHandler<MessageDisplayCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageDisplayCallback);
        // Register for the MSGCLEAR callback on task 1.
        c.Tasks[TaskId.T01].Callbacks.MessageClearCallbackOccurred += new EventHandler<MessageClearCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageClearCallback);
        // Raise a MSGDISPLAY callback so our callback handler will print it out.
        c.Commands[TaskId.T01].Execute("MSGDISPLAY 1, \"Hello World!\"");
        // Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        c.Commands[TaskId.T01].Execute("MSGCLEAR -1");
        // Unregister the callback handler for MSGDISPLAY
        c.Tasks[TaskId.T01].Callbacks.MessageDisplayCallbackOccurred -= new EventHandler<MessageDisplayCallbackOccurredEventArgs>(DisplayCallbackMonitor.NewMessageDisplayCallback);
    }

    private static void NewMessageClearCallback(object sender, MessageClearCallbackOccurredEventArgs e)
    {
        // Clear all messages displayed, regardless of priority
        Console.Clear();
    }

    private static void NewMessageDisplayCallback(object sender, MessageDisplayCallbackOccurredEventArgs e)
    {
        // Display the message priority and the message text
        Console.WriteLine("Priority: " + e.Priority);
        Console.WriteLine("Message Text: " + e.Message);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class DisplayCallbackMonitor
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim c As Controller = Controller.Connect
        ' Register for the MSGDISPLAY callback on task 1.
        AddHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageDisplayCallbackOccurred, New EventHandler(Of MessageDisplayCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageDisplayCallback)
        ' Register for the MSGCLEAR callback on task 1.
        AddHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageClearCallbackOccurred, New EventHandler(Of MessageClearCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageClearCallback)
        ' Raise a MSGDISPLAY callback so our callback handler will print it out.
        c.Commands.Item(TaskId.T01).Execute("MSGDISPLAY 1, ""Hello World!""")
        ' Raise a MSGCLEAR callback so our callback handler will clear the console screen.
        c.Commands.Item(TaskId.T01).Execute("MSGCLEAR -1")
        ' Unregister the callback handler for MSGDISPLAY
        RemoveHandler c.Tasks.Item(TaskId.T01).Callbacks.MessageDisplayCallbackOccurred, New EventHandler(Of MessageDisplayCallbackOccurredEventArgs)(AddressOf DisplayCallbackMonitor.NewMessageDisplayCallback)
    End Sub

    Private Shared Sub NewMessageClearCallback(ByVal sender As Object, ByVal e As MessageClearCallbackOccurredEventArgs)
        ' Clear all messages displayed, regardless of priority
        Console.Clear
    End Sub

    Private Shared Sub NewMessageDisplayCallback(ByVal sender As Object, ByVal e As MessageDisplayCallbackOccurredEventArgs)
        ' Display the message priority and the message text
        Console.WriteLine(("Priority: " & e.Priority))
        Console.WriteLine(("Message Text: " & e.Message))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageDisplayCallbackOccurredEventArgs.Priority">
            <summary>The priority of the message</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageDisplayCallbackOccurredEventArgs.Message">
            <summary>The string form of the message</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MessageBoxCallbackOccurredEventArgs">
            <summary>Event arguments for <c>MSGBOX</c></summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageBoxCallbackOccurredEventArgs.ClickedButton">
            <summary>Specifies what to return as the clicked button</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageBoxCallbackOccurredEventArgs.Buttons">
            <summary>Specifies what buttons to show</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageBoxCallbackOccurredEventArgs.Icon">
            <summary>Specifies which icon to use</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageBoxCallbackOccurredEventArgs.DefaultButton">
            <summary>Specifies the default button</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageBoxCallbackOccurredEventArgs.Text">
            <summary>The message to display</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MessageClearCallbackOccurredEventArgs">
            <summary>Event arguments for <c>MSGCLEAR</c></summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageClearCallbackOccurredEventArgs.Priority">
            <summary>The priority of the clear</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.FileSelectCallbackOccurredEventArgs">
            <summary>Event arguments for <c>MSGFILESELECT</c></summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.FileSelectCallbackOccurredEventArgs.DialogKind">
            <summary>The kind of dialog to show (open/save)</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.FileSelectCallbackOccurredEventArgs.Title">
            <summary>The message to display</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.FileSelectCallbackOccurredEventArgs.InitialDirectory">
            <summary>The directory to start at</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.FileSelectCallbackOccurredEventArgs.SelectedFile">
            <summary>The file to have selected by default</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.FileSelectCallbackOccurredEventArgs.Filter">
            <summary>The filters to use</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.FileSelectCallbackOccurredEventArgs.FilePath">
            <summary>The resulting full file path</summary>
            <exception cref="T:System.ArgumentException">If the path is not a full path</exception>
            <remarks>
            	<para>Set to <c>null</c> to specify that the user cancelled the operation</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MessageHideCallbackOccurredEventArgs">
            <summary>Event arguments for <c>MSGHIDE</c></summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MessageShowCallbackOccurredEventArgs">
            <summary>Event arguments for <c>MSGSHOW</c></summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MessageInputCallbackOccurredEventArgs">
            <summary>Event arguments for <c>MSGINPUT</c></summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageInputCallbackOccurredEventArgs.ReturnValue">
            <summary>The value to return in the callback</summary>
            <remarks>
            	<para>Only <see cref="T:System.Double"/>, <see cref="T:System.Int32"/>, or <see cref="T:System.String"/> types are allowed.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">If an unsupported type is given</exception>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageInputCallbackOccurredEventArgs.ClickedButton">
            <summary>Specifies what to return as the clicked button</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageInputCallbackOccurredEventArgs.InputBoxKind">
            <summary>The kind of input box to show</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageInputCallbackOccurredEventArgs.Buttons">
            <summary>The buttons to display</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageInputCallbackOccurredEventArgs.Title">
            <summary>The title to give to the dialog</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageInputCallbackOccurredEventArgs.PromptText">
            <summary>The text to prompt the user with</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageInputCallbackOccurredEventArgs.DefaultReturnValue">
            <summary>The value to use as the default return value</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MessageLampCallbackOccurredEventArgs">
            <summary>Event arguments for <c>MSGLAMP</c></summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageLampCallbackOccurredEventArgs.LampNumber">
            <summary>Which lamp to use</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageLampCallbackOccurredEventArgs.Text">
            <summary>The text to display</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageLampCallbackOccurredEventArgs.Color">
            <summary>The color to use for the background</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MessageMenuCallbackOccurredEventArgs">
            <summary>Event arguments for <c>MSGMENU</c></summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageMenuCallbackOccurredEventArgs.Buttons">
            <summary>The buttons to display</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageMenuCallbackOccurredEventArgs.ClickedButton">
            <summary>Specifies what to return as the clicked button</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageMenuCallbackOccurredEventArgs.SelectedItemIndex">
            <summary>Specifies the selected item's index</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If given value is negative</exception>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageMenuCallbackOccurredEventArgs.Title">
            <summary>The title to use</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageMenuCallbackOccurredEventArgs.Prompt">
            <summary>The prompt to show to the user</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageMenuCallbackOccurredEventArgs.Items">
            <summary>The items to display to the user</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MessageMenuCallbackOccurredEventArgs.DefaultItemIndex">
            <summary>The index of the default item</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.ScopeLoopTransmissionTriggeredEventArgs">
            <summary>Event arguments for <c>SCOPELTTRIG</c></summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.ScopeLoopTransmissionTriggeredEventArgs.AxisNumber">
            <summary>The axis on which to do Loop Transmission</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.ScopeLoopTransmissionTriggeredEventArgs.StartFrequency">
            <summary>The frequency to start at</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.ScopeLoopTransmissionTriggeredEventArgs.EndFrequency">
            <summary>The frequency to end at</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.ScopeLoopTransmissionTriggeredEventArgs.NumberOfDivisions">
            <summary>The number of divisions to split the frequencies into</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.ScopeLoopTransmissionTriggeredEventArgs.Amplitude">
            <summary>The amplitutde to use as a percentage of maximum</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.ScopeLoopTransmissionTriggeredEventArgs.FileName">
            <summary>The name of the file where to save the results</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.MenuOption">
            <summary>Represents an entry for <see cref="T:Aerotech.A3200.Callbacks.MessageMenuCallbackOccurredEventArgs"/></summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MenuOption.Aerotech#Common#INamed{System#Int32}#Name">
            <summary>The unique id of the item</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MenuOption.Number">
            <summary>The number of the item</summary>
        </member>
        <member name="P:Aerotech.A3200.Callbacks.MenuOption.Text">
            <summary>The text to display for the item</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.CommandCategory">
            <summary>
            Represents a category of immediate commands
            </summary>
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.Commands.TaskSelectionCommands">
            <summary>Allows execution of commands in a given task</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Enable axis X on task 1
    myController->Commands[TaskId::T01]->Motion->Enable("X");
    // Sleep for 5 seconds on task 3
    myController->Commands[TaskId::T03]->Execute("DWELL 5");

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Enable axis X on task 1
    myController.Commands[TaskId.T01].Motion.Enable("X");
    // Sleep for 5 seconds on task 3
    myController.Commands[TaskId.T03].Execute("DWELL 5");

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Enable axis X on task 1
    myController.Commands.Item(TaskId.T01).Motion.Enable("X")
    ' Sleep for 5 seconds on task 3
    myController.Commands.Item(TaskId.T03).Execute("DWELL 5")

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.Commands.RootCommands">
            <summary>
            Represents the main category that allows access to all of the commands
            </summary>
            <summary>Contains the Root Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.RootCommands.ThrowAxisFault(Aerotech.A3200.Status.AxisFault,System.Int32)">
            <summary>Forces a specific fault on an axis</summary>
            <param name="axisFault">The fault or faults to force</param>
            <param name="axisIndex">The axis index to force the fault on</param>
        </member>
        <member name="M:Aerotech.A3200.Commands.RootCommands.ThrowAxisFault(Aerotech.A3200.Status.AxisFault,System.Int32[])">
            <summary>Forces a specific fault on axes</summary>
            <param name="axisFault">The fault or faults to force</param>
            <param name="axisIndexes">The axes to force the fault on</param>
        </member>
        <member name="M:Aerotech.A3200.Commands.RootCommands.ThrowAxisFault(Aerotech.A3200.Status.AxisFault,System.String)">
            <summary>Forces a specific fault on an axis</summary>
            <param name="axisFault">The fault or faults to force</param>
            <param name="axisName">The axis index to force the fault on</param>
        </member>
        <member name="M:Aerotech.A3200.Commands.RootCommands.ThrowAxisFault(Aerotech.A3200.Status.AxisFault,System.String[])">
            <summary>Forces a specific fault on axes</summary>
            <param name="axisFault">The fault or faults to force</param>
            <param name="axisNames">The axes to force the fault on</param>
        </member>
        <member name="M:Aerotech.A3200.Commands.RootCommands.ThrowAxisFault(Aerotech.A3200.Status.AxisFault,Aerotech.A3200.AxisMask)">
            <summary>Forces a specific fault on axes</summary>
            <param name="axisFault">The fault or faults to force</param>
            <param name="axisMask">The axes to force the fault on</param>
        </member>
        <member name="M:Aerotech.A3200.Commands.RootCommands.Execute(System.String)">
            <summary>
            Executes an immediate command
            </summary>
            <param name="code">AeroBasic code to execute</param>
            <returns>Returns the value yielded by the command string. If the command string does not yield a return value, then returns null.</returns>
            <threadsafety instance="false"/>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/RootCommands/Example[@name=&quot;Execute&quot;]/*"/>
        </member>
        <member name="M:Aerotech.A3200.Commands.RootCommands.AcknowledgeAll">
            <summary>Acknowledges all axis faults and clears all task errors.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ACKNOWLEDGEALL_Command.html">ACKNOWLEDGEALL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.AcknowledgeAll();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.AcknowledgeAll()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;AcknowledgeAll();
</code></example>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Aerotech#Common#INamed{Aerotech#A3200#TaskId}#Name">
            <summary>The task on which the commands will be executed</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.TaskId">
            <summary>The task on which the commands will be executed</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Axes">
            <summary>Allows execution of commands by selecting a set of axes to operate on</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Motion">
            <summary>Contains the Motion Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Units">
            <summary>Contains the Units Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.IO">
            <summary>Contains the IO Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Status">
            <summary>Contains the Status Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Tuning">
            <summary>Contains the Tuning Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Tasks">
            <summary>Contains the Tasks Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Advanced">
            <summary>Contains the Advanced Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Gearing">
            <summary>Contains the Gearing Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.DataAcquisition">
            <summary>Contains the DataAcquisition Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Camming">
            <summary>Contains the Camming Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.PSO">
            <summary>Contains the PSO Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.RootCommands.Modbus">
            <summary>Contains the Modbus Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.TaskSelectionCommands.GetEnumerator">
            <summary>Gets the enumerator for objects in this collection</summary>
            <returns>One of the items in this collection</returns>
        </member>
        <member name="M:Aerotech.A3200.Commands.TaskSelectionCommands.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets the untyped enumerator for objects in this collection</summary>
            <returns>One of the items in this collection</returns>
        </member>
        <member name="P:Aerotech.A3200.Commands.TaskSelectionCommands.Capacity">
            <summary>The amount of available tasks</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.TaskSelectionCommands.Count">
            <summary>The amount of available tasks</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.TaskSelectionCommands.Item(System.Int32)">
            <summary>Allows command execution on the given task</summary>
            <param name="index">The index of the task to execute commands on</param>
            <returns>Object that will execute commands on <paramref name="index"/> task</returns>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Enable axis X on task 1
    myController->Commands[TaskId::T01]->Motion->Enable("X");
    // Sleep for 5 seconds on task 3
    myController->Commands[TaskId::T03]->Execute("DWELL 5");

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Enable axis X on task 1
    myController.Commands[TaskId.T01].Motion.Enable("X");
    // Sleep for 5 seconds on task 3
    myController.Commands[TaskId.T03].Execute("DWELL 5");

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Enable axis X on task 1
    myController.Commands.Item(TaskId.T01).Motion.Enable("X")
    ' Sleep for 5 seconds on task 3
    myController.Commands.Item(TaskId.T03).Execute("DWELL 5")

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Commands.TaskSelectionCommands.Item(Aerotech.A3200.TaskId)">
            <summary>Allows command execution on the given task</summary>
            <param name="name">The id of the task to execute commands on</param>
            <returns>Object that will execute commands on <paramref name="name"/> task</returns>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Enable axis X on task 1
    myController->Commands[TaskId::T01]->Motion->Enable("X");
    // Sleep for 5 seconds on task 3
    myController->Commands[TaskId::T03]->Execute("DWELL 5");

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Enable axis X on task 1
    myController.Commands[TaskId.T01].Motion.Enable("X");
    // Sleep for 5 seconds on task 3
    myController.Commands[TaskId.T03].Execute("DWELL 5");

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Enable axis X on task 1
    myController.Commands.Item(TaskId.T01).Motion.Enable("X")
    ' Sleep for 5 seconds on task 3
    myController.Commands.Item(TaskId.T03).Execute("DWELL 5")

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.Commands.AxesRootCommands">
            <summary>
            The category that allows access to commands for multiple axes
            </summary>
            <summary>Contains the Root Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesRootCommands.ThrowAxisFault(Aerotech.A3200.Status.AxisFault)">
            <summary>Forces a specific fault on axes</summary>
            <param name="axisFault">The fault or faults to force</param>
        </member>
        <member name="P:Aerotech.A3200.Commands.AxesRootCommands.Motion">
            <summary>Contains the Motion Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.AxesRootCommands.IO">
            <summary>Contains the IO Commands</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.AxesMotionCommands">
            <summary>Contains the Motion Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Enable axes 0 and 2.
        myController->Commands->Axes[AxisMask::A00, AxisMask::A02]->Motion->Enable();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        // Command the linear motion to the controller at 1000 units/sec.
        array<double>^ distances = {500, 1000};
        myController->Commands->Axes[AxisMask::A00, AxisMask::A02]->Motion->Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless the timeout of 5 seconds is reached.
        myController->Commands->Axes[AxisMask::A00, AxisMask::A02]->Motion->WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        myController.Commands.Axes[new AxisMask[] { AxisMask.A00, AxisMask.A02 }].Motion.Enable();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        // Command the linear motion to the controller at 1000 units/sec.
        double[] distances = new double[] { 500.0, 1000.0 };
        myController.Commands.Axes[new AxisMask[] { AxisMask.A00, AxisMask.A02 }].Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless the timeout of 5 seconds is reached.
        myController.Commands.Axes[new AxisMask[] { AxisMask.A00, AxisMask.A02 }].Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        myController.Commands.Axes.Item(New AxisMask() { AxisMask.A00, AxisMask.A02 }).Motion.Enable
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        ' Command the linear motion to the controller at 1000 units/sec.
        Dim distances As Double() = New Double() { 500, 1000 }
        myController.Commands.Axes.Item(New AxisMask() { AxisMask.A00, AxisMask.A02 }).Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless the timeout of 5 seconds is reached.
        myController.Commands.Axes.Item(New AxisMask() { AxisMask.A00, AxisMask.A02 }).Motion.WaitForMotionDone(WaitOption.InPosition, &H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Enable axes 0 and 2.
        myController->Commands->Axes[AxisMask::A00, AxisMask::A02]->Motion->Enable();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        // Command the linear motion to the controller at 1000 units/sec.
        array<double>^ distances = {500, 1000};
        myController->Commands->Axes[AxisMask::A00, AxisMask::A02]->Motion->Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless the timeout of 5 seconds is reached.
        myController->Commands->Axes[AxisMask::A00, AxisMask::A02]->Motion->WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        myController.Commands.Axes[new AxisMask[] { AxisMask.A00, AxisMask.A02 }].Motion.Enable();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        // Command the linear motion to the controller at 1000 units/sec.
        double[] distances = new double[] { 500.0, 1000.0 };
        myController.Commands.Axes[new AxisMask[] { AxisMask.A00, AxisMask.A02 }].Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless the timeout of 5 seconds is reached.
        myController.Commands.Axes[new AxisMask[] { AxisMask.A00, AxisMask.A02 }].Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        myController.Commands.Axes.Item(New AxisMask() { AxisMask.A00, AxisMask.A02 }).Motion.Enable
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        ' Command the linear motion to the controller at 1000 units/sec.
        Dim distances As Double() = New Double() { 500, 1000 }
        myController.Commands.Axes.Item(New AxisMask() { AxisMask.A00, AxisMask.A02 }).Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless the timeout of 5 seconds is reached.
        myController.Commands.Axes.Item(New AxisMask() { AxisMask.A00, AxisMask.A02 }).Motion.WaitForMotionDone(WaitOption.InPosition, &H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.Abort">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Enable axes 0 and 2.
        myController->Commands->Axes[AxisMask::A00, AxisMask::A02]->Motion->Enable();
        // Specify the distances in an array. Move axis 0 by 500 and axis 2 by 1000.
        array<double>^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        myController->Commands->Axes[AxisMask::A00, AxisMask::A02]->Motion->Linear(distances, 1000);
        // Let the motion go for 500ms.
        Thread::Sleep(500);
        // Abort the motion.
        myController->Commands->Axes[AxisMask::A00, AxisMask::A02]->Motion->Abort();
        Console::WriteLine("Motion has been aborted!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        myController.Commands.Axes[new AxisMask[] { AxisMask.A00, AxisMask.A02 }].Motion.Enable();
        // Specify the distances in an array. Move axis 0 by 500 and axis 2 by 1000.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Axes[new AxisMask[] { AxisMask.A00, AxisMask.A02 }].Motion.Linear(distances, 1000.0);
        // Let the motion go for 500ms.
        Thread.Sleep(500);
        // Abort the motion.
        myController.Commands.Axes[new AxisMask[] { AxisMask.A00, AxisMask.A02 }].Motion.Abort();
        Console.WriteLine("Motion has been aborted!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        myController.Commands.Axes.Item(New AxisMask() { AxisMask.A00, AxisMask.A02 }).Motion.Enable
        ' Specify the distances in an array. Move axis 0 by 500 and axis 2 by 1000.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Axes.Item(New AxisMask() { AxisMask.A00, AxisMask.A02 }).Motion.Linear(distances, 1000)
        ' Let the motion go for 500ms.
        Thread.Sleep(500)
        ' Abort the motion.
        myController.Commands.Axes.Item(New AxisMask() { AxisMask.A00, AxisMask.A02 }).Motion.Abort
        Console.WriteLine("Motion has been aborted!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.Disable">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Disable();
myController.Commands.Axes[0, 2].Motion.Disable();
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Disable();
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Disable();
myController.Commands.Axes.Select("X", "Z").Motion.Disable();
myController.Commands.Axes.Select(0, 2).Motion.Disable();
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Disable();
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Disable();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Disable()
myController.Commands.Axes(0, 2).Motion.Disable()
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Disable()
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Disable()
myController.Commands.Axes.Select("X", "Z").Motion.Disable()
myController.Commands.Axes.Select(0, 2).Motion.Disable()
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Disable()
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Disable()
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Disable();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Disable();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.Enable">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Enable();
myController.Commands.Axes[0, 2].Motion.Enable();
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Enable();
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Enable();
myController.Commands.Axes.Select("X", "Z").Motion.Enable();
myController.Commands.Axes.Select(0, 2).Motion.Enable();
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Enable();
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Enable();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Enable()
myController.Commands.Axes(0, 2).Motion.Enable()
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Enable()
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Enable()
myController.Commands.Axes.Select("X", "Z").Motion.Enable()
myController.Commands.Axes.Select(0, 2).Motion.Enable()
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Enable()
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Enable()
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Enable();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Enable();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.FaultAck">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.FaultAck();
myController.Commands.Axes[0, 2].Motion.FaultAck();
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.FaultAck();
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.FaultAck();
myController.Commands.Axes.Select("X", "Z").Motion.FaultAck();
myController.Commands.Axes.Select(0, 2).Motion.FaultAck();
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.FaultAck();
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.FaultAck();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.FaultAck()
myController.Commands.Axes(0, 2).Motion.FaultAck()
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.FaultAck()
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.FaultAck()
myController.Commands.Axes.Select("X", "Z").Motion.FaultAck()
myController.Commands.Axes.Select(0, 2).Motion.FaultAck()
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.FaultAck()
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.FaultAck()
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;FaultAck();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;FaultAck();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.Home">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Home();
myController.Commands.Axes[0, 2].Motion.Home();
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Home();
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Home();
myController.Commands.Axes.Select("X", "Z").Motion.Home();
myController.Commands.Axes.Select(0, 2).Motion.Home();
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Home();
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Home();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Home()
myController.Commands.Axes(0, 2).Motion.Home()
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Home()
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Home()
myController.Commands.Axes.Select("X", "Z").Motion.Home()
myController.Commands.Axes.Select(0, 2).Motion.Home()
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Home()
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Home()
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Home();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Home();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.HomeConditional">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.HomeConditional();
myController.Commands.Axes[0, 2].Motion.HomeConditional();
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.HomeConditional();
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.HomeConditional();
myController.Commands.Axes.Select("X", "Z").Motion.HomeConditional();
myController.Commands.Axes.Select(0, 2).Motion.HomeConditional();
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.HomeConditional();
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.HomeConditional();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.HomeConditional()
myController.Commands.Axes(0, 2).Motion.HomeConditional()
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.HomeConditional()
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.HomeConditional()
myController.Commands.Axes.Select("X", "Z").Motion.HomeConditional()
myController.Commands.Axes.Select(0, 2).Motion.HomeConditional()
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.HomeConditional()
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.HomeConditional()
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;HomeConditional();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;HomeConditional();
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;HomeConditional();
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;HomeConditional();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;HomeConditional();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;HomeConditional();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;HomeConditional();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;HomeConditional();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.Linear(System.Double[])">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes[0, 2].Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes.Select("X", "Z").Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes.Select(0, 2).Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Linear(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Linear(new double[]{10000, 15000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes(0, 2).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes.Select("X", "Z").Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes.Select(0, 2).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Linear(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Linear(New Double(){10000, 15000})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.Linear(System.Double[],System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes[0, 2].Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes.Select("X", "Z").Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes.Select(0, 2).Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Linear(new double[]{10000, 15000}, 5000);
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Linear(new double[]{10000, 15000}, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes(0, 2).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes.Select("X", "Z").Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes.Select(0, 2).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Linear(New Double(){10000, 15000}, 5000)
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Linear(New Double(){10000, 15000}, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Linear(gcnew array&lt;double&gt;{10000, 15000}, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.Rapid(System.Double[])">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Rapid(new double[]{10000, 15000});
myController.Commands.Axes[0, 2].Motion.Rapid(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Rapid(new double[]{10000, 15000});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Rapid(new double[]{10000, 15000});
myController.Commands.Axes.Select("X", "Z").Motion.Rapid(new double[]{10000, 15000});
myController.Commands.Axes.Select(0, 2).Motion.Rapid(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Rapid(new double[]{10000, 15000});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Rapid(new double[]{10000, 15000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Rapid(New Double(){10000, 15000})
myController.Commands.Axes(0, 2).Motion.Rapid(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Rapid(New Double(){10000, 15000})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Rapid(New Double(){10000, 15000})
myController.Commands.Axes.Select("X", "Z").Motion.Rapid(New Double(){10000, 15000})
myController.Commands.Axes.Select(0, 2).Motion.Rapid(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Rapid(New Double(){10000, 15000})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Rapid(New Double(){10000, 15000})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionCommands.Rapid(System.Double[],System.Double[])">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="Speed">The speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Rapid(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes[0, 2].Motion.Rapid(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Rapid(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Rapid(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select("X", "Z").Motion.Rapid(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select(0, 2).Motion.Rapid(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Rapid(new double[]{10000, 15000}, new double[]{1000, 1500});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Rapid(new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Rapid(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes(0, 2).Motion.Rapid(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Rapid(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Rapid(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select("X", "Z").Motion.Rapid(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select(0, 2).Motion.Rapid(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Rapid(New Double(){10000, 15000}, New Double(){1000, 1500})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Rapid(New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Rapid(gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="P:Aerotech.A3200.Commands.AxesMotionCommands.Setup">
            <summary>Contains the Setup Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.AxesMotionCommands.Advanced">
            <summary>Contains the Advanced Commands</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.AxesSelectionCommands">
            <summary>Allows the selection of axes to execute commands on</summary>
            <remarks>
            	See <see cref="M:Aerotech.A3200.Commands.AxesSelectionCommands.Select(System.String[])"/> for more information
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesSelectionCommands.Select(Aerotech.A3200.AxisMask[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisMasks">The masks of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesSelectionCommands.Select(System.String[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisNames">The names of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesSelectionCommands.Select(System.Int32[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisNumbers">The axis numbers of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="P:Aerotech.A3200.Commands.AxesSelectionCommands.Item(Aerotech.A3200.AxisMask[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisMasks">The masks of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="P:Aerotech.A3200.Commands.AxesSelectionCommands.Item(System.String[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisNames">The names of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="P:Aerotech.A3200.Commands.AxesSelectionCommands.Item(System.Int32[])">
            <summary>
					Allows the selection of axes on which to execute the command
				</summary>
            <param name="axisNumbers">The axis numbers of the axis on which to execute the command</param>
            <returns>Object that executes commands on the selected axes</returns>
        </member>
        <member name="T:Aerotech.A3200.Commands.MotionCommands">
            <summary>Contains the Motion Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,System.Int32,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisIndex">The axis number to wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController->Commands->Axes->Select(AxisMask::A02 | AxisMask::A00);
        selectedAxesCommands->Motion->Enable();
        // Home axes 0 and 2.
        selectedAxesCommands->Motion->Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array<double>^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands->Motion->Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands->Motion->WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(new AxisMask[] { AxisMask.A02 | AxisMask.A00 });
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 2.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(New AxisMask() { (AxisMask.A02 Or AxisMask.A00) })
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 2.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,System.Int32[],System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisIndexes">The axis numbers ot wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,System.String,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisName">The name of the axis to wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController->Commands->Axes->Select(AxisMask::A02 | AxisMask::A00);
        selectedAxesCommands->Motion->Enable();
        // Home axes 0 and 2.
        selectedAxesCommands->Motion->Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array<double>^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands->Motion->Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands->Motion->WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(new AxisMask[] { AxisMask.A02 | AxisMask.A00 });
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 2.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(New AxisMask() { (AxisMask.A02 Or AxisMask.A00) })
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 2.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,System.String[],System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisNames">The names of the axes to wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,Aerotech.A3200.AxisMask,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisMask">The axes to wait for motion to be done on</param>
            <param name="timeout">The maximum time to wait for before execution is returned to the user program</param>
            <returns>Whether the move has completed by the time the method returns</returns>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController->Commands->Axes->Select(AxisMask::A02 | AxisMask::A00);
        selectedAxesCommands->Motion->Enable();
        // Home axes 0 and 2.
        selectedAxesCommands->Motion->Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array<double>^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands->Motion->Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands->Motion->WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(new AxisMask[] { AxisMask.A02 | AxisMask.A00 });
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 2.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(New AxisMask() { (AxisMask.A02 Or AxisMask.A00) })
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 2.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,System.Int32)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisIndex">The axis number to wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController->Commands->Axes->Select(AxisMask::A02 | AxisMask::A00);
        selectedAxesCommands->Motion->Enable();
        // Home axes 0 and 2.
        selectedAxesCommands->Motion->Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array<double>^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands->Motion->Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands->Motion->WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(new AxisMask[] { AxisMask.A02 | AxisMask.A00 });
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 2.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(New AxisMask() { (AxisMask.A02 Or AxisMask.A00) })
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 2.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,System.Int32[])">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisIndexes">The axis numbers ot wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,System.String)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisName">The name of the axis to wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController->Commands->Axes->Select(AxisMask::A02 | AxisMask::A00);
        selectedAxesCommands->Motion->Enable();
        // Home axes 0 and 2.
        selectedAxesCommands->Motion->Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array<double>^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands->Motion->Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands->Motion->WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(new AxisMask[] { AxisMask.A02 | AxisMask.A00 });
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 2.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(New AxisMask() { (AxisMask.A02 Or AxisMask.A00) })
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 2.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,System.String[])">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisNames">The names of the axes to wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.WaitForMotionDone(Aerotech.A3200.Commands.WaitOption,Aerotech.A3200.AxisMask)">
            <summary>
					Waits for the move to be done
				</summary>
            <param name="waitOption">The wait mode that detemines how to wait for motion to be done</param>
            <param name="axisMask">The axes to wait for motion to be done on</param>
            <remarks>
					This is similar to the
					<a href="mk:@MSITStore:Ensemble.chm::/Commands/WAIT MOVEDONE_Command.html">WAIT MOVEDONE</a>
					Command
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Enable axes 0 and 2.
        AxesRootCommands^ selectedAxesCommands = myController->Commands->Axes->Select(AxisMask::A02 | AxisMask::A00);
        selectedAxesCommands->Motion->Enable();
        // Home axes 0 and 2.
        selectedAxesCommands->Motion->Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array<double>^ distances = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands->Motion->Linear(distances, 1000);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands->Motion->WaitForMotionDone(WaitOption::InPosition, 5000);
        Console::WriteLine("Motion is complete!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        AxesRootCommands selectedAxesCommands = myController.Commands.Axes.Select(new AxisMask[] { AxisMask.A02 | AxisMask.A00 });
        selectedAxesCommands.Motion.Enable();
        // Home axes 0 and 2.
        selectedAxesCommands.Motion.Home();
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000.0);
        // Wait for the motion to complete and be in position. This will pause execution of our
        // program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, 0x1388);
        Console.WriteLine("Motion is complete!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        Dim selectedAxesCommands As AxesRootCommands = myController.Commands.Axes.Select(New AxisMask() { (AxisMask.A02 Or AxisMask.A00) })
        selectedAxesCommands.Motion.Enable
        ' Home axes 0 and 2.
        selectedAxesCommands.Motion.Home
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        selectedAxesCommands.Motion.Linear(distances, 1000)
        ' Wait for the motion to complete and be in position. This will pause execution of our
        ' program until the motion is done, unless our timeout of 5 seconds is reached.
        selectedAxesCommands.Motion.WaitForMotionDone(WaitOption.InPosition, &H1388)
        Console.WriteLine("Motion is complete!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Abort(System.Int32)">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisIndex">The axis index on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ controller = Controller::Connect();
        // Enable axes 0 and 2.
        controller->Commands->Motion->Enable((AxisMask::A02 | AxisMask::A00));
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array<double>^ distance = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        controller->Commands->Motion->Linear((AxisMask::A02 | AxisMask::A00), distance, 1000);
        // Let the motion go for 500ms.
        Thread::Sleep(500);
        // Abort the motion for whatever reason.
        controller->Commands->Motion->Abort((AxisMask::A02 | AxisMask::A00));
        Console::WriteLine("Motion has been aborted!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        myController.Commands.Motion.Enable(AxisMask.A02 | AxisMask.A00);
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear(AxisMask.A02 | AxisMask.A00, distances, 1000.0);
        // Let the motion go for 500ms.
        Thread.Sleep(500);
        // Abort the motion for whatever reason.
        myController.Commands.Motion.Abort(AxisMask.A02 | AxisMask.A00);
        Console.WriteLine("Motion has been aborted!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        myController.Commands.Motion.Enable((AxisMask.A02 Or AxisMask.A00))
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear((AxisMask.A02 Or AxisMask.A00), distances, 1000)
        ' Let the motion go for 500ms.
        Thread.Sleep(500)
        ' Abort the motion for whatever reason.
        myController.Commands.Motion.Abort((AxisMask.A02 Or AxisMask.A00))
        Console.WriteLine("Motion has been aborted!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Abort(System.Int32[])">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisIndexes">The axis indexes on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Abort(System.String)">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisName">The name of axis on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ controller = Controller::Connect();
        // Enable axes 0 and 2.
        controller->Commands->Motion->Enable((AxisMask::A02 | AxisMask::A00));
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array<double>^ distance = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        controller->Commands->Motion->Linear((AxisMask::A02 | AxisMask::A00), distance, 1000);
        // Let the motion go for 500ms.
        Thread::Sleep(500);
        // Abort the motion for whatever reason.
        controller->Commands->Motion->Abort((AxisMask::A02 | AxisMask::A00));
        Console::WriteLine("Motion has been aborted!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        myController.Commands.Motion.Enable(AxisMask.A02 | AxisMask.A00);
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear(AxisMask.A02 | AxisMask.A00, distances, 1000.0);
        // Let the motion go for 500ms.
        Thread.Sleep(500);
        // Abort the motion for whatever reason.
        myController.Commands.Motion.Abort(AxisMask.A02 | AxisMask.A00);
        Console.WriteLine("Motion has been aborted!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        myController.Commands.Motion.Enable((AxisMask.A02 Or AxisMask.A00))
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear((AxisMask.A02 Or AxisMask.A00), distances, 1000)
        ' Let the motion go for 500ms.
        Thread.Sleep(500)
        ' Abort the motion for whatever reason.
        myController.Commands.Motion.Abort((AxisMask.A02 Or AxisMask.A00))
        Console.WriteLine("Motion has been aborted!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Abort(System.String[])">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisNames">The names of axes on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Abort(Aerotech.A3200.AxisMask)">
            <summary>
					Aborts motion on the selected axes
				</summary>
            <param name="axisMask">The axes on which to abort motion</param>
            <remarks>
					<para>
						This is similar to the
						<a href="mk:@MSITStore:Ensemble.chm::/Commands/ABORT_Command.html">ABORT</a>
						Command.
					</para>
					<para>
						This is an asynchronous call.  When this method returns the abort will be started, but it will not be finished.
					</para>
				</remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ controller = Controller::Connect();
        // Enable axes 0 and 2.
        controller->Commands->Motion->Enable((AxisMask::A02 | AxisMask::A00));
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        array<double>^ distance = {500, 1000};
        // Command the linear motion to the controller at 1000 units/sec.
        controller->Commands->Motion->Linear((AxisMask::A02 | AxisMask::A00), distance, 1000);
        // Let the motion go for 500ms.
        Thread::Sleep(500);
        // Abort the motion for whatever reason.
        controller->Commands->Motion->Abort((AxisMask::A02 | AxisMask::A00));
        Console::WriteLine("Motion has been aborted!");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Enable axes 0 and 2.
        myController.Commands.Motion.Enable(AxisMask.A02 | AxisMask.A00);
        // Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        double[] distances = new double[] { 500.0, 1000.0 };
        // Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear(AxisMask.A02 | AxisMask.A00, distances, 1000.0);
        // Let the motion go for 500ms.
        Thread.Sleep(500);
        // Abort the motion for whatever reason.
        myController.Commands.Motion.Abort(AxisMask.A02 | AxisMask.A00);
        Console.WriteLine("Motion has been aborted!");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Enable axes 0 and 2.
        myController.Commands.Motion.Enable((AxisMask.A02 Or AxisMask.A00))
        ' Specify our distances in an array. Move axis 0 by 500 and axis 2 by 100.
        Dim distances As Double() = New Double() { 500, 1000 }
        ' Command the linear motion to the controller at 1000 units/sec.
        myController.Commands.Motion.Linear((AxisMask.A02 Or AxisMask.A00), distances, 1000)
        ' Let the motion go for 500ms.
        Thread.Sleep(500)
        ' Abort the motion for whatever reason.
        myController.Commands.Motion.Abort((AxisMask.A02 Or AxisMask.A00))
        Console.WriteLine("Motion has been aborted!")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CWRadius(System.Int32,System.Double,System.Int32,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CWRadius(0, 10000, 2, 20000, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CWRadius(0, 10000, 2, 20000, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CWRadius(0, 10000, 2, 20000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CWRadius(System.String,System.Double,System.String,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CWRadius("X", 10000, "Z", 20000, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CWRadius("X", 10000, "Z", 20000, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CWRadius("X", 10000, "Z", 20000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CWCenter(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CWCenter(0, 10000, 2, 20000, 15000, 20000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CWCenter(0, 10000, 2, 20000, 15000, 20000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CWCenter(0, 10000, 2, 20000, 15000, 20000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CWCenter(System.String,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CWCenter("X", 10000, "Z", 20000, 15000, 20000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CWCenter("X", 10000, "Z", 20000, 15000, 20000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CWCenter("X", 10000, "Z", 20000, 15000, 20000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CWRadius(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CWRadius(0, 10000, 2, 20000, 5000, 1500);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CWRadius(0, 10000, 2, 20000, 5000, 1500)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CWRadius(0, 10000, 2, 20000, 5000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CWRadius(System.String,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CWRadius("X", 10000, "Z", 20000, 5000, 1500);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CWRadius("X", 10000, "Z", 20000, 5000, 1500)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CWRadius("X", 10000, "Z", 20000, 5000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CWCenter(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CWCenter(0, 10000, 2, 20000, 15000, 20000, 1500);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CWCenter(0, 10000, 2, 20000, 15000, 20000, 1500)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CWCenter(0, 10000, 2, 20000, 15000, 20000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CWCenter(System.String,System.Double,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Executes a clockwise circular move on the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do clockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do clockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CW_Command.html">CW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CCWRadius(System.Int32,System.Double,System.Int32,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CCWRadius(0, 10000, 2, 20000, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CCWRadius(0, 10000, 2, 20000, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CCWRadius(0, 10000, 2, 20000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CCWRadius(System.String,System.Double,System.String,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CCWRadius("X", 10000, "Z", 20000, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CCWRadius("X", 10000, "Z", 20000, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CCWRadius("X", 10000, "Z", 20000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CCWCenter(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CCWCenter(0, 10000, 2, 20000, 15000, 20000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CCWCenter(0, 10000, 2, 20000, 15000, 20000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CCWCenter(0, 10000, 2, 20000, 15000, 20000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CCWCenter(System.String,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CCWCenter("X", 10000, "Z", 20000, 15000, 20000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CCWCenter("X", 10000, "Z", 20000, 15000, 20000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CCWCenter("X", 10000, "Z", 20000, 15000, 20000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CCWRadius(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CCWRadius(0, 10000, 2, 20000, 5000, 1500);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CCWRadius(0, 10000, 2, 20000, 5000, 1500)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CCWRadius(0, 10000, 2, 20000, 5000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CCWRadius(System.String,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Radius">The radius of the circle to use.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CCWRadius("X", 10000, "Z", 20000, 5000, 1500);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CCWRadius("X", 10000, "Z", 20000, 5000, 1500)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CCWRadius("X", 10000, "Z", 20000, 5000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CCWCenter(System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CCWCenter(0, 10000, 2, 20000, 15000, 20000, 1500);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CCWCenter(0, 10000, 2, 20000, 15000, 20000, 1500)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CCWCenter(0, 10000, 2, 20000, 15000, 20000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.CCWCenter(System.String,System.Double,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Executes a counterclockwise circular move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis1">The first axis on which to do counterclockwise circular motion.</param><param name="Axis1Endpoint">The end point of the movement on the first specified axis.</param><param name="Axis2">The second axis on which to do counterclockwise circular motion.</param><param name="Axis2Endpoint">The end point of the movement on the second specified axis.</param><param name="Axis1Center">The relative offset of the center point from the starting position of the first axis.</param><param name="Axis2Center">The relative offset of the center point from the starting position of the second axis.</param><param name="CoordinatedSpeed">The speed of the coordinated circular motion.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CCW_Command.html">CCW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.CCWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.CCWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;CCWCenter("X", 10000, "Z", 20000, 15000, 20000, 1500);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Disable(System.Int32[])">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Disable(new int[]{0, 2});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Disable(New Integer(){0, 2})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Disable(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Disable(System.Int32)">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Disable(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Disable(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Disable(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Disable(System.String[])">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Disable(new string[]{"X", "Z"});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Disable(New String(){"X", "Z"})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Disable(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Disable(System.String)">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Disable("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Disable("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Disable(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Disable(Aerotech.A3200.AxisMask)">
            <summary>Disables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DISABLE_Command.html">DISABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Disable(AxisMask.A00|AxisMask.A02);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Disable(AxisMask.A00 Or AxisMask.A02)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Disable(AxisMask::A00|AxisMask::A02);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Enable(System.Int32[])">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Enable(new int[]{0, 2});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Enable(New Integer(){0, 2})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Enable(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Enable(System.Int32)">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Enable(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Enable(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Enable(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Enable(System.String[])">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Enable(new string[]{"X", "Z"});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Enable(New String(){"X", "Z"})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Enable(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Enable(System.String)">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Enable("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Enable("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Enable(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Enable(Aerotech.A3200.AxisMask)">
            <summary>Enables the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ENABLE_Command.html">ENABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Enable(AxisMask.A00|AxisMask.A02);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Enable(AxisMask.A00 Or AxisMask.A02)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Enable(AxisMask::A00|AxisMask::A02);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.FaultAck(System.Int32[])">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.FaultAck(new int[]{0, 2});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.FaultAck(New Integer(){0, 2})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.FaultAck(System.Int32)">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.FaultAck(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.FaultAck(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.FaultAck(System.String[])">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.FaultAck(new string[]{"X", "Z"});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.FaultAck(New String(){"X", "Z"})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.FaultAck(System.String)">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.FaultAck("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.FaultAck("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.FaultAck(Aerotech.A3200.AxisMask)">
            <summary>Acknowledges and clears the fault on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FAULTACK_Command.html">FAULTACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.FaultAck(AxisMask.A00|AxisMask.A02);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.FaultAck(AxisMask.A00 Or AxisMask.A02)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;FaultAck(AxisMask::A00|AxisMask::A02);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.SlaveOffset(System.Int32,System.Double)">
            <summary>Offsets the position of the master axis that is specified in the cam table.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the camming slave axis.</param><param name="OffsetUnits">The distance of offset in user units. To shift the cam table in the negative direction, specify a positive value. To shift the cam table in the positive direction, specify a negative value.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SLAVEOFFSET_Command.html">SLAVEOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.SlaveOffset(1, 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.SlaveOffset(1, 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;SlaveOffset(1, 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.SlaveOffset(System.String,System.Double)">
            <summary>Offsets the position of the master axis that is specified in the cam table.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the camming slave axis.</param><param name="OffsetUnits">The distance of offset in user units. To shift the cam table in the negative direction, specify a positive value. To shift the cam table in the positive direction, specify a negative value.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SLAVEOFFSET_Command.html">SLAVEOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.SlaveOffset("Y", 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.SlaveOffset("Y", 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;SlaveOffset("Y", 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.FreeRun(System.Int32,System.Double)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Velocity">The velocity at which to run the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.FreeRun(0, 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.FreeRun(0, 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;FreeRun(0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.FreeRun(System.String,System.Double)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Velocity">The velocity at which to run the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.FreeRun("X", 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.FreeRun("X", 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;FreeRun(L"X", 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.FreeRunStop(System.Int32)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.FreeRunStop(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.FreeRunStop(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;FreeRunStop(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.FreeRunStop(System.String)">
            <summary>Freeruns the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FREERUN_Command.html">FREERUN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.FreeRunStop("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.FreeRunStop("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;FreeRunStop(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Home(System.Int32[])">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Home(new int[]{0, 2});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Home(New Integer(){0, 2})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Home(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Home(System.Int32)">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Home(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Home(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Home(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Home(System.String[])">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Home(new string[]{"X", "Z"});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Home(New String(){"X", "Z"})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Home(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Home(System.String)">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Home("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Home("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Home(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Home(Aerotech.A3200.AxisMask)">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Home(AxisMask.A00|AxisMask.A02);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Home(AxisMask.A00 Or AxisMask.A02)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Home(AxisMask::A00|AxisMask::A02);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.HomeConditional(System.Int32[])">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.HomeConditional(new int[]{0, 2});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.HomeConditional(New Integer(){0, 2})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;HomeConditional(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.HomeConditional(System.Int32)">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.HomeConditional(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.HomeConditional(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;HomeConditional(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.HomeConditional(System.String[])">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.HomeConditional(new string[]{"X", "Z"});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.HomeConditional(New String(){"X", "Z"})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;HomeConditional(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.HomeConditional(System.String)">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.HomeConditional("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.HomeConditional("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;HomeConditional(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.HomeConditional(Aerotech.A3200.AxisMask)">
            <summary>Homes the axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOME_Command.html">HOME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.HomeConditional(AxisMask.A00|AxisMask.A02);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.HomeConditional(AxisMask.A00 Or AxisMask.A02)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;HomeConditional(AxisMask::A00|AxisMask::A02);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(System.Int32[],System.Double[])">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(new int[]{0, 2}, new double[]{10000, 15000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(New Integer(){0, 2}, New Double(){10000, 15000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(System.Int32,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(0, 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(0, 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(System.String[],System.Double[])">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(new string[]{"X", "Z"}, new double[]{10000, 15000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(New String(){"X", "Z"}, New Double(){10000, 15000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(System.String,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear("X", 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear("X", 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(L"X", 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(Aerotech.A3200.AxisMask,System.Double[])">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(AxisMask.A00|AxisMask.A02, new double[]{10000, 15000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(AxisMask.A00 Or AxisMask.A02, New Double(){10000, 15000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(Aerotech.A3200.AxisMask,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(AxisMask.A00, 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(AxisMask.A00, 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A00, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(System.Int32[],System.Double[],System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(new int[]{0, 2}, new double[]{10000, 15000}, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(New Integer(){0, 2}, New Double(){10000, 15000}, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000}, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(System.Int32,System.Double,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(0, 10000, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(0, 10000, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(0, 10000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(System.String[],System.Double[],System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(new string[]{"X", "Z"}, new double[]{10000, 15000}, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(New String(){"X", "Z"}, New Double(){10000, 15000}, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000}, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(System.String,System.Double,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear("X", 10000, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear("X", 10000, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(L"X", 10000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(Aerotech.A3200.AxisMask,System.Double[],System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(AxisMask.A00|AxisMask.A02, new double[]{10000, 15000}, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(AxisMask.A00 Or AxisMask.A02, New Double(){10000, 15000}, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{10000, 15000}, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Linear(Aerotech.A3200.AxisMask,System.Double,System.Double)">
            <summary>Executes a linear move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="CoordinatedSpeed">The vectorial speed at which to move the axes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LINEAR_Command.html">LINEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Linear(AxisMask.A00, 10000, 5000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Linear(AxisMask.A00, 10000, 5000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Linear(AxisMask::A00, 10000, 5000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.MoveInc(System.Int32,System.Double,System.Double)">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The axis to move.</param><param name="Distance">Distance and direction to move relative to the present position. A distance of zero results in no motion.</param><param name="Speed">The speed, in user units/time base, at which to move an axis. The arithmetical sign is ignored and a speed of zero causes a task error.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.MoveInc(0, 10000, 1000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.MoveInc(0, 10000, 1000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;MoveInc(0, 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.MoveInc(System.String,System.Double,System.Double)">
            <summary>Executes an incremental move on axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The axis to move.</param><param name="Distance">Distance and direction to move relative to the present position. A distance of zero results in no motion.</param><param name="Speed">The speed, in user units/time base, at which to move an axis. The arithmetical sign is ignored and a speed of zero causes a task error.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVEINC_Command.html">MOVEINC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.MoveInc("X", 10000, 1000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.MoveInc("X", 10000, 1000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;MoveInc("X", 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.MoveAbs(System.Int32,System.Double,System.Double)">
            <summary>Executes an absolute move on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The axis to move.</param><param name="Position">The absolute position to move to.</param><param name="Speed">The speed, in user units/time base, at which to move an axis. The arithmetical sign is ignored and a speed of zero causes a task error.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.MoveAbs(0, 10000, 1000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.MoveAbs(0, 10000, 1000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs(0, 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.MoveAbs(System.String,System.Double,System.Double)">
            <summary>Executes an absolute move on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The axis to move.</param><param name="Position">The absolute position to move to.</param><param name="Speed">The speed, in user units/time base, at which to move an axis. The arithmetical sign is ignored and a speed of zero causes a task error.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVEABS_Command.html">MOVEABS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.MoveAbs("X", 10000, 1000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.MoveAbs("X", 10000, 1000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;MoveAbs("X", 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(System.Int32[],System.Double[])">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(new int[]{0, 2}, new double[]{10000, 15000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(New Integer(){0, 2}, New Double(){10000, 15000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(System.Int32,System.Double)">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(0, 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(0, 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(0, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(System.String[],System.Double[])">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(new string[]{"X", "Z"}, new double[]{10000, 15000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(New String(){"X", "Z"}, New Double(){10000, 15000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(System.String,System.Double)">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid("X", 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid("X", 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(L"X", 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(Aerotech.A3200.AxisMask,System.Double[])">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(AxisMask.A00|AxisMask.A02, new double[]{10000, 15000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(AxisMask.A00 Or AxisMask.A02, New Double(){10000, 15000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{10000, 15000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(Aerotech.A3200.AxisMask,System.Double)">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(AxisMask.A00, 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(AxisMask.A00, 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(AxisMask::A00, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(System.Int32[],System.Double[],System.Double[])">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="Speed">The speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(new int[]{0, 2}, new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(New Integer(){0, 2}, New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(System.Int32,System.Double,System.Double)">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="Speed">The speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(0, 10000, 1000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(0, 10000, 1000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(0, 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(System.String[],System.Double[],System.Double[])">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="Speed">The speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(new string[]{"X", "Z"}, new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(New String(){"X", "Z"}, New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(System.String,System.Double,System.Double)">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="Speed">The speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid("X", 10000, 1000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid("X", 10000, 1000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(L"X", 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(Aerotech.A3200.AxisMask,System.Double[],System.Double[])">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="Speed">The speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(AxisMask.A00|AxisMask.A02, new double[]{10000, 15000}, new double[]{1000, 1500});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(AxisMask.A00 Or AxisMask.A02, New Double(){10000, 15000}, New Double(){1000, 1500})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{10000, 15000}, gcnew array&lt;double&gt;{1000, 1500});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.Rapid(Aerotech.A3200.AxisMask,System.Double,System.Double)">
            <summary>Executes single or multi-axis point-to-point motion.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Distance">The distance to move the axis.</param><param name="Speed">The speed at which to move an axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAPID_Command.html">RAPID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Rapid(AxisMask.A00, 10000, 1000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Rapid(AxisMask.A00, 10000, 1000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Rapid(AxisMask::A00, 10000, 1000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.AutoFocus(System.Int32,Aerotech.A3200.Commands.OnOff)">
            <summary>Sets the autofocus to On or Off.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The axis of the drive.</param><param name="OnOff">Sets the autofocus to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/AUTOFOCUS_Command.html">AUTOFOCUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.AutoFocus(2, OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.AutoFocus(2, OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;AutoFocus(2, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.AutoFocus(System.String,Aerotech.A3200.Commands.OnOff)">
            <summary>Sets the autofocus to On or Off.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The axis of the drive.</param><param name="OnOff">Sets the autofocus to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/AUTOFOCUS_Command.html">AUTOFOCUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.AutoFocus("Z", OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.AutoFocus("Z", OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;AutoFocus("Z", OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.SafeZone(System.Int32,Aerotech.A3200.Commands.OnOff)">
            <summary>Turns on or turns off a safe zone.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Zone">The zero-based index of the safe zone.</param><param name="OnOff">Turns the safe zone ON or OFF.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SAFEZONE ON_OFF_Command.html">SAFEZONE ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.SafeZone(0, OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.SafeZone(0, OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;SafeZone(0, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.SafeZoneType(System.Int32,Aerotech.A3200.Commands.SafeZoneType)">
            <summary>Sets the safe zone type.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Zone">The zero-based index of the safe zone.</param><param name="Type">The safe zone type.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SAFEZONE TYPE_Command.html">SAFEZONE TYPE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.SafeZoneType(0, SafeZoneType.NoEnter);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.SafeZoneType(0, SafeZoneType.NoEnter)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;SafeZoneType(0, SafeZoneType::NoEnter);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.SafeZoneSet(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Sets the safe zone boundaries.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Zone">The zero-based index of the safe zone.</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Low">The safe zone low boundary, specified in user units.</param><param name="High">The safe zone high boundary, specified in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SAFEZONE SET_Command.html">SAFEZONE SET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.SafeZoneSet(0, 0, 0, 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.SafeZoneSet(0, 0, 0, 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;SafeZoneSet(0, 0, 0, 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.SafeZoneSet(System.Int32,System.String,System.Double,System.Double)">
            <summary>Sets the safe zone boundaries.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Zone">The zero-based index of the safe zone.</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Low">The safe zone low boundary, specified in user units.</param><param name="High">The safe zone high boundary, specified in user units.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SAFEZONE SET_Command.html">SAFEZONE SET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.SafeZoneSet(0, "X", 0, 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.SafeZoneSet(0, "X", 0, 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;SafeZoneSet(0, L"X", 0, 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.SafeZoneClear(System.Int32)">
            <summary>Clears the safe zone boundaries.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Zone">The zero-based index of the safe zone.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SAFEZONE CLEAR_Command.html">SAFEZONE CLEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.SafeZoneClear(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.SafeZoneClear(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;SafeZoneClear(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.SafeZoneClear(System.Int32,System.Int32)">
            <summary>Clears the safe zone boundaries.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Zone">The zero-based index of the safe zone.</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SAFEZONE CLEAR_Command.html">SAFEZONE CLEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.SafeZoneClear(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.SafeZoneClear(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;SafeZoneClear(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionCommands.SafeZoneClear(System.Int32,System.String)">
            <summary>Clears the safe zone boundaries.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Zone">The zero-based index of the safe zone.</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SAFEZONE CLEAR_Command.html">SAFEZONE CLEAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.SafeZoneClear(0, "X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.SafeZoneClear(0, "X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;SafeZoneClear(0, L"X");
</code></example>
        </member>
        <member name="P:Aerotech.A3200.Commands.MotionCommands.Setup">
            <summary>Contains the Setup Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.MotionCommands.Advanced">
            <summary>Contains the Advanced Commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Commands.MotionCommands.Fiber">
            <summary>Contains the Fiber Commands</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.AxesMotionSetupCommands">
            <summary>Contains the Setup Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.RampType(Aerotech.A3200.Commands.RampType)">
            <summary>Specifies the ramp type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Type">The ramp type to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TYPE_Command.html">RAMP TYPE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampType(RampType.Linear);
myController.Commands.Axes[0, 2].Motion.Setup.RampType(RampType.Linear);
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.RampType(RampType.Linear);
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.RampType(RampType.Linear);
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampType(RampType.Linear);
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampType(RampType.Linear);
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.RampType(RampType.Linear);
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampType(RampType.Linear);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampType(RampType.Linear)
myController.Commands.Axes(0, 2).Motion.Setup.RampType(RampType.Linear)
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampType(RampType.Linear)
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.RampType(RampType.Linear)
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampType(RampType.Linear)
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampType(RampType.Linear)
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampType(RampType.Linear)
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampType(RampType.Linear)
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampType(RampType::Linear);
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampType(RampType::Linear);
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampType(RampType::Linear);
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampType(RampType::Linear);
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampType(RampType::Linear);
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampType(RampType::Linear);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampType(RampType::Linear);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampType(RampType::Linear);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.RampMode(Aerotech.A3200.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">
										The ramp mode to use.
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampMode(RampMode.Rate);
myController.Commands.Axes[0, 2].Motion.Setup.RampMode(RampMode.Rate);
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.RampMode(RampMode.Rate);
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.RampMode(RampMode.Rate);
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampMode(RampMode.Rate);
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampMode(RampMode.Rate);
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.RampMode(RampMode.Rate);
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampMode(RampMode.Rate);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampMode(RampMode.Rate)
myController.Commands.Axes(0, 2).Motion.Setup.RampMode(RampMode.Rate)
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampMode(RampMode.Rate)
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.RampMode(RampMode.Rate)
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampMode(RampMode.Rate)
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampMode(RampMode.Rate)
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampMode(RampMode.Rate)
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampMode(RampMode.Rate)
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Rate);
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Rate);
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Rate);
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Rate);
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Rate);
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Rate);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Rate);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Rate);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.RampRate(System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes[0, 2].Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.RampRate(new double[]{50000, 50000});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampRate(new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes(0, 2).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampRate(New Double(){50000, 50000})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampRate(New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.RampRateAccel(System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampRateAccel(new double[]{50000, 50000});
myController.Commands.Axes[0, 2].Motion.Setup.RampRateAccel(new double[]{50000, 50000});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.RampRateAccel(new double[]{50000, 50000});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.RampRateAccel(new double[]{50000, 50000});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampRateAccel(new double[]{50000, 50000});
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampRateAccel(new double[]{50000, 50000});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.RampRateAccel(new double[]{50000, 50000});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampRateAccel(new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampRateAccel(New Double(){50000, 50000})
myController.Commands.Axes(0, 2).Motion.Setup.RampRateAccel(New Double(){50000, 50000})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampRateAccel(New Double(){50000, 50000})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.RampRateAccel(New Double(){50000, 50000})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampRateAccel(New Double(){50000, 50000})
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampRateAccel(New Double(){50000, 50000})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampRateAccel(New Double(){50000, 50000})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampRateAccel(New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.RampRateDecel(System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampRateDecel(new double[]{50000, 50000});
myController.Commands.Axes[0, 2].Motion.Setup.RampRateDecel(new double[]{50000, 50000});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.RampRateDecel(new double[]{50000, 50000});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.RampRateDecel(new double[]{50000, 50000});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampRateDecel(new double[]{50000, 50000});
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampRateDecel(new double[]{50000, 50000});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.RampRateDecel(new double[]{50000, 50000});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampRateDecel(new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampRateDecel(New Double(){50000, 50000})
myController.Commands.Axes(0, 2).Motion.Setup.RampRateDecel(New Double(){50000, 50000})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampRateDecel(New Double(){50000, 50000})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.RampRateDecel(New Double(){50000, 50000})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampRateDecel(New Double(){50000, 50000})
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampRateDecel(New Double(){50000, 50000})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampRateDecel(New Double(){50000, 50000})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampRateDecel(New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;double&gt;{50000, 50000});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.RampTime(System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes[0, 2].Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.RampTime(new double[]{1, 1});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampTime(new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes(0, 2).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampTime(New Double(){1, 1})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampTime(New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.RampTimeAccel(System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampTimeAccel(new double[]{1, 1});
myController.Commands.Axes[0, 2].Motion.Setup.RampTimeAccel(new double[]{1, 1});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.RampTimeAccel(new double[]{1, 1});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.RampTimeAccel(new double[]{1, 1});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampTimeAccel(new double[]{1, 1});
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampTimeAccel(new double[]{1, 1});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.RampTimeAccel(new double[]{1, 1});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampTimeAccel(new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampTimeAccel(New Double(){1, 1})
myController.Commands.Axes(0, 2).Motion.Setup.RampTimeAccel(New Double(){1, 1})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampTimeAccel(New Double(){1, 1})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.RampTimeAccel(New Double(){1, 1})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampTimeAccel(New Double(){1, 1})
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampTimeAccel(New Double(){1, 1})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampTimeAccel(New Double(){1, 1})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampTimeAccel(New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.RampTimeDecel(System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.RampTimeDecel(new double[]{1, 1});
myController.Commands.Axes[0, 2].Motion.Setup.RampTimeDecel(new double[]{1, 1});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.RampTimeDecel(new double[]{1, 1});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.RampTimeDecel(new double[]{1, 1});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampTimeDecel(new double[]{1, 1});
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampTimeDecel(new double[]{1, 1});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.RampTimeDecel(new double[]{1, 1});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampTimeDecel(new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.RampTimeDecel(New Double(){1, 1})
myController.Commands.Axes(0, 2).Motion.Setup.RampTimeDecel(New Double(){1, 1})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampTimeDecel(New Double(){1, 1})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.RampTimeDecel(New Double(){1, 1})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.RampTimeDecel(New Double(){1, 1})
myController.Commands.Axes.Select(0, 2).Motion.Setup.RampTimeDecel(New Double(){1, 1})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.RampTimeDecel(New Double(){1, 1})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.RampTimeDecel(New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;double&gt;{1, 1});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.PosOffsetSet(System.Double[])">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The value at which to set the parameter.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.PosOffsetSet(new double[]{0, 0});
myController.Commands.Axes[0, 2].Motion.Setup.PosOffsetSet(new double[]{0, 0});
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.PosOffsetSet(new double[]{0, 0});
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.PosOffsetSet(new double[]{0, 0});
myController.Commands.Axes.Select("X", "Z").Motion.Setup.PosOffsetSet(new double[]{0, 0});
myController.Commands.Axes.Select(0, 2).Motion.Setup.PosOffsetSet(new double[]{0, 0});
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.PosOffsetSet(new double[]{0, 0});
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.PosOffsetSet(new double[]{0, 0});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.PosOffsetSet(New Double(){0, 0})
myController.Commands.Axes(0, 2).Motion.Setup.PosOffsetSet(New Double(){0, 0})
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.PosOffsetSet(New Double(){0, 0})
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.PosOffsetSet(New Double(){0, 0})
myController.Commands.Axes.Select("X", "Z").Motion.Setup.PosOffsetSet(New Double(){0, 0})
myController.Commands.Axes.Select(0, 2).Motion.Setup.PosOffsetSet(New Double(){0, 0})
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.PosOffsetSet(New Double(){0, 0})
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.PosOffsetSet(New Double(){0, 0})
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;double&gt;{0, 0});
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;double&gt;{0, 0});
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;double&gt;{0, 0});
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;double&gt;{0, 0});
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;double&gt;{0, 0});
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;double&gt;{0, 0});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;double&gt;{0, 0});
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;double&gt;{0, 0});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionSetupCommands.PosOffsetClear">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Setup.PosOffsetClear();
myController.Commands.Axes[0, 2].Motion.Setup.PosOffsetClear();
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Setup.PosOffsetClear();
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Setup.PosOffsetClear();
myController.Commands.Axes.Select("X", "Z").Motion.Setup.PosOffsetClear();
myController.Commands.Axes.Select(0, 2).Motion.Setup.PosOffsetClear();
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Setup.PosOffsetClear();
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.PosOffsetClear();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Setup.PosOffsetClear()
myController.Commands.Axes(0, 2).Motion.Setup.PosOffsetClear()
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Setup.PosOffsetClear()
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Setup.PosOffsetClear()
myController.Commands.Axes.Select("X", "Z").Motion.Setup.PosOffsetClear()
myController.Commands.Axes.Select(0, 2).Motion.Setup.PosOffsetClear()
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Setup.PosOffsetClear()
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Setup.PosOffsetClear()
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Setup-&gt;PosOffsetClear();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Setup-&gt;PosOffsetClear();
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;PosOffsetClear();
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Setup-&gt;PosOffsetClear();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Setup-&gt;PosOffsetClear();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Setup-&gt;PosOffsetClear();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;PosOffsetClear();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Setup-&gt;PosOffsetClear();
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.AxesMotionAdvancedCommands">
            <summary>Contains the Advanced Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionAdvancedCommands.HomeAsync">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Advanced.HomeAsync();
myController.Commands.Axes[0, 2].Motion.Advanced.HomeAsync();
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Advanced.HomeAsync();
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Advanced.HomeAsync();
myController.Commands.Axes.Select("X", "Z").Motion.Advanced.HomeAsync();
myController.Commands.Axes.Select(0, 2).Motion.Advanced.HomeAsync();
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Advanced.HomeAsync();
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Advanced.HomeAsync();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Advanced.HomeAsync()
myController.Commands.Axes(0, 2).Motion.Advanced.HomeAsync()
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Advanced.HomeAsync()
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Advanced.HomeAsync()
myController.Commands.Axes.Select("X", "Z").Motion.Advanced.HomeAsync()
myController.Commands.Axes.Select(0, 2).Motion.Advanced.HomeAsync()
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Advanced.HomeAsync()
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Advanced.HomeAsync()
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Advanced-&gt;HomeAsync();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Advanced-&gt;HomeAsync();
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Advanced-&gt;HomeAsync();
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Advanced-&gt;HomeAsync();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Advanced-&gt;HomeAsync();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Advanced-&gt;HomeAsync();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Advanced-&gt;HomeAsync();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Advanced-&gt;HomeAsync();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesMotionAdvancedCommands.HomeAsyncConditional">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].Motion.Advanced.HomeAsyncConditional();
myController.Commands.Axes[0, 2].Motion.Advanced.HomeAsyncConditional();
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].Motion.Advanced.HomeAsyncConditional();
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].Motion.Advanced.HomeAsyncConditional();
myController.Commands.Axes.Select("X", "Z").Motion.Advanced.HomeAsyncConditional();
myController.Commands.Axes.Select(0, 2).Motion.Advanced.HomeAsyncConditional();
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).Motion.Advanced.HomeAsyncConditional();
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Advanced.HomeAsyncConditional();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").Motion.Advanced.HomeAsyncConditional()
myController.Commands.Axes(0, 2).Motion.Advanced.HomeAsyncConditional()
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).Motion.Advanced.HomeAsyncConditional()
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).Motion.Advanced.HomeAsyncConditional()
myController.Commands.Axes.Select("X", "Z").Motion.Advanced.HomeAsyncConditional()
myController.Commands.Axes.Select(0, 2).Motion.Advanced.HomeAsyncConditional()
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).Motion.Advanced.HomeAsyncConditional()
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).Motion.Advanced.HomeAsyncConditional()
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional();
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional();
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional();
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional();
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional();
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional();
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional();
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.AxesIOCommands">
            <summary>Contains the IO Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.AxesIOCommands.Brake(Aerotech.A3200.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the break to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
// all of the commands below do the same thing
myController.Commands.Axes["X", "Z"].IO.Brake(OnOff.On);
myController.Commands.Axes[0, 2].IO.Brake(OnOff.On);
myController.Commands.Axes[AxisMask.A00|AxisMask.A02].IO.Brake(OnOff.On);
myController.Commands.Axes[AxisMask.A00, AxisMask.A02].IO.Brake(OnOff.On);
myController.Commands.Axes.Select("X", "Z").IO.Brake(OnOff.On);
myController.Commands.Axes.Select(0, 2).IO.Brake(OnOff.On);
myController.Commands.Axes.Select(AxisMask.A00|AxisMask.A02).IO.Brake(OnOff.On);
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).IO.Brake(OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
' all of the commands below do the same thing
myController.Commands.Axes("X", "Z").IO.Brake(OnOff.On)
myController.Commands.Axes(0, 2).IO.Brake(OnOff.On)
myController.Commands.Axes(AxisMask.A00 Or AxisMask.A02).IO.Brake(OnOff.On)
myController.Commands.Axes(AxisMask.A00, AxisMask.A02).IO.Brake(OnOff.On)
myController.Commands.Axes.Select("X", "Z").IO.Brake(OnOff.On)
myController.Commands.Axes.Select(0, 2).IO.Brake(OnOff.On)
myController.Commands.Axes.Select(AxisMask.A00 Or AxisMask.A02).IO.Brake(OnOff.On)
myController.Commands.Axes.Select(AxisMask.A00, AxisMask.A02).IO.Brake(OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
// all of the commands below do the same thing
myController-&gt;Commands-&gt;Axes[L"X", L"Z"]-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes[0, 2]-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes[AxisMask::A00|AxisMask::A02]-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes[AxisMask::A00, AxisMask::A02]-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(L"X", L"Z")-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(0, 2)-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00|AxisMask::A02)-&gt;IO-&gt;Brake(OnOff::On);
myController-&gt;Commands-&gt;Axes-&gt;Select(AxisMask::A00, AxisMask::A02)-&gt;IO-&gt;Brake(OnOff::On);
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.MotionSetupCommands">
            <summary>Contains the Setup Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.Scurve(System.Double)">
            <summary>Specifies the S-curve value to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The value by which to S-curve.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SCURVE_Command.html">SCURVE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.Scurve(75);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.Scurve(75)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Scurve(75);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.Absolute">
            <summary>Sets motion commands to be in absolute mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ABSOLUTE_Command.html">ABSOLUTE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.Absolute();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.Absolute()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Absolute();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.Incremental">
            <summary>Sets motion commands to be in incremental mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/INCREMENTAL_Command.html">INCREMENTAL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.Incremental();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.Incremental()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Incremental();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampType(Aerotech.A3200.Commands.RampType)">
            <summary>Specifies the ramp type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Type">The ramp type to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TYPE_Command.html">RAMP TYPE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampType(RampType.Linear);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampType(RampType.Linear)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampType(RampType::Linear);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampType(System.Int32[],Aerotech.A3200.Commands.RampType)">
            <summary>Specifies the ramp type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Type">The ramp type to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TYPE_Command.html">RAMP TYPE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampType(new int[]{0, 2}, RampType.Linear);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampType(New Integer(){0, 2}, RampType.Linear)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampType(gcnew array&lt;int&gt;{0, 2}, RampType::Linear);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampType(System.Int32,Aerotech.A3200.Commands.RampType)">
            <summary>Specifies the ramp type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Type">The ramp type to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TYPE_Command.html">RAMP TYPE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampType(0, RampType.Linear);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampType(0, RampType.Linear)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampType(0, RampType::Linear);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampType(System.String[],Aerotech.A3200.Commands.RampType)">
            <summary>Specifies the ramp type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Type">The ramp type to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TYPE_Command.html">RAMP TYPE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampType(new string[]{"X", "Z"}, RampType.Linear);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampType(New String(){"X", "Z"}, RampType.Linear)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampType(gcnew array&lt;String^&gt;{L"X", L"Z"}, RampType::Linear);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampType(System.String,Aerotech.A3200.Commands.RampType)">
            <summary>Specifies the ramp type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Type">The ramp type to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TYPE_Command.html">RAMP TYPE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampType("X", RampType.Linear);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampType("X", RampType.Linear)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampType(L"X", RampType::Linear);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampType(Aerotech.A3200.AxisMask,Aerotech.A3200.Commands.RampType)">
            <summary>Specifies the ramp type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Type">The ramp type to use.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TYPE_Command.html">RAMP TYPE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampType(AxisMask.A00|AxisMask.A02, RampType.Linear);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampType(AxisMask.A00 Or AxisMask.A02, RampType.Linear)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampType(AxisMask::A00|AxisMask::A02, RampType::Linear);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampMode(Aerotech.A3200.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">
										The ramp mode to use.
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampMode(RampMode.Rate);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampMode(RampMode.Rate)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(RampMode::Rate);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampMode(System.Int32[],Aerotech.A3200.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">
										The ramp mode to use.
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampMode(new int[]{0, 2}, RampMode.Rate);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampMode(New Integer(){0, 2}, RampMode.Rate)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(gcnew array&lt;int&gt;{0, 2}, RampMode::Rate);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampMode(System.Int32,Aerotech.A3200.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">
										The ramp mode to use.
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampMode(0, RampMode.Rate);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampMode(0, RampMode.Rate)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(0, RampMode::Rate);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampMode(System.String[],Aerotech.A3200.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">
										The ramp mode to use.
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampMode(new string[]{"X", "Z"}, RampMode.Rate);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampMode(New String(){"X", "Z"}, RampMode.Rate)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(gcnew array&lt;String^&gt;{L"X", L"Z"}, RampMode::Rate);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampMode(System.String,Aerotech.A3200.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">
										The ramp mode to use.
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampMode("X", RampMode.Rate);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampMode("X", RampMode.Rate)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(L"X", RampMode::Rate);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampMode(Aerotech.A3200.AxisMask,Aerotech.A3200.Commands.RampMode)">
            <summary>Specifies the ramp mode calculation type to use.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Mode">
										The ramp mode to use.
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP MODE_Command.html">RAMP MODE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampMode(AxisMask.A00|AxisMask.A02, RampMode.Rate);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampMode(AxisMask.A00 Or AxisMask.A02, RampMode.Rate)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampMode(AxisMask::A00|AxisMask::A02, RampMode::Rate);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRate(System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRate(50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRate(50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateAccel(System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateAccel(50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateAccel(50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateAccel(50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateDecel(System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateDecel(50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateDecel(50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDecel(50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRate(System.Int32[],System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRate(new int[]{0, 2}, new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRate(New Integer(){0, 2}, New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRate(System.Int32,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRate(0, 50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRate(0, 50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(0, 50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRate(System.String[],System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRate(new string[]{"X", "Z"}, new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRate(New String(){"X", "Z"}, New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRate(System.String,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRate("X", 50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRate("X", 50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(L"X", 50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRate(Aerotech.A3200.AxisMask,System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRate(AxisMask.A00|AxisMask.A02, new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRate(AxisMask.A00 Or AxisMask.A02, New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRate(Aerotech.A3200.AxisMask,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRate(AxisMask.A00, 50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRate(AxisMask.A00, 50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRate(AxisMask::A00, 50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateAccel(System.Int32[],System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateAccel(new int[]{0, 2}, new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateAccel(New Integer(){0, 2}, New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateAccel(System.Int32,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateAccel(0, 50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateAccel(0, 50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateAccel(0, 50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateAccel(System.String[],System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateAccel(new string[]{"X", "Z"}, new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateAccel(New String(){"X", "Z"}, New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateAccel(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateAccel(System.String,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateAccel("X", 50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateAccel("X", 50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateAccel(L"X", 50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateAccel(Aerotech.A3200.AxisMask,System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateAccel(AxisMask.A00|AxisMask.A02, new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateAccel(AxisMask.A00 Or AxisMask.A02, New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateAccel(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateAccel(Aerotech.A3200.AxisMask,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateAccel(AxisMask.A00, 50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateAccel(AxisMask.A00, 50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateAccel(AxisMask::A00, 50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateDecel(System.Int32[],System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateDecel(new int[]{0, 2}, new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateDecel(New Integer(){0, 2}, New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateDecel(System.Int32,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateDecel(0, 50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateDecel(0, 50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDecel(0, 50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateDecel(System.String[],System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateDecel(new string[]{"X", "Z"}, new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateDecel(New String(){"X", "Z"}, New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDecel(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateDecel(System.String,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateDecel("X", 50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateDecel("X", 50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDecel(L"X", 50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateDecel(Aerotech.A3200.AxisMask,System.Double[])">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateDecel(AxisMask.A00|AxisMask.A02, new double[]{50000, 50000});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateDecel(AxisMask.A00 Or AxisMask.A02, New Double(){50000, 50000})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDecel(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{50000, 50000});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateDecel(Aerotech.A3200.AxisMask,System.Double)">
            <summary>Specifies rate-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE_Command.html">RAMP RATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateDecel(AxisMask.A00, 50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateDecel(AxisMask.A00, 50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDecel(AxisMask::A00, 50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateDependentAccel(System.Double)">
            <summary>Specifies rate-based acceleration and deceleration on dependent axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE DEPENDENT_Command.html">RAMP RATE DEPENDENT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateDependentAccel(50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateDependentAccel(50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDependentAccel(50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampRateDependentDecel(System.Double)">
            <summary>Specifies rate-based acceleration and deceleration on dependent axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration rate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP RATE DEPENDENT_Command.html">RAMP RATE DEPENDENT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampRateDependentDecel(50000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampRateDependentDecel(50000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampRateDependentDecel(50000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTime(System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTime(1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTime(1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeAccel(System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeAccel(1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeAccel(1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeDecel(System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeDecel(1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeDecel(1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTime(System.Int32[],System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTime(new int[]{0, 2}, new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTime(New Integer(){0, 2}, New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTime(System.Int32,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTime(0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTime(0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTime(System.String[],System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTime(new string[]{"X", "Z"}, new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTime(New String(){"X", "Z"}, New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTime(System.String,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTime("X", 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTime("X", 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTime(Aerotech.A3200.AxisMask,System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTime(AxisMask.A00|AxisMask.A02, new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTime(AxisMask.A00 Or AxisMask.A02, New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTime(Aerotech.A3200.AxisMask,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTime(AxisMask.A00, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTime(AxisMask.A00, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTime(AxisMask::A00, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeAccel(System.Int32[],System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeAccel(new int[]{0, 2}, new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeAccel(New Integer(){0, 2}, New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeAccel(System.Int32,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeAccel(0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeAccel(0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeAccel(System.String[],System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeAccel(new string[]{"X", "Z"}, new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeAccel(New String(){"X", "Z"}, New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeAccel(System.String,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeAccel("X", 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeAccel("X", 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeAccel(Aerotech.A3200.AxisMask,System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeAccel(AxisMask.A00|AxisMask.A02, new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeAccel(AxisMask.A00 Or AxisMask.A02, New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeAccel(Aerotech.A3200.AxisMask,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeAccel(AxisMask.A00, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeAccel(AxisMask.A00, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeAccel(AxisMask::A00, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeDecel(System.Int32[],System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeDecel(new int[]{0, 2}, new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeDecel(New Integer(){0, 2}, New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeDecel(System.Int32,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeDecel(0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeDecel(0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeDecel(System.String[],System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeDecel(new string[]{"X", "Z"}, new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeDecel(New String(){"X", "Z"}, New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeDecel(System.String,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeDecel("X", 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeDecel("X", 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeDecel(Aerotech.A3200.AxisMask,System.Double[])">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeDecel(AxisMask.A00|AxisMask.A02, new double[]{1, 1});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeDecel(AxisMask.A00 Or AxisMask.A02, New Double(){1, 1})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{1, 1});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.RampTimeDecel(Aerotech.A3200.AxisMask,System.Double)">
            <summary>Specifies time-based acceleration and deceleration.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The acceleration and deceleration time.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/RAMP TIME_Command.html">RAMP TIME</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.RampTimeDecel(AxisMask.A00, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.RampTimeDecel(AxisMask.A00, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;RampTimeDecel(AxisMask::A00, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.SetExtPos(System.Int32,System.Double)">
            <summary>Sets an arbitrary position value, in encoder counts, in external position register.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set in external position register.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SETEXTPOS_Command.html">SETEXTPOS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.SetExtPos(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.SetExtPos(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;SetExtPos(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.SetExtPos(System.String,System.Double)">
            <summary>Sets an arbitrary position value, in encoder counts, in external position register.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set in external position register.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SETEXTPOS_Command.html">SETEXTPOS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.SetExtPos("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.SetExtPos("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;SetExtPos(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetSet(System.Int32[],System.Double[])">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The value at which to set the parameter.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetSet(new int[]{0, 2}, new double[]{0, 0});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetSet(New Integer(){0, 2}, New Double(){0, 0})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;int&gt;{0, 2}, gcnew array&lt;double&gt;{0, 0});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetSet(System.Int32,System.Double)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The value at which to set the parameter.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetSet(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetSet(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetSet(System.String[],System.Double[])">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The value at which to set the parameter.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetSet(new string[]{"X", "Z"}, new double[]{0, 0});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetSet(New String(){"X", "Z"}, New Double(){0, 0})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(gcnew array&lt;String^&gt;{L"X", L"Z"}, gcnew array&lt;double&gt;{0, 0});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetSet(System.String,System.Double)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The value at which to set the parameter.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetSet("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetSet("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetSet(Aerotech.A3200.AxisMask,System.Double[])">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The value at which to set the parameter.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetSet(AxisMask.A00|AxisMask.A02, new double[]{0, 0});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetSet(AxisMask.A00 Or AxisMask.A02, New Double(){0, 0})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(AxisMask::A00|AxisMask::A02, gcnew array&lt;double&gt;{0, 0});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetSet(Aerotech.A3200.AxisMask,System.Double)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The value at which to set the parameter.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetSet(AxisMask.A00, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetSet(AxisMask.A00, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetSet(AxisMask::A00, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetClear(System.Int32[])">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetClear(new int[]{0, 2});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetClear(New Integer(){0, 2})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetClear(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetClear(System.Int32)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetClear(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetClear(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetClear(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetClear(System.String[])">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetClear(new string[]{"X", "Z"});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetClear(New String(){"X", "Z"})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetClear(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetClear(System.String)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetClear("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetClear("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetClear(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.PosOffsetClear(Aerotech.A3200.AxisMask)">
            <summary>Sets or clears an arbitrary program offset position.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/POSOFFSET_Command.html">POSOFFSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.PosOffsetClear(AxisMask.A00|AxisMask.A02);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.PosOffsetClear(AxisMask.A00 Or AxisMask.A02)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;PosOffsetClear(AxisMask::A00|AxisMask::A02);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.Servo(System.Int32,Aerotech.A3200.Commands.OnOff)">
            <summary>Changes between open-loop and closed-loop mode for piezo stages.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OnOff">Turns on or turns off closed-loop servo mode.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SERVO ON_OFF_Command.html">SERVO ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.Servo(0, OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.Servo(0, OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Servo(0, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionSetupCommands.Servo(System.String,Aerotech.A3200.Commands.OnOff)">
            <summary>Changes between open-loop and closed-loop mode for piezo stages.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OnOff">Turns on or turns off closed-loop servo mode.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SERVO ON_OFF_Command.html">SERVO ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Setup.Servo("X", OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Setup.Servo("X", OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Setup-&gt;Servo(L"X", OnOff::On);
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.MotionAdvancedCommands">
            <summary>Contains the Advanced Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsync(System.Int32[])">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsync(new int[]{0, 2});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsync(New Integer(){0, 2})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsync(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsync(System.Int32)">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsync(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsync(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsync(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsync(System.String[])">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsync(new string[]{"X", "Z"});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsync(New String(){"X", "Z"})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsync(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsync(System.String)">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsync("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsync("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsync(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsync(Aerotech.A3200.AxisMask)">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsync(AxisMask.A00|AxisMask.A02);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsync(AxisMask.A00 Or AxisMask.A02)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsync(AxisMask::A00|AxisMask::A02);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsyncConditional(System.Int32[])">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsyncConditional(new int[]{0, 2});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsyncConditional(New Integer(){0, 2})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional(gcnew array&lt;int&gt;{0, 2});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsyncConditional(System.Int32)">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsyncConditional(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsyncConditional(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsyncConditional(System.String[])">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsyncConditional(new string[]{"X", "Z"});
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsyncConditional(New String(){"X", "Z"})
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional(gcnew array&lt;String^&gt;{L"X", L"Z"});
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsyncConditional(System.String)">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsyncConditional("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsyncConditional("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.HomeAsyncConditional(Aerotech.A3200.AxisMask)">
            <summary>Asynchronously homes axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/HOMEASYNC_Command.html">HOMEASYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.HomeAsyncConditional(AxisMask.A00|AxisMask.A02);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.HomeAsyncConditional(AxisMask.A00 Or AxisMask.A02)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;HomeAsyncConditional(AxisMask::A00|AxisMask::A02);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.MoveOutLim(System.Int32)">
            <summary>Moves an axis out of a limit condition.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVEOUTLIM_Command.html">MOVEOUTLIM</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.MoveOutLim(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.MoveOutLim(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;MoveOutLim(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.MoveOutLim(System.String)">
            <summary>Moves an axis out of a limit condition.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVEOUTLIM_Command.html">MOVEOUTLIM</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.MoveOutLim("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.MoveOutLim("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;MoveOutLim(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.MoveToLimCW(System.Int32)">
            <summary>Moves an axis into a limit condition.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVETOLIM_Command.html">MOVETOLIM</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.MoveToLimCW(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.MoveToLimCW(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;MoveToLimCW(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.MoveToLimCW(System.String)">
            <summary>Moves an axis into a limit condition.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVETOLIM_Command.html">MOVETOLIM</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.MoveToLimCW("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.MoveToLimCW("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;MoveToLimCW(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.MoveToLimCCW(System.Int32)">
            <summary>Moves an axis into a limit condition.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVETOLIM_Command.html">MOVETOLIM</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.MoveToLimCCW(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.MoveToLimCCW(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;MoveToLimCCW(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.MoveToLimCCW(System.String)">
            <summary>Moves an axis into a limit condition.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MOVETOLIM_Command.html">MOVETOLIM</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.MoveToLimCCW("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.MoveToLimCCW("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;MoveToLimCCW(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.Slice(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Blends two moves (a scanning move and a stepping move) to make one coordinated move.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="FirstAxis">First axis</param><param name="SecondAxis">Second axis</param><param name="FirstAxisJumpPos">First axis jump point position</param><param name="SecondAxisJumpPos">Second axis jump point position</param><param name="FirstAxisEndPos">First axis end point position</param><param name="SecondAxisEndPos">Second axis end point position</param><param name="CoordinatedSpeed">Coordinated speed of the scanning motion</param><param name="FirstAxisJumpSpeed">First axis speed for the stepping motion</param><param name="SecondAxisJumpSpeed">Second axis speed for the stepping motion</param><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.Slice(0, 1, 10, 20, 30, 40, 50, 110, 120);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.Slice(0, 1, 10, 20, 30, 40, 50, 110, 120)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;Slice(0, 1, 10, 20, 30, 40, 50, 110, 120);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionAdvancedCommands.Slice(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Blends two moves (a scanning move and a stepping move) to make one coordinated move.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="FirstAxis">First axis</param><param name="SecondAxis">Second axis</param><param name="FirstAxisJumpPos">First axis jump point position</param><param name="SecondAxisJumpPos">Second axis jump point position</param><param name="FirstAxisEndPos">First axis end point position</param><param name="SecondAxisEndPos">Second axis end point position</param><param name="CoordinatedSpeed">Coordinated speed of the scanning motion</param><param name="FirstAxisJumpSpeed">First axis speed for the stepping motion</param><param name="SecondAxisJumpSpeed">Second axis speed for the stepping motion</param><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Advanced.Slice("X", "Y", 10, 20, 30, 40, 50, 110, 120);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Advanced.Slice("X", "Y", 10, 20, 30, 40, 50, 110, 120)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Advanced-&gt;Slice("X", "Y", 10, 20, 30, 40, 50, 110, 120);
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.MotionFiberCommands">
            <summary>Contains the Fiber Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.Centroid1D">
            <summary>Executes a Centroid 1D (one-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER CENTROID_Command.html">FIBER CENTROID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.Centroid1D();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.Centroid1D()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;Centroid1D();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.Centroid1DControllerVariable(System.Double)">
            <summary>Executes a Centroid 1D (one-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="ControllerVariable">The controller variable in which to store the calculated centroid coordinate.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER CENTROID_Command.html">FIBER CENTROID</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.Centroid1DControllerVariable(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.Centroid1DControllerVariable(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;Centroid1DControllerVariable(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.Centroid2D">
            <summary>Executes a Centroid 2D (two-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER CENTROID2D_Command.html">FIBER CENTROID2D</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.Centroid2D();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.Centroid2D()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;Centroid2D();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.Centroid2DControllerVariable(System.Double)">
            <summary>Executes a Centroid 2D (two-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="ControllerVariable">The first controller variable in which to store the calculated centroid coordinates.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER CENTROID2D_Command.html">FIBER CENTROID2D</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.Centroid2DControllerVariable(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.Centroid2DControllerVariable(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;Centroid2DControllerVariable(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.Centroid3D">
            <summary>Executes a Centroid 3D (three-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER CENTROID3D_Command.html">FIBER CENTROID3D</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.Centroid3D();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.Centroid3D()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;Centroid3D();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.Centroid3DControllerVariable(System.Double)">
            <summary>Executes a Centroid 3D (three-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="ControllerVariable">The first controller variable in which to store the calcuated centroid coordinates.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER CENTROID3D_Command.html">FIBER CENTROID3D</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.Centroid3DControllerVariable(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.Centroid3DControllerVariable(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;Centroid3DControllerVariable(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.FastAlign2D">
            <summary>Executes a FastAlign 2D (two-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER FASTALIGN_Command.html">FIBER FASTALIGN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.FastAlign2D();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.FastAlign2D()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;FastAlign2D();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.FastAlign3D">
            <summary>Executes a FastAlign 3D (three-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER FASTALIGN3D_Command.html">FIBER FASTALIGN3D</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.FastAlign3D();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.FastAlign3D()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;FastAlign3D();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.FastAlign4D">
            <summary>Executes a FastAlign 4D (four-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER FASTALIGN4D_Command.html">FIBER FASTALIGN4D</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.FastAlign4D();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.FastAlign4D()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;FastAlign4D();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.FastAlign5D">
            <summary>Executes a FastAlign 5D (five-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER FASTALIGN5D_Command.html">FIBER FASTALIGN5D</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.FastAlign5D();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.FastAlign5D()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;FastAlign5D();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.FastAlign6D">
            <summary>Executes a FastAlign 6D (six-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER FASTALIGN6D_Command.html">FIBER FASTALIGN6D</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.FastAlign6D();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.FastAlign6D()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;FastAlign6D();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.GeoCenter">
            <summary>Executes a GeoCenter 2D (two-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER GEOCENTER_Command.html">FIBER GEOCENTER</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.GeoCenter();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.GeoCenter()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;GeoCenter();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.HillClimb">
            <summary>Executes a HillClimb FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER HILLCLIMB_Command.html">FIBER HILLCLIMB</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.HillClimb();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.HillClimb()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;HillClimb();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.SpiralRough">
            <summary>Executes a rough Spiral 2D (two-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER SPROUGH_Command.html">FIBER SPROUGH</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.SpiralRough();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.SpiralRough()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;SpiralRough();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.MotionFiberCommands.SpiralFine">
            <summary>Executes a fine Spiral 2D (two-dimensional) FIBER search routine.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FIBER SPFINE_Command.html">FIBER SPFINE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Motion.Fiber.SpiralFine();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Motion.Fiber.SpiralFine()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Motion-&gt;Fiber-&gt;SpiralFine();
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.UnitsCommands">
            <summary>Contains the Units Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.UnitsCommands.Primary">
            <summary>Sets primary units on the current task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PRIMARY_Command.html">PRIMARY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Units.Primary();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Units.Primary()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Units-&gt;Primary();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.UnitsCommands.Secondary">
            <summary>Sets secondary units on the current task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SECONDARY_Command.html">SECONDARY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Units.Secondary();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Units.Secondary()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Units-&gt;Secondary();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.UnitsCommands.Minutes">
            <summary>Sets the feedrate to distance units per minute.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MINUTES_Command.html">MINUTES</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Units.Minutes();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Units.Minutes()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Units-&gt;Minutes();
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.UnitsCommands.Seconds">
            <summary>Sets the feedrate to distance units per second.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SECONDS_Command.html">SECONDS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Units.Seconds();
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Units.Seconds()
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Units-&gt;Seconds();
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.IOCommands">
            <summary>Contains the IO Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.AnalogInput(System.Int32,System.Int32)">
            <summary>Gets the value of a specified analog input.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified analog input.</returns><param name="Channel">The analog channel to get the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$AI_Function.html">$AI</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.IO.AnalogInput(1, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.IO.AnalogInput(1, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;AnalogInput(1, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.AnalogInput(System.Int32,System.String)">
            <summary>Gets the value of a specified analog input.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified analog input.</returns><param name="Channel">The analog channel to get the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$AI_Function.html">$AI</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.IO.AnalogInput(1, "X"));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.IO.AnalogInput(1, "X"))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;AnalogInput(1, L"X"));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.AnalogOutput(System.Int32,System.Int32,System.Double)">
            <summary>Accesses the value of a specified analog output.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Channel">The analog channel to access the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set the specified analog output to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$AO_Command.html">$AO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.AnalogOutput(1, 0, 1.25);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.AnalogOutput(1, 0, 1.25)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;AnalogOutput(1, 0, 1.25);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.AnalogOutput(System.Int32,System.String,System.Double)">
            <summary>Accesses the value of a specified analog output.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Channel">The analog channel to access the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set the specified analog output to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$AO_Command.html">$AO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.AnalogOutput(1, "X", 1.25);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.AnalogOutput(1, "X", 1.25)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;AnalogOutput(1, L"X", 1.25);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.DigitalInput(System.Int32,System.Int32)">
            <summary>Gets the value of a specified digital input word.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified digital input word.</returns><param name="Word">The 16-bit input word to get the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$WI_Function.html">$WI</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.IO.DigitalInput(0, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.IO.DigitalInput(0, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;DigitalInput(0, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.DigitalInput(System.Int32,System.String)">
            <summary>Gets the value of a specified digital input word.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified digital input word.</returns><param name="Word">The 16-bit input word to get the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$WI_Function.html">$WI</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.IO.DigitalInput(0, "X"));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.IO.DigitalInput(0, "X"))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;DigitalInput(0, L"X"));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.DigitalOutput(System.Int32,System.Int32,System.Int32)">
            <summary>Accesses the value of a specified digital output word.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Word">The 16-bit output word to access the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set the specified digital output word to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$WO_Command.html">$WO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.DigitalOutput(0, 0, 7);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.DigitalOutput(0, 0, 7)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;DigitalOutput(0, 0, 7);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.DigitalOutput(System.Int32,System.String,System.Int32)">
            <summary>Accesses the value of a specified digital output word.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Word">The 16-bit output word to access the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set the specified digital output word to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$WO_Command.html">$WO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.DigitalOutput(0, "X", 7);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.DigitalOutput(0, "X", 7)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;DigitalOutput(0, L"X", 7);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.DigitalInputBit(System.Int32,System.Int32)">
            <summary>Gets the value of a specified digital input bit.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified digital input bit.</returns><param name="Bit">The digital input bit to get the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$DI_Function.html">$DI</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.IO.DigitalInputBit(0, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.IO.DigitalInputBit(0, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;DigitalInputBit(0, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.DigitalInputBit(System.Int32,System.String)">
            <summary>Gets the value of a specified digital input bit.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified digital input bit.</returns><param name="Bit">The digital input bit to get the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$DI_Function.html">$DI</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.IO.DigitalInputBit(0, "X"));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.IO.DigitalInputBit(0, "X"))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;IO-&gt;DigitalInputBit(0, L"X"));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.DigitalOutputBit(System.Int32,System.Int32,System.Int32)">
            <summary>Accesses the value of a specified digital output bit.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Bit">The digital output bit to access the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set the specified digital output bit to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$DO_Command.html">$DO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.DigitalOutputBit(0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.DigitalOutputBit(0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;DigitalOutputBit(0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.DigitalOutputBit(System.Int32,System.String,System.Int32)">
            <summary>Accesses the value of a specified digital output bit.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Bit">The digital output bit to access the value of.</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Value">The value to set the specified digital output bit to.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/$DO_Command.html">$DO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.DigitalOutputBit(0, "X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.DigitalOutputBit(0, "X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;DigitalOutputBit(0, L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.Brake(System.Int32[],Aerotech.A3200.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the break to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.Brake(new int[]{0, 2}, OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.Brake(New Integer(){0, 2}, OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;Brake(gcnew array&lt;int&gt;{0, 2}, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.Brake(System.Int32,Aerotech.A3200.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the break to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.Brake(0, OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.Brake(0, OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;Brake(0, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.Brake(System.String[],Aerotech.A3200.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the break to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.Brake(new string[]{"X", "Z"}, OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.Brake(New String(){"X", "Z"}, OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;Brake(gcnew array&lt;String^&gt;{L"X", L"Z"}, OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.Brake(System.String,Aerotech.A3200.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the break to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.Brake("X", OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.Brake("X", OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;Brake(L"X", OnOff::On);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.IOCommands.Brake(Aerotech.A3200.AxisMask,Aerotech.A3200.Commands.OnOff)">
            <summary>Controls the brake output of axes.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="OnOff">Sets the break to On or Off.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/BRAKE_Command.html">BRAKE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.IO.Brake(AxisMask.A00|AxisMask.A02, OnOff.On);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.IO.Brake(AxisMask.A00 Or AxisMask.A02, OnOff.On)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;IO-&gt;Brake(AxisMask::A00|AxisMask::A02, OnOff::On);
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.StatusCommands">
            <summary>Contains the Status Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.AxisStatus(System.Int32,Aerotech.A3200.Status.AxisStatusSignal)">
            <summary>Gets the specified status item from the specified axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified axis status item.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="DataItem">The DATAITEM_ constant that represents the axis status item. Possible values are listed in the AXISSTATUS Data Items Table.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/AXISSTATUS_Function.html">AXISSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Status.AxisStatus(0, AxisStatusSignal.AxisFault));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Status.AxisStatus(0, AxisStatusSignal.AxisFault))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;AxisStatus(0, AxisStatusSignal::AxisFault));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.AxisStatus(System.String,Aerotech.A3200.Status.AxisStatusSignal)">
            <summary>Gets the specified status item from the specified axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified axis status item.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="DataItem">The DATAITEM_ constant that represents the axis status item. Possible values are listed in the AXISSTATUS Data Items Table.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/AXISSTATUS_Function.html">AXISSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Status.AxisStatus("X", AxisStatusSignal.AxisFault));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Status.AxisStatus("X", AxisStatusSignal.AxisFault))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;AxisStatus(L"X", AxisStatusSignal::AxisFault));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.AxisStatus(System.Int32,Aerotech.A3200.Status.AxisStatusSignal,System.Int32)">
            <summary>Gets the specified status item from the specified axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified axis status item.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="DataItem">The DATAITEM_ constant that represents the axis status item. Possible values are listed in the AXISSTATUS Data Items Table.</param><param name="AdditionalData">Additional data for the specified data item. This argument is required by some data items.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/AXISSTATUS_Function.html">AXISSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Status.AxisStatus(0, AxisStatusSignal.AxisFault, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Status.AxisStatus(0, AxisStatusSignal.AxisFault, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;AxisStatus(0, AxisStatusSignal::AxisFault, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.AxisStatus(System.String,Aerotech.A3200.Status.AxisStatusSignal,System.Int32)">
            <summary>Gets the specified status item from the specified axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified axis status item.</returns><param name="Axis">
										The axis on which to execute the command
									</param><param name="DataItem">The DATAITEM_ constant that represents the axis status item. Possible values are listed in the AXISSTATUS Data Items Table.</param><param name="AdditionalData">Additional data for the specified data item. This argument is required by some data items.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/AXISSTATUS_Function.html">AXISSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Status.AxisStatus("X", AxisStatusSignal.AxisFault, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Status.AxisStatus("X", AxisStatusSignal.AxisFault, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;AxisStatus(L"X", AxisStatusSignal::AxisFault, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.TaskStatus(Aerotech.A3200.TaskId,Aerotech.A3200.Status.TaskStatusSignal)">
            <summary>Gets the specified status item from the specified task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified task status item.</returns><param name="Task">The task from which to retrieve the status item.</param><param name="DataItem">Specifies the task status to retrieve.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/TASKSTATUS_Function.html">TASKSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Status.TaskStatus(TaskId.T03, TaskStatusSignal.ProgramLineNumber));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Status.TaskStatus(TaskId.T03, TaskStatusSignal.ProgramLineNumber))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;TaskStatus(TaskId::T03, TaskStatusSignal::ProgramLineNumber));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.TaskStatus(Aerotech.A3200.TaskId,Aerotech.A3200.Status.TaskStatusSignal,System.Int32)">
            <summary>Gets the specified status item from the specified task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified task status item.</returns><param name="Task">The task from which to retrieve the status item.</param><param name="DataItem">Specifies the task status to retrieve.</param><param name="AdditionalData">Additional data for the specified data item. This argument is required by some data items.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/TASKSTATUS_Function.html">TASKSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Status.TaskStatus(TaskId.T03, TaskStatusSignal.ProgramLineNumber, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Status.TaskStatus(TaskId.T03, TaskStatusSignal.ProgramLineNumber, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;TaskStatus(TaskId::T03, TaskStatusSignal::ProgramLineNumber, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.SystemStatus(Aerotech.A3200.Status.SystemStatusSignal)">
            <summary>Gets the specified system status item.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified system status item.</returns><param name="DataItem">Specifies the system status to retrieve.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SYSTEMSTATUS_Function.html">SYSTEMSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Status.SystemStatus(SystemStatusSignal.VirtualBinaryInput));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Status.SystemStatus(SystemStatusSignal.VirtualBinaryInput))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;SystemStatus(SystemStatusSignal::VirtualBinaryInput));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.SystemStatus(Aerotech.A3200.Status.SystemStatusSignal,System.Int32)">
            <summary>Gets the specified system status item.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The value of the specified system status item.</returns><param name="DataItem">Specifies the system status to retrieve.</param><param name="AdditionalData">Additional data for the specified data item. This argument is required by some data items.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SYSTEMSTATUS_Function.html">SYSTEMSTATUS</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Status.SystemStatus(SystemStatusSignal.VirtualBinaryInput, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Status.SystemStatus(SystemStatusSignal.VirtualBinaryInput, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Status-&gt;SystemStatus(SystemStatusSignal::VirtualBinaryInput, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.AxisStatusFast(System.Int32,Aerotech.A3200.Status.AxisStatusSignal,System.Int32,System.String,System.Int32)">
            <summary>Gets the specified status item from the specified axis at 1 kHz or faster.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="DataItem">Specifies the axis status to retrieve. Table: AXIS STATUS Data Items shows the values that you can use.</param><param name="AdditionalData">Additional data for the specified data item. Some data items require additional data. If additional data is not required, specify a value of 0 for this argument.</param><param name="ControllerVariable">The controller variable on which to retrieve the data. The value of the controller variable must be sufficient to store the number of samples that are specified by the &lt;SampleRate&gt; argument.</param><param name="SampleRate">The number of samples to collect. This must be 1, 2, 4, 8, 16, 24, or 48.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/AXISSTATUSFAST_Command.html">AXISSTATUSFAST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Status.AxisStatusFast(0, 0, 0, "0", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Status.AxisStatusFast(0, 0, 0, "0", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Status-&gt;AxisStatusFast(0, 0, 0, L"0", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.AxisStatusFast(System.String,Aerotech.A3200.Status.AxisStatusSignal,System.Int32,System.String,System.Int32)">
            <summary>Gets the specified status item from the specified axis at 1 kHz or faster.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="DataItem">Specifies the axis status to retrieve. Table: AXIS STATUS Data Items shows the values that you can use.</param><param name="AdditionalData">Additional data for the specified data item. Some data items require additional data. If additional data is not required, specify a value of 0 for this argument.</param><param name="ControllerVariable">The controller variable on which to retrieve the data. The value of the controller variable must be sufficient to store the number of samples that are specified by the &lt;SampleRate&gt; argument.</param><param name="SampleRate">The number of samples to collect. This must be 1, 2, 4, 8, 16, 24, or 48.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/AXISSTATUSFAST_Command.html">AXISSTATUSFAST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Status.AxisStatusFast("X", 0, 0, "0", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Status.AxisStatusFast("X", 0, 0, "0", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Status-&gt;AxisStatusFast(L"X", 0, 0, L"0", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.StatusCommands.TaskStatusFast(System.UInt32,Aerotech.A3200.Status.TaskStatusSignal,System.Int32,System.String,System.Int32)">
            <summary>Gets the specified status item from the specified task at 1 kHz or faster.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="TaskIndex">The task from which to retrieve the status items. To retrieve the status items from the current task, use $taskindex as the value.</param><param name="DataItem">Specifies the task status to retrieve. Table: TASK STATUS Data Items shows the values that you can use.</param><param name="AdditionalData">Additional data for the specified data item. Some data items require additional data. If additional data is not required, specify a value of 0 for this argument.</param><param name="ControllerVariable">The controller variable on which to retrieve the data. The value of the controller variable must be sufficient to store the number of samples specified by the &lt;SampleRate&gt; argument.</param><param name="SampleRate">The number of samples to collect. This must be 1, 2, 4, 8, 16, 24, or 48.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/TASKSTATUSFAST_Command.html">TASKSTATUSFAST</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Status.TaskStatusFast(0, 0, 0, "0", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Status.TaskStatusFast(0, 0, 0, "0", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Status-&gt;TaskStatusFast(0, 0, 0, L"0", 0);
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.TuningCommands">
            <summary>Contains the Tuning Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.LoopTrans(System.Int32,Aerotech.A3200.Commands.LoopTransmissionMode,System.Double,System.Double)">
            <summary>Initiates loop transmission mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">Specifies the transmission mode.</param><param name="Amplitude">Sets the maximum loop output as a percentage of max current for open loop or distance for white noise.</param><param name="Frequency">The frequency of the disturbance generated, in hertz.</param><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.LoopTrans(0, LoopTransmissionMode.Sinusoid, 12.5, 75);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.LoopTrans(0, LoopTransmissionMode.Sinusoid, 12.5, 75)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;LoopTrans(0, LoopTransmissionMode::Sinusoid, 12.5, 75);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.LoopTrans(System.String,Aerotech.A3200.Commands.LoopTransmissionMode,System.Double,System.Double)">
            <summary>Initiates loop transmission mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">Specifies the transmission mode.</param><param name="Amplitude">Sets the maximum loop output as a percentage of max current for open loop or distance for white noise.</param><param name="Frequency">The frequency of the disturbance generated, in hertz.</param><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.LoopTrans("X", LoopTransmissionMode.Sinusoid, 12.5, 75);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.LoopTrans("X", LoopTransmissionMode.Sinusoid, 12.5, 75)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;LoopTrans(L"X", LoopTransmissionMode::Sinusoid, 12.5, 75);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.LoopTrans(System.Int32,Aerotech.A3200.Commands.LoopTransmissionMode,System.Double,System.Double,Aerotech.A3200.Commands.LoopTransmissionType)">
            <summary>Initiates loop transmission mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">Specifies the transmission mode.</param><param name="Amplitude">Sets the maximum loop output as a percentage of max current for open loop or distance for white noise.</param><param name="Frequency">The frequency of the disturbance generated, in hertz.</param><param name="Type">The type of loop transmission to run.</param><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.LoopTrans(0, LoopTransmissionMode.Sinusoid, 12.5, 75, LoopTransmissionType.OpenLoop);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.LoopTrans(0, LoopTransmissionMode.Sinusoid, 12.5, 75, LoopTransmissionType.OpenLoop)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;LoopTrans(0, LoopTransmissionMode::Sinusoid, 12.5, 75, LoopTransmissionType::OpenLoop);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.LoopTrans(System.String,Aerotech.A3200.Commands.LoopTransmissionMode,System.Double,System.Double,Aerotech.A3200.Commands.LoopTransmissionType)">
            <summary>Initiates loop transmission mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">Specifies the transmission mode.</param><param name="Amplitude">Sets the maximum loop output as a percentage of max current for open loop or distance for white noise.</param><param name="Frequency">The frequency of the disturbance generated, in hertz.</param><param name="Type">The type of loop transmission to run.</param><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.LoopTrans("X", LoopTransmissionMode.Sinusoid, 12.5, 75, LoopTransmissionType.OpenLoop);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.LoopTrans("X", LoopTransmissionMode.Sinusoid, 12.5, 75, LoopTransmissionType.OpenLoop)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;LoopTrans(L"X", LoopTransmissionMode::Sinusoid, 12.5, 75, LoopTransmissionType::OpenLoop);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.MComm(System.Int32,System.Double)">
            <summary>Sends a direct current command to the servo loop.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Current">The current to output, in amperes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MC_Command.html">MC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.MComm(0, 2.5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.MComm(0, 2.5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;MComm(0, 2.5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.MComm(System.String,System.Double)">
            <summary>Sends a direct current command to the servo loop.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Current">The current to output, in amperes.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MC_Command.html">MC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.MComm("X", 2.5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.MComm("X", 2.5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;MComm(L"X", 2.5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.MSet(System.Int32,System.Double,System.Int32)">
            <summary>Generates an open-loop current command.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Current">The current to output, in amperes.</param><param name="Angle">The electrical angle, in degrees. 360 degrees is one electrical commutation cycle of the motor.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MSET_Command.html">MSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.MSet(0, 2.5, 60);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.MSet(0, 2.5, 60)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;MSet(0, 2.5, 60);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.MSet(System.String,System.Double,System.Int32)">
            <summary>Generates an open-loop current command.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Current">The current to output, in amperes.</param><param name="Angle">The electrical angle, in degrees. 360 degrees is one electrical commutation cycle of the motor.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MSET_Command.html">MSET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.MSet("X", 2.5, 60);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.MSet("X", 2.5, 60)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;MSet(L"X", 2.5, 60);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.Oscillate(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>Generates sinusoidal oscillation on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Distance">Defines the peak-to-peak displacement of the motion. The amplitude of the oscillate sequence is 1/2 of the peak-to-peak displacement. The arithmetic sign specifies the initial direction of the motion.</param><param name="Frequency">The frequency of oscillation, in hertz. You must specify a frequency that is greater than 0 Hz and less than or equal to 500 Hz. Because the controller generates sinusoidal positions and velocities at a 1 kHz rate, less accurate motion might occur if you specify higher oscillation frequencies to this command.</param><param name="Cycles">The number of sinusoidal cycles to generate during the oscillate sequence. Each cycle is one full sinusoidal cycle.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/OSCILLATE_Command.html">OSCILLATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.Oscillate(0, 50000, 1.0, 2);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.Oscillate(0, 50000, 1.0, 2)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;Oscillate(0, 50000, 1.0, 2);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.Oscillate(System.String,System.Double,System.Double,System.Int32)">
            <summary>Generates sinusoidal oscillation on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Distance">Defines the peak-to-peak displacement of the motion. The amplitude of the oscillate sequence is 1/2 of the peak-to-peak displacement. The arithmetic sign specifies the initial direction of the motion.</param><param name="Frequency">The frequency of oscillation, in hertz. You must specify a frequency that is greater than 0 Hz and less than or equal to 500 Hz. Because the controller generates sinusoidal positions and velocities at a 1 kHz rate, less accurate motion might occur if you specify higher oscillation frequencies to this command.</param><param name="Cycles">The number of sinusoidal cycles to generate during the oscillate sequence. Each cycle is one full sinusoidal cycle.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/OSCILLATE_Command.html">OSCILLATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.Oscillate("X", 50000, 1.0, 2);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.Oscillate("X", 50000, 1.0, 2)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;Oscillate(L"X", 50000, 1.0, 2);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.Oscillate(System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>Generates sinusoidal oscillation on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Distance">Defines the peak-to-peak displacement of the motion. The amplitude of the oscillate sequence is 1/2 of the peak-to-peak displacement. The arithmetic sign specifies the initial direction of the motion.</param><param name="Frequency">The frequency of oscillation, in hertz. You must specify a frequency that is greater than 0 Hz and less than or equal to 500 Hz. Because the controller generates sinusoidal positions and velocities at a 1 kHz rate, less accurate motion might occur if you specify higher oscillation frequencies to this command.</param><param name="Cycles">The number of sinusoidal cycles to generate during the oscillate sequence. Each cycle is one full sinusoidal cycle.</param><param name="NumIterations">The number of oscillate sequences to execute. After the controller executes the first oscillate sequence, the following changes occur for the subsequent execution of each of the other sequences. The amplitude of the motion decreases to 1/4 of its previous value, the frequency is doubled, and the number of cycles is doubled. If you do not specify a value for this argument, it defaults to a value of one.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/OSCILLATE_Command.html">OSCILLATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.Oscillate(0, 50000, 1.0, 2, 3);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.Oscillate(0, 50000, 1.0, 2, 3)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;Oscillate(0, 50000, 1.0, 2, 3);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.Oscillate(System.String,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>Generates sinusoidal oscillation on an axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Distance">Defines the peak-to-peak displacement of the motion. The amplitude of the oscillate sequence is 1/2 of the peak-to-peak displacement. The arithmetic sign specifies the initial direction of the motion.</param><param name="Frequency">The frequency of oscillation, in hertz. You must specify a frequency that is greater than 0 Hz and less than or equal to 500 Hz. Because the controller generates sinusoidal positions and velocities at a 1 kHz rate, less accurate motion might occur if you specify higher oscillation frequencies to this command.</param><param name="Cycles">The number of sinusoidal cycles to generate during the oscillate sequence. Each cycle is one full sinusoidal cycle.</param><param name="NumIterations">The number of oscillate sequences to execute. After the controller executes the first oscillate sequence, the following changes occur for the subsequent execution of each of the other sequences. The amplitude of the motion decreases to 1/4 of its previous value, the frequency is doubled, and the number of cycles is doubled. If you do not specify a value for this argument, it defaults to a value of one.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/OSCILLATE_Command.html">OSCILLATE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.Oscillate("X", 50000, 1.0, 2, 3);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.Oscillate("X", 50000, 1.0, 2, 3)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;Oscillate(L"X", 50000, 1.0, 2, 3);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.SetGain(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sets four or nine servo loop gains at the same time.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="GainKpos">The position loop gain for the axis.</param><param name="GainKi">The integral gain of the velocity loop for the axis.</param><param name="GainKp">The proportional gain of the velocity loop for the axis.</param><param name="GainAff">The acceleration feed forward gain.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SET GAIN_Command.html">SET GAIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.SetGain(0, 48, 1200, 100000, 150000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.SetGain(0, 48, 1200, 100000, 150000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;SetGain(0, 48, 1200, 100000, 150000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.SetGain(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sets four or nine servo loop gains at the same time.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="GainKpos">The position loop gain for the axis.</param><param name="GainKi">The integral gain of the velocity loop for the axis.</param><param name="GainKp">The proportional gain of the velocity loop for the axis.</param><param name="GainAff">The acceleration feed forward gain.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SET GAIN_Command.html">SET GAIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.SetGain("X", 48, 1200, 100000, 150000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.SetGain("X", 48, 1200, 100000, 150000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;SetGain(L"X", 48, 1200, 100000, 150000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.SetGain(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sets four or nine servo loop gains at the same time.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="GainKpos">The position loop gain for the axis.</param><param name="GainKi">The integral gain of the velocity loop for the axis.</param><param name="GainKp">The proportional gain of the velocity loop for the axis.</param><param name="GainAff">The acceleration feed forward gain.</param><param name="GainKd1">The derivative gain of the primary (position) loop.</param><param name="GainKpi">The integral gain of the position loop.</param><param name="GainKp1">The proportional gain of the primary (position) loop.</param><param name="GainVff">The velocity feed forward gain.</param><param name="GainPff">The position feed forward gain.</param><param name="GainDff">The acceleration feed forward gain that will be used when an axis is decelerating.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SET GAIN_Command.html">SET GAIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.SetGain(0, 48, 1200, 100000, 150000, 0, 0, 0, 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.SetGain(0, 48, 1200, 100000, 150000, 0, 0, 0, 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;SetGain(0, 48, 1200, 100000, 150000, 0, 0, 0, 0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TuningCommands.SetGain(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sets four or nine servo loop gains at the same time.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="GainKpos">The position loop gain for the axis.</param><param name="GainKi">The integral gain of the velocity loop for the axis.</param><param name="GainKp">The proportional gain of the velocity loop for the axis.</param><param name="GainAff">The acceleration feed forward gain.</param><param name="GainKd1">The derivative gain of the primary (position) loop.</param><param name="GainKpi">The integral gain of the position loop.</param><param name="GainKp1">The proportional gain of the primary (position) loop.</param><param name="GainVff">The velocity feed forward gain.</param><param name="GainPff">The position feed forward gain.</param><param name="GainDff">The acceleration feed forward gain that will be used when an axis is decelerating.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/SET GAIN_Command.html">SET GAIN</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tuning.SetGain("X", 48, 1200, 100000, 150000, 0, 0, 0, 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tuning.SetGain("X", 48, 1200, 100000, 150000, 0, 0, 0, 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tuning-&gt;SetGain(L"X", 48, 1200, 100000, 150000, 0, 0, 0, 0, 0, 0);
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.TasksCommands">
            <summary>Contains the Tasks Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.TasksCommands.MFO(System.Double)">
            <summary>Sets the MFO (manual feedrate override) for a task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Value">The MFO percentage to set.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MFO_Command.html">MFO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tasks.MFO(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tasks.MFO(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tasks-&gt;MFO(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TasksCommands.MFO(Aerotech.A3200.TaskId,System.Double)">
            <summary>Sets the MFO (manual feedrate override) for a task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Task">The task on which to set the MFO.</param><param name="Value">The MFO percentage to set.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MFO_Command.html">MFO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tasks.MFO(TaskId.T01, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tasks.MFO(TaskId.T01, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tasks-&gt;MFO(TaskId::T01, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TasksCommands.UserTaskError(System.Int32)">
            <summary>Sets a user-defined task error on a task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="ErrorLocation">The error location to set as defined in the user-defined messages text file.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/USERTASKERROR_Command.html">USERTASKERROR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tasks.UserTaskError(1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tasks.UserTaskError(1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tasks-&gt;UserTaskError(1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TasksCommands.UserTaskError(Aerotech.A3200.TaskId,System.Int32)">
            <summary>Sets a user-defined task error on a task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Task">The task on which to set the user-defined task error.</param><param name="ErrorLocation">The error location to set as defined in the user-defined messages text file.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/USERTASKERROR_Command.html">USERTASKERROR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tasks.UserTaskError(TaskId.T01, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tasks.UserTaskError(TaskId.T01, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tasks-&gt;UserTaskError(TaskId::T01, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TasksCommands.UserTaskWarning(System.Int32)">
            <summary>Sets a user-defined task warning on a task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="WarningLocation">The warning location to set as defined in the user-defined messages text file.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/USERTASKWARNING_Command.html">USERTASKWARNING</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tasks.UserTaskWarning(1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tasks.UserTaskWarning(1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tasks-&gt;UserTaskWarning(1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.TasksCommands.UserTaskWarning(Aerotech.A3200.TaskId,System.Int32)">
            <summary>Sets a user-defined task warning on a task.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Task">The task on which to set the user-defined task warning.</param><param name="WarningLocation">The warning location to set as defined in the user-defined messages text file.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/USERTASKWARNING_Command.html">USERTASKWARNING</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Tasks.UserTaskWarning(TaskId.T01, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Tasks.UserTaskWarning(TaskId.T01, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Tasks-&gt;UserTaskWarning(TaskId::T01, 1);
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.AdvancedCommands">
            <summary>Contains the Advanced Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedCommands.CheckPassword(System.String)">
            <summary>Determines if the specified password matches the password set on the controller.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Password">Password to compare to the password stored on the controller.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CHECKPASSWORD_Command.html">CHECKPASSWORD</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.CheckPassword("");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.CheckPassword("")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;CheckPassword(L"");
</code></example>
        </member>
        <member name="P:Aerotech.A3200.Commands.AdvancedCommands.Analog">
            <summary>Contains the Analog Commands</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.AdvancedAnalogCommands">
            <summary>Contains the Analog Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogTrack(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>Configures the system to continuously set an analog output to be a real-time internal servo loop value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogOutput">The analog output to which the value is sent.</param><param name="ServoValue">Specifies the servo loop value that is tracked.</param><param name="ScaleFactor">
                
                   The value that you use to change the servo loop units to the analog output voltage.
                  
              </param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG TRACK_Command.html">ANALOG TRACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogTrack(0, 0, 5, 0.33);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogTrack(0, 0, 5, 0.33)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogTrack(0, 0, 5, 0.33);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogTrack(System.String,System.Int32,System.Int32,System.Double)">
            <summary>Configures the system to continuously set an analog output to be a real-time internal servo loop value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogOutput">The analog output to which the value is sent.</param><param name="ServoValue">Specifies the servo loop value that is tracked.</param><param name="ScaleFactor">
                
                   The value that you use to change the servo loop units to the analog output voltage.
                  
              </param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG TRACK_Command.html">ANALOG TRACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogTrack("X", 0, 5, 0.33);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogTrack("X", 0, 5, 0.33)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogTrack(L"X", 0, 5, 0.33);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogTrack(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Configures the system to continuously set an analog output to be a real-time internal servo loop value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogOutput">The analog output to which the value is sent.</param><param name="ServoValue">Specifies the servo loop value that is tracked.</param><param name="ScaleFactor">
                
                   The value that you use to change the servo loop units to the analog output voltage.
                  
              </param><param name="OffsetValue">This value is applied with the tracking value to the analog output. Use this argument if you want to track position on a stage where the position can never be negative. The units are volts.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG TRACK_Command.html">ANALOG TRACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogTrack(0, 0, 5, 0.33, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogTrack(0, 0, 5, 0.33, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogTrack(0, 0, 5, 0.33, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogTrack(System.String,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Configures the system to continuously set an analog output to be a real-time internal servo loop value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogOutput">The analog output to which the value is sent.</param><param name="ServoValue">Specifies the servo loop value that is tracked.</param><param name="ScaleFactor">
                
                   The value that you use to change the servo loop units to the analog output voltage.
                  
              </param><param name="OffsetValue">This value is applied with the tracking value to the analog output. Use this argument if you want to track position on a stage where the position can never be negative. The units are volts.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG TRACK_Command.html">ANALOG TRACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogTrack("X", 0, 5, 0.33, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogTrack("X", 0, 5, 0.33, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogTrack(L"X", 0, 5, 0.33, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogTrack(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Configures the system to continuously set an analog output to be a real-time internal servo loop value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogOutput">The analog output to which the value is sent.</param><param name="ServoValue">Specifies the servo loop value that is tracked.</param><param name="ScaleFactor">
                
                   The value that you use to change the servo loop units to the analog output voltage.
                  
              </param><param name="OffsetValue">This value is applied with the tracking value to the analog output. Use this argument if you want to track position on a stage where the position can never be negative. The units are volts.</param><param name="MinVoltage">
                  
                      Specifies the minimum voltage for the analog output.
                    
                </param><param name="MaxVoltage">
                  
                      Specifies the maximum voltage for the analog output.
                    
                </param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG TRACK_Command.html">ANALOG TRACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogTrack(0, 0, 5, 0.33, 0, -10, 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogTrack(0, 0, 5, 0.33, 0, -10, 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogTrack(0, 0, 5, 0.33, 0, -10, 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogTrack(System.String,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Configures the system to continuously set an analog output to be a real-time internal servo loop value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogOutput">The analog output to which the value is sent.</param><param name="ServoValue">Specifies the servo loop value that is tracked.</param><param name="ScaleFactor">
                
                   The value that you use to change the servo loop units to the analog output voltage.
                  
              </param><param name="OffsetValue">This value is applied with the tracking value to the analog output. Use this argument if you want to track position on a stage where the position can never be negative. The units are volts.</param><param name="MinVoltage">
                  
                      Specifies the minimum voltage for the analog output.
                    
                </param><param name="MaxVoltage">
                  
                      Specifies the maximum voltage for the analog output.
                    
                </param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG TRACK_Command.html">ANALOG TRACK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogTrack("X", 0, 5, 0.33, 0, -10, 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogTrack("X", 0, 5, 0.33, 0, -10, 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogTrack(L"X", 0, 5, 0.33, 0, -10, 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogControlOn(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Configures an axis to generate its position command based on an analog input signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogInput">The analog input to use as the input to this command.</param><param name="ScaleFactor">The value that you use to scale the analog input voltage. The units are user units per volt.</param><param name="OffsetValue">The value that specifies the voltage offset for the analog input signal. The units are volts.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG CONTROL ON_OFF_Command.html">ANALOG CONTROL ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogControlOn(0, 0, 0.33, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogControlOn(0, 0, 0.33, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogControlOn(0, 0, 0.33, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogControlOn(System.String,System.Int32,System.Double,System.Double)">
            <summary>Configures an axis to generate its position command based on an analog input signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogInput">The analog input to use as the input to this command.</param><param name="ScaleFactor">The value that you use to scale the analog input voltage. The units are user units per volt.</param><param name="OffsetValue">The value that specifies the voltage offset for the analog input signal. The units are volts.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG CONTROL ON_OFF_Command.html">ANALOG CONTROL ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogControlOn("X", 0, 0.33, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogControlOn("X", 0, 0.33, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogControlOn(L"X", 0, 0.33, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogControlOn(System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Configures an axis to generate its position command based on an analog input signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogInput">The analog input to use as the input to this command.</param><param name="ScaleFactor">The value that you use to scale the analog input voltage. The units are user units per volt.</param><param name="OffsetValue">The value that specifies the voltage offset for the analog input signal. The units are volts.</param><param name="SpeedValue">Specifies the maximum speed at which the controller commands the axis to move while the axis is under the control of this command. The units are user units per second. If you do not specify this argument or if you specify a value of 0 for this argument, then the controller does not limit the maximum speed.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG CONTROL ON_OFF_Command.html">ANALOG CONTROL ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogControlOn(0, 0, 0.33, 0, 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogControlOn(0, 0, 0.33, 0, 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogControlOn(0, 0, 0.33, 0, 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogControlOn(System.String,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Configures an axis to generate its position command based on an analog input signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="AnalogInput">The analog input to use as the input to this command.</param><param name="ScaleFactor">The value that you use to scale the analog input voltage. The units are user units per volt.</param><param name="OffsetValue">The value that specifies the voltage offset for the analog input signal. The units are volts.</param><param name="SpeedValue">Specifies the maximum speed at which the controller commands the axis to move while the axis is under the control of this command. The units are user units per second. If you do not specify this argument or if you specify a value of 0 for this argument, then the controller does not limit the maximum speed.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG CONTROL ON_OFF_Command.html">ANALOG CONTROL ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogControlOn("X", 0, 0.33, 0, 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogControlOn("X", 0, 0.33, 0, 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogControlOn(L"X", 0, 0.33, 0, 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogControlOff(System.Int32)">
            <summary>Configures an axis to generate its position command based on an analog input signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG CONTROL ON_OFF_Command.html">ANALOG CONTROL ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogControlOff(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogControlOff(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogControlOff(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.AdvancedAnalogCommands.AnalogControlOff(System.String)">
            <summary>Configures an axis to generate its position command based on an analog input signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ANALOG CONTROL ON_OFF_Command.html">ANALOG CONTROL ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Advanced.Analog.AnalogControlOff("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Advanced.Analog.AnalogControlOff("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Advanced-&gt;Analog-&gt;AnalogControlOff(L"X");
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.GearingCommands">
            <summary>Contains the Gearing Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearSetup(System.Int32,System.Int32,Aerotech.A3200.Commands.GearingTrackingMode)">
            <summary>Configures the master and slave relationship for gearing.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="MasterAxis">The axis that is set as the master axis.</param><param name="GearMode">The master axis signal from which the slave axis is geared.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR MASTERCONFIG_Command.html">GEAR MASTERCONFIG</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearSetup(1, 1, GearingTrackingMode.PositionFeedback);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearSetup(1, 1, GearingTrackingMode.PositionFeedback)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearSetup(1, 1, GearingTrackingMode::PositionFeedback);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearSetup(System.String,System.String,Aerotech.A3200.Commands.GearingTrackingMode)">
            <summary>Configures the master and slave relationship for gearing.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="MasterAxis">The axis that is set as the master axis.</param><param name="GearMode">The master axis signal from which the slave axis is geared.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR MASTERCONFIG_Command.html">GEAR MASTERCONFIG</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearSetup("Y", "Y", GearingTrackingMode.PositionFeedback);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearSetup("Y", "Y", GearingTrackingMode.PositionFeedback)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearSetup("Y", "Y", GearingTrackingMode::PositionFeedback);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearRatio(System.Int32,System.Int32,System.Int32)">
            <summary>Defines the ratio of movement between the master axis and slave axis. The slave axis moves SlaveValue counts for every MasterValue counts.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="SlaveValue">The number of counts the slave axis moves for every MasterValue counts of master axis motion.</param><param name="MasterValue">The number of counts of master axis motion for which the slave axis moves SlaveValue counts.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR RATIO_Command.html">GEAR RATIO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearRatio(1, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearRatio(1, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearRatio(1, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearRatio(System.String,System.Int32,System.Int32)">
            <summary>Defines the ratio of movement between the master axis and slave axis. The slave axis moves SlaveValue counts for every MasterValue counts.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="SlaveValue">The number of counts the slave axis moves for every MasterValue counts of master axis motion.</param><param name="MasterValue">The number of counts of master axis motion for which the slave axis moves SlaveValue counts.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR RATIO_Command.html">GEAR RATIO</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearRatio("Y", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearRatio("Y", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearRatio("Y", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearOn(System.Int32)">
            <summary>Connects or disconnects the slave axis to or from the master axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR ON_OFF_Command.html">GEAR ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearOn(1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearOn(1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearOn(1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearOn(System.String)">
            <summary>Connects or disconnects the slave axis to or from the master axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR ON_OFF_Command.html">GEAR ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearOn("Y");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearOn("Y")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearOn("Y");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearOnFiltered(System.Int32)">
            <summary>Connects or disconnects the slave axis to or from the master axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR ON_OFF_Command.html">GEAR ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearOnFiltered(1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearOnFiltered(1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearOnFiltered(1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearOnFiltered(System.String)">
            <summary>Connects or disconnects the slave axis to or from the master axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR ON_OFF_Command.html">GEAR ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearOnFiltered("Y");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearOnFiltered("Y")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearOnFiltered("Y");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearOff(System.Int32)">
            <summary>Connects or disconnects the slave axis to or from the master axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR ON_OFF_Command.html">GEAR ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearOff(1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearOff(1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearOff(1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.GearingCommands.GearOff(System.String)">
            <summary>Connects or disconnects the slave axis to or from the master axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/GEAR ON_OFF_Command.html">GEAR ON/OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Gearing.GearOff("Y");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Gearing.GearOff("Y")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Gearing-&gt;GearOff("Y");
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.DataAcquisitionCommands">
            <summary>Contains the DataAcquisition Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.ArraySetup(System.Int32,System.Int32,System.Int32)">
            <summary>Configures the location in the drive array space where the captured data is stored and the number of data elements to collect. Enables data collection.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="ArrayStart">The starting location where captured data is stored on the drive array. Each trigger event stores its data in the next sequential array location. If the subsequent index exceeds the size of the drive array, the index resets to zero so that collection can continue.</param><param name="NumberOfElements">The number of elements to be collected. After the specified number of elements are collected, data acquisition turns off automatically. On multi-axis drives, more than one element can be collected at each trigger event. Thus, this argument must specify the number of data elements to store, not the number of trigger events.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DATAACQ ARRAY_Command.html">DATAACQ ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.ArraySetup(0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.ArraySetup(0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArraySetup(0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.ArraySetup(System.String,System.Int32,System.Int32)">
            <summary>Configures the location in the drive array space where the captured data is stored and the number of data elements to collect. Enables data collection.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="ArrayStart">The starting location where captured data is stored on the drive array. Each trigger event stores its data in the next sequential array location. If the subsequent index exceeds the size of the drive array, the index resets to zero so that collection can continue.</param><param name="NumberOfElements">The number of elements to be collected. After the specified number of elements are collected, data acquisition turns off automatically. On multi-axis drives, more than one element can be collected at each trigger event. Thus, this argument must specify the number of data elements to store, not the number of trigger events.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DATAACQ ARRAY_Command.html">DATAACQ ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.ArraySetup("X", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.ArraySetup("X", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArraySetup(L"X", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.ArrayRead(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Transfers drive array values into the specified controller array variables.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="ControllerVariable">The controller variable on which to write data that is read from the drive array.</param><param name="StartIndex">The starting index of the drive array from which the data is read.</param><param name="NumberOfElements">The number of elements to be read.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ARRAY READ_Command.html">ARRAY READ</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.ArrayRead(0, "0", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.ArrayRead(0, "0", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArrayRead(0, L"0", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.ArrayRead(System.String,System.String,System.Int32,System.Int32)">
            <summary>Transfers drive array values into the specified controller array variables.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="ControllerVariable">The controller variable on which to write data that is read from the drive array.</param><param name="StartIndex">The starting index of the drive array from which the data is read.</param><param name="NumberOfElements">The number of elements to be read.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ARRAY READ_Command.html">ARRAY READ</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.ArrayRead("X", "0", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.ArrayRead("X", "0", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArrayRead(L"X", L"0", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.ArrayReadFast(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Transfers drive array values into the specified controller array variables.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="ControllerVariable">The controller variable on which to write data that is read from the drive array.</param><param name="StartIndex">The starting index of the drive array from which the data is read.</param><param name="NumberOfElements">The number of elements to be read.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ARRAY READ_Command.html">ARRAY READ</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.ArrayReadFast(0, "0", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.ArrayReadFast(0, "0", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArrayReadFast(0, L"0", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.ArrayReadFast(System.String,System.String,System.Int32,System.Int32)">
            <summary>Transfers drive array values into the specified controller array variables.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="ControllerVariable">The controller variable on which to write data that is read from the drive array.</param><param name="StartIndex">The starting index of the drive array from which the data is read.</param><param name="NumberOfElements">The number of elements to be read.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ARRAY READ_Command.html">ARRAY READ</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.ArrayReadFast("X", "0", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.ArrayReadFast("X", "0", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;ArrayReadFast(L"X", L"0", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.Input(System.Int32,System.Int32)">
            <summary>Specifies the data element collected when a trigger occurs.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="SourceSignal">The source signal to be collected.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DATAACQ INPUT_Command.html">DATAACQ INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.Input(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.Input(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;Input(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.Input(System.String,System.Int32)">
            <summary>Specifies the data element collected when a trigger occurs.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="SourceSignal">The source signal to be collected.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DATAACQ INPUT_Command.html">DATAACQ INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.Input("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.Input("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;Input(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.Trigger(System.Int32,System.Int32)">
            <summary>Specifies which signal is monitored to collect data.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TriggerSignal">The signal to be triggered on.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DATAACQ TRIGGER_Command.html">DATAACQ TRIGGER</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.Trigger(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.Trigger(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;Trigger(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.Trigger(System.String,System.Int32)">
            <summary>Specifies which signal is monitored to collect data.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TriggerSignal">The signal to be triggered on.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DATAACQ TRIGGER_Command.html">DATAACQ TRIGGER</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.Trigger("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.Trigger("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;Trigger(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.Off(System.Int32)">
            <summary>Use this command to turn data acquisition off. All previously specified DATAACQ command configurations are cleared and must be re-specified if required.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DATAACQ OFF_Command.html">DATAACQ OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.Off(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.Off(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;Off(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.DataAcquisitionCommands.Off(System.String)">
            <summary>Use this command to turn data acquisition off. All previously specified DATAACQ command configurations are cleared and must be re-specified if required.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/DATAACQ OFF_Command.html">DATAACQ OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.DataAcquisition.Off("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.DataAcquisition.Off("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;DataAcquisition-&gt;Off(L"X");
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.CammingCommands">
            <summary>Contains the Camming Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.CammingCommands.CamSync(System.Int32,System.Int32,Aerotech.A3200.Commands.CammingSyncMode)">
            <summary>Starts synchronizing the master axis to the slave axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="TableNumber">The table number, from 0 to 99.</param><param name="SyncMode">The synchronization mode to use for camming.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CAMSYNC_Command.html">CAMSYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Camming.CamSync(1, 0, CammingSyncMode.Relative);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Camming.CamSync(1, 0, CammingSyncMode.Relative)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Camming-&gt;CamSync(1, 0, CammingSyncMode::Relative);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.CammingCommands.CamSync(System.String,System.Int32,Aerotech.A3200.Commands.CammingSyncMode)">
            <summary>Starts synchronizing the master axis to the slave axis.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="TableNumber">The table number, from 0 to 99.</param><param name="SyncMode">The synchronization mode to use for camming.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/CAMSYNC_Command.html">CAMSYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Camming.CamSync("Y", 0, CammingSyncMode.Relative);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Camming.CamSync("Y", 0, CammingSyncMode.Relative)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Camming-&gt;CamSync("Y", 0, CammingSyncMode::Relative);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.CammingCommands.LoadCamTable(System.Int32,System.Int32,System.Int32,Aerotech.A3200.Commands.CammingInterpolationType,Aerotech.A3200.Commands.CammingTrackingMode,System.String,System.Boolean)">
            <summary>Loads a camming table from a file on the PC.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="MasterAxis">The axis that is set as the master axis.</param><param name="TableNumber">The table number, ranging from 0 to 99. Specify the same table number in the corresponding subsequent CAMSYNC command.</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="InterpolationType">The interpolation mode to use when calculating points between two points in the table. Set to 0 for linear splining or 1 for cubic splining.</param><param name="TrackingMode">If the master axis is a real axis, use this argument to specify the tracking mode. Set this argument to 0 to have the slave track the master position feedback. Set it to 1 to have the slave track the master position command. Set it to 2 to have the slave track the master auxiliary encoder channel.</param><param name="FileName">The name and path of the file that contains the cam table.</param><param name="Wrap">Whether to wrap the table or not.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LOADCAMTABLE_Command.html">LOADCAMTABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Camming.LoadCamTable(0, 0, 1, CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, "data.cam", true);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Camming.LoadCamTable(0, 0, 1, CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, "data.cam", True)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Camming-&gt;LoadCamTable(0, 0, 1, CammingInterpolationType::Linear, CammingTrackingMode::PositionFeedback, L"data.cam", true);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.CammingCommands.LoadCamTable(System.String,System.Int32,System.String,Aerotech.A3200.Commands.CammingInterpolationType,Aerotech.A3200.Commands.CammingTrackingMode,System.String,System.Boolean)">
            <summary>Loads a camming table from a file on the PC.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="MasterAxis">The axis that is set as the master axis.</param><param name="TableNumber">The table number, ranging from 0 to 99. Specify the same table number in the corresponding subsequent CAMSYNC command.</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="InterpolationType">The interpolation mode to use when calculating points between two points in the table. Set to 0 for linear splining or 1 for cubic splining.</param><param name="TrackingMode">If the master axis is a real axis, use this argument to specify the tracking mode. Set this argument to 0 to have the slave track the master position feedback. Set it to 1 to have the slave track the master position command. Set it to 2 to have the slave track the master auxiliary encoder channel.</param><param name="FileName">The name and path of the file that contains the cam table.</param><param name="Wrap">Whether to wrap the table or not.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LOADCAMTABLE_Command.html">LOADCAMTABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Camming.LoadCamTable("X", 0, "Y", CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, "data.cam", true);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Camming.LoadCamTable("X", 0, "Y", CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, "data.cam", True)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Camming-&gt;LoadCamTable("X", 0, "Y", CammingInterpolationType::Linear, CammingTrackingMode::PositionFeedback, L"data.cam", true);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.CammingCommands.LoadCamVariablesUnits(System.Int32,System.Int32,System.Int32,Aerotech.A3200.Commands.CammingInterpolationType,Aerotech.A3200.Commands.CammingTrackingMode,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>Uses global variables as the cam table.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="MasterAxis">The axis that is set as the master axis.</param><param name="TableNumber">The table number, from 0 to 99.</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="InterpolationType">The interpolation mode to use for camming. Set to 0 for linear splining or 1 for cubic splining.</param><param name="TrackingMode">Set to 0 to have the slave axis track the position feedback of the master axis. Set to 1 to have the slave axis track the master axis position. Set to 2 to have the slave axis track the auxiliary encoder channel of the master axis.</param><param name="MasterStart">The master axis starting position.</param><param name="MasterDelta">The master axis position delta.</param><param name="VariableStart">The variable where the table starts.</param><param name="VariableNumber">The number of points in the variables to read.</param><param name="Wrap">Whether to wrap the table or not.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LOADCAMVAR_Command.html">LOADCAMVAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Camming.LoadCamVariablesUnits(0, 0, 1, CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, 0, 0, 0, 0, true);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Camming.LoadCamVariablesUnits(0, 0, 1, CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, 0, 0, 0, 0, True)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Camming-&gt;LoadCamVariablesUnits(0, 0, 1, CammingInterpolationType::Linear, CammingTrackingMode::PositionFeedback, 0, 0, 0, 0, true);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.CammingCommands.LoadCamVariablesUnits(System.String,System.Int32,System.String,Aerotech.A3200.Commands.CammingInterpolationType,Aerotech.A3200.Commands.CammingTrackingMode,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>Uses global variables as the cam table.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="MasterAxis">The axis that is set as the master axis.</param><param name="TableNumber">The table number, from 0 to 99.</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="InterpolationType">The interpolation mode to use for camming. Set to 0 for linear splining or 1 for cubic splining.</param><param name="TrackingMode">Set to 0 to have the slave axis track the position feedback of the master axis. Set to 1 to have the slave axis track the master axis position. Set to 2 to have the slave axis track the auxiliary encoder channel of the master axis.</param><param name="MasterStart">The master axis starting position.</param><param name="MasterDelta">The master axis position delta.</param><param name="VariableStart">The variable where the table starts.</param><param name="VariableNumber">The number of points in the variables to read.</param><param name="Wrap">Whether to wrap the table or not.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LOADCAMVAR_Command.html">LOADCAMVAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Camming.LoadCamVariablesUnits("X", 0, "Y", CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, 0, 0, 0, 0, true);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Camming.LoadCamVariablesUnits("X", 0, "Y", CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, 0, 0, 0, 0, True)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Camming-&gt;LoadCamVariablesUnits("X", 0, "Y", CammingInterpolationType::Linear, CammingTrackingMode::PositionFeedback, 0, 0, 0, 0, true);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.CammingCommands.LoadCamVariablesCounts(System.Int32,System.Int32,System.Int32,Aerotech.A3200.Commands.CammingInterpolationType,Aerotech.A3200.Commands.CammingTrackingMode,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>Uses global variables as the cam table.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="MasterAxis">The axis that is set as the master axis.</param><param name="TableNumber">The table number, from 0 to 99.</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="InterpolationType">The interpolation mode to use for camming. Set to 0 for linear splining or 1 for cubic splining.</param><param name="TrackingMode">Set to 0 to have the slave axis track the position feedback of the master axis. Set to 1 to have the slave axis track the master axis position. Set to 2 to have the slave axis track the auxiliary encoder channel of the master axis.</param><param name="MasterStart">The master axis starting position.</param><param name="MasterDelta">The master axis position delta.</param><param name="VariableStart">The variable where the table starts.</param><param name="VariableNumber">The number of points in the variables to read.</param><param name="Wrap">Whether to wrap the table or not.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LOADCAMVAR_Command.html">LOADCAMVAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Camming.LoadCamVariablesCounts(0, 0, 1, CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, 0, 0, 0, 0, true);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Camming.LoadCamVariablesCounts(0, 0, 1, CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, 0, 0, 0, 0, True)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Camming-&gt;LoadCamVariablesCounts(0, 0, 1, CammingInterpolationType::Linear, CammingTrackingMode::PositionFeedback, 0, 0, 0, 0, true);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.CammingCommands.LoadCamVariablesCounts(System.String,System.Int32,System.String,Aerotech.A3200.Commands.CammingInterpolationType,Aerotech.A3200.Commands.CammingTrackingMode,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>Uses global variables as the cam table.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="MasterAxis">The axis that is set as the master axis.</param><param name="TableNumber">The table number, from 0 to 99.</param><param name="SlaveAxis">The axis that is set as the slave axis.</param><param name="InterpolationType">The interpolation mode to use for camming. Set to 0 for linear splining or 1 for cubic splining.</param><param name="TrackingMode">Set to 0 to have the slave axis track the position feedback of the master axis. Set to 1 to have the slave axis track the master axis position. Set to 2 to have the slave axis track the auxiliary encoder channel of the master axis.</param><param name="MasterStart">The master axis starting position.</param><param name="MasterDelta">The master axis position delta.</param><param name="VariableStart">The variable where the table starts.</param><param name="VariableNumber">The number of points in the variables to read.</param><param name="Wrap">Whether to wrap the table or not.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/LOADCAMVAR_Command.html">LOADCAMVAR</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Camming.LoadCamVariablesCounts("X", 0, "Y", CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, 0, 0, 0, 0, true);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Camming.LoadCamVariablesCounts("X", 0, "Y", CammingInterpolationType.Linear, CammingTrackingMode.PositionFeedback, 0, 0, 0, 0, True)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Camming-&gt;LoadCamVariablesCounts("X", 0, "Y", CammingInterpolationType::Linear, CammingTrackingMode::PositionFeedback, 0, 0, 0, 0, true);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.CammingCommands.FreeCamTable(System.Int32)">
            <summary>Frees a cam table from the controller memory.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="TableNumber">The table number, from 0 to 99.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/FREECAMTABLE_Command.html">FREECAMTABLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Camming.FreeCamTable(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Camming.FreeCamTable(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Camming-&gt;FreeCamTable(0);
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.PSOCommands">
            <summary>Contains the PSO Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.Array(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Sends data into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="ControllerVariable">The name of the first controller variable to write to the drive array.</param><param name="StartIndex">The starting index of the drive array where controller variables are written.</param><param name="NumberOfElements">The number of elements to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ARRAY WRITE_Command.html">ARRAY WRITE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.Array(0, "$global[0]", 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.Array(0, "$global[0]", 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;Array(0, L"$global[0]", 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.Array(System.String,System.String,System.Int32,System.Int32)">
            <summary>Sends data into the PSO array.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="ControllerVariable">The name of the first controller variable to write to the drive array.</param><param name="StartIndex">The starting index of the drive array where controller variables are written.</param><param name="NumberOfElements">The number of elements to send.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/ARRAY WRITE_Command.html">ARRAY WRITE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.Array("X", "$global[0]", 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.Array("X", "$global[0]", 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;Array(L"X", L"$global[0]", 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.Control(System.Int32,Aerotech.A3200.Commands.PsoMode)">
            <summary>Enables and disables the PSO hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">The mode of operation of the PSO hardware.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOCONTROL_Command.html">PSOCONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.Control(0, PsoMode.Reset);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.Control(0, PsoMode.Reset)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;Control(0, PsoMode::Reset);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.Control(System.String,Aerotech.A3200.Commands.PsoMode)">
            <summary>Enables and disables the PSO hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">The mode of operation of the PSO hardware.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOCONTROL_Command.html">PSOCONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.Control("X", PsoMode.Reset);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.Control("X", PsoMode.Reset)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;Control(L"X", PsoMode::Reset);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.DistanceArray(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The element of the array containing the first incremental firing distance.</param><param name="NumberOfFiringEvents">The number of firing events.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.DistanceArray(0, 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.DistanceArray(0, 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;DistanceArray(0, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.DistanceArray(System.String,System.Int32,System.Int32)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The element of the array containing the first incremental firing distance.</param><param name="NumberOfFiringEvents">The number of firing events.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.DistanceArray("X", 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.DistanceArray("X", 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;DistanceArray(L"X", 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.DistanceFixed(System.Int32,System.Double)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="FireDistance">The distance an axis must travel before a firing event triggers the pulse generator.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.DistanceFixed(0, 20);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.DistanceFixed(0, 20)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;DistanceFixed(0, 20);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.DistanceFixed(System.String,System.Double)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="FireDistance">The distance an axis must travel before a firing event triggers the pulse generator.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.DistanceFixed("X", 20);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.DistanceFixed("X", 20)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;DistanceFixed(L"X", 20);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.DistanceOff(System.Int32)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.DistanceOff(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.DistanceOff(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;DistanceOff(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.DistanceOff(System.String)">
            <summary>Sets the distance to travel between firing events.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSODISTANCE_Command.html">PSODISTANCE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.DistanceOff("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.DistanceOff("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;DistanceOff(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulse(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE_Command.html">PSOOUTPUT PULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulse(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulse(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulse(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE_Command.html">PSOOUTPUT PULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulse("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulse("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulse(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE_Command.html">PSOOUTPUT PULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulse(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulse(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulse(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE_Command.html">PSOOUTPUT PULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulse("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulse("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulse2WindowMask(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE2 WINDOW MASK_Command.html">PSOOUTPUT PULSE2 WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulse2WindowMask(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulse2WindowMask(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse2WindowMask(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulse2WindowMask(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE2 WINDOW MASK_Command.html">PSOOUTPUT PULSE2 WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulse2WindowMask("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulse2WindowMask("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse2WindowMask(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulse2WindowMask(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE2 WINDOW MASK_Command.html">PSOOUTPUT PULSE2 WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulse2WindowMask(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulse2WindowMask(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse2WindowMask(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulse2WindowMask(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE2 WINDOW MASK_Command.html">PSOOUTPUT PULSE2 WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulse2WindowMask("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulse2WindowMask("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulse2WindowMask(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseBitMask(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements that are stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE BIT MASK_Command.html">PSOOUTPUT PULSE BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseBitMask(0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseBitMask(0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseBitMask(0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseBitMask(System.String,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements that are stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE BIT MASK_Command.html">PSOOUTPUT PULSE BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseBitMask("X", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseBitMask("X", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseBitMask(L"X", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseBitMask(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements that are stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE BIT MASK_Command.html">PSOOUTPUT PULSE BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseBitMask(0, 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseBitMask(0, 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseBitMask(0, 0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseBitMask(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements that are stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE BIT MASK_Command.html">PSOOUTPUT PULSE BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseBitMask("X", 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseBitMask("X", 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseBitMask(L"X", 0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputToggle(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT TOGGLE_Command.html">PSOOUTPUT TOGGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputToggle(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputToggle(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputToggle(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputToggle(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT TOGGLE_Command.html">PSOOUTPUT TOGGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputToggle("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputToggle("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputToggle(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputToggle(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT TOGGLE_Command.html">PSOOUTPUT TOGGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputToggle(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputToggle(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputToggle(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputToggle(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT TOGGLE_Command.html">PSOOUTPUT TOGGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputToggle("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputToggle("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputToggle(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseLaserMask(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE LASER MASK_Command.html">PSOOUTPUT PULSE LASER MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseLaserMask(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseLaserMask(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseLaserMask(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseLaserMask(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE LASER MASK_Command.html">PSOOUTPUT PULSE LASER MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseLaserMask("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseLaserMask("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseLaserMask(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputWindow(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT WINDOW_Command.html">PSOOUTPUT WINDOW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputWindow(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputWindow(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputWindow(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputWindow(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT WINDOW_Command.html">PSOOUTPUT WINDOW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputWindow("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputWindow("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputWindow(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputWindow(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT WINDOW_Command.html">PSOOUTPUT WINDOW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputWindow(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputWindow(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputWindow(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputWindow(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT WINDOW_Command.html">PSOOUTPUT WINDOW</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputWindow("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputWindow("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputWindow(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMask(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMask(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMask(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMask(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMask(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMask("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMask("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMask(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMask(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMask(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMask(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMask(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMask(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMask("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMask("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMask(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskHard(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskHard(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskHard(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHard(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskHard(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskHard("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskHard("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHard(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskHard(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskHard(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskHard(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHard(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskHard(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskHard("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskHard("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHard(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskEdgeMode(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="EdgeMode">Specify pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskEdgeMode(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskEdgeMode(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="EdgeMode">Specify pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskEdgeMode(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskEdgeMode(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><param name="EdgeMode">Specify pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode(0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode(0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskEdgeMode(0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskEdgeMode(System.String,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><param name="EdgeMode">Specify pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode("X", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskEdgeMode("X", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskEdgeMode(L"X", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskHardEdgeMode(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="EdgeMode">Specify pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskHardEdgeMode(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskHardEdgeMode(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHardEdgeMode(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskHardEdgeMode(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="EdgeMode">Specify pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskHardEdgeMode("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskHardEdgeMode("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHardEdgeMode(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskHardEdgeMode(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><param name="EdgeMode">Specify pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskHardEdgeMode(0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskHardEdgeMode(0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHardEdgeMode(0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowMaskHardEdgeMode(System.String,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><param name="EdgeMode">Specify pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW MASK_Command.html">PSOOUTPUT PULSE WINDOW MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowMaskHardEdgeMode("X", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowMaskHardEdgeMode("X", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowMaskHardEdgeMode(L"X", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowBitMask(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW BIT MASK_Command.html">PSOOUTPUT PULSE WINDOW BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowBitMask(0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowBitMask(0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowBitMask(0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowBitMask(System.String,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW BIT MASK_Command.html">PSOOUTPUT PULSE WINDOW BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowBitMask("X", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowBitMask("X", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowBitMask(L"X", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowBitMaskEdgeMode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><param name="EdgeMode">Specifies the pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW BIT MASK_Command.html">PSOOUTPUT PULSE WINDOW BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowBitMaskEdgeMode(0, 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowBitMaskEdgeMode(0, 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowBitMaskEdgeMode(0, 0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseWindowBitMaskEdgeMode(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><param name="EdgeMode">Specifies the pulse output behavior. This argument is required if you use the EDGE keyword.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE WINDOW BIT MASK_Command.html">PSOOUTPUT PULSE WINDOW BIT MASK</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseWindowBitMaskEdgeMode("X", 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseWindowBitMaskEdgeMode("X", 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseWindowBitMaskEdgeMode(L"X", 0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputControl(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Pin">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Specifies the pin number of PSO output.</param><param name="Mode">Used on all drives to select the mode of PSO output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT CONTROL_Command.html">PSOOUTPUT CONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputControl(0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputControl(0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputControl(0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputControl(System.String,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Pin">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Specifies the pin number of PSO output.</param><param name="Mode">Used on all drives to select the mode of PSO output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT CONTROL_Command.html">PSOOUTPUT CONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputControl("X", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputControl("X", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputControl(L"X", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputBitMap(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputBitMap(0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputBitMap(0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMap(0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputBitMap(System.String,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputBitMap("X", 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputBitMap("X", 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMap(L"X", 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputBitMap(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputBitMap(0, 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputBitMap(0, 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMap(0, 0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputBitMap(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Applies only to Npaq and Nservo. Does not apply to Npaq MR. Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputBitMap("X", 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputBitMap("X", 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMap(L"X", 0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputBitMapMode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><param name="Mode">Specifies the mode of operation for the BIT MAP functionality. If you do not specify this argument or if you set the value to 0, then the drive uses only the most significant bit of each array value, which is bit 31. If you set the value to 1, the drive uses all 32 bits of each array value. <snippetText src="../Resources/Snippets/Commands/ArgumentDescriptions/Mode.flsnp"/></param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputBitMapMode(0, 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputBitMapMode(0, 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMapMode(0, 0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputBitMapMode(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="StartIndex">The index of the first array data in the drive memory where the bit map data is stored.</param><param name="NumElements">The total number of bit map data elements stored in the drive memory.</param><param name="Mode">Specifies the mode of operation for the BIT MAP functionality. If you do not specify this argument or if you set the value to 0, then the drive uses only the most significant bit of each array value, which is bit 31. If you set the value to 1, the drive uses all 32 bits of each array value. <snippetText src="../Resources/Snippets/Commands/ArgumentDescriptions/Mode.flsnp"/></param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT BIT MAP_Command.html">PSOOUTPUT BIT MAP</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputBitMapMode("X", 0, 0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputBitMapMode("X", 0, 0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputBitMapMode(L"X", 0, 0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputCombine(System.Int32,System.Int32)">
            <summary>Sets the PSO combine mode (adding Aux. Output to the Main Output signal).</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">A value of 0 disables Npaq combine mode. <br/>A value of 1 enables Npaq combine mode.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT COMBINE_Command.html">PSOOUTPUT COMBINE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputCombine(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputCombine(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputCombine(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputCombine(System.String,System.Int32)">
            <summary>Sets the PSO combine mode (adding Aux. Output to the Main Output signal).</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">A value of 0 disables Npaq combine mode. <br/>A value of 1 enables Npaq combine mode.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT COMBINE_Command.html">PSOOUTPUT COMBINE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputCombine("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputCombine("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputCombine(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseExtSync(System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE EXTSYNC_Command.html">PSOOUTPUT PULSE EXTSYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseExtSync(0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseExtSync(0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseExtSync(0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseExtSync(System.String)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE EXTSYNC_Command.html">PSOOUTPUT PULSE EXTSYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseExtSync("X");
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseExtSync("X")
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseExtSync(L"X");
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseExtSync(System.Int32,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE EXTSYNC_Command.html">PSOOUTPUT PULSE EXTSYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseExtSync(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseExtSync(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseExtSync(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.OutputPulseExtSync(System.String,System.Int32)">
            <summary>Sets the PSO output mode.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="OutputSelect">Selects the output module to which configuration commands are sent. If you do not specify this argument, or if you set the value to 0, then the first module is configured. Refer to Main Output and Auxiliary Output signals in the PSO Block Diagrams for more information.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOOUTPUT PULSE EXTSYNC_Command.html">PSOOUTPUT PULSE EXTSYNC</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.OutputPulseExtSync("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.OutputPulseExtSync("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;OutputPulseExtSync(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.Pulse(System.Int32,System.Double,System.Double)">
            <summary>Configures the pulse sequence that is used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.Pulse(0, 100, 40);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.Pulse(0, 100, 40)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;Pulse(0, 100, 40);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.Pulse(System.String,System.Double,System.Double)">
            <summary>Configures the pulse sequence that is used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.Pulse("X", 100, 40);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.Pulse("X", 100, 40)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;Pulse(L"X", 100, 40);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.PulseCyclesOrDelayCyclesOnly(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence that is used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="NumCycles">The number of pulses to generate in a single pulse event.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.PulseCyclesOrDelayCyclesOnly(0, 100, 40, 2);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.PulseCyclesOrDelayCyclesOnly(0, 100, 40, 2)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayCyclesOnly(0, 100, 40, 2);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.PulseCyclesOrDelayCyclesOnly(System.String,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence that is used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="NumCycles">The number of pulses to generate in a single pulse event.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.PulseCyclesOrDelayCyclesOnly("X", 100, 40, 2);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.PulseCyclesOrDelayCyclesOnly("X", 100, 40, 2)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayCyclesOnly(L"X", 100, 40, 2);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.PulseCyclesOrDelayDelayOnly(System.Int32,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence that is used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="DelayTime">The quantity of time to delay between a fire event and the laser output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.PulseCyclesOrDelayDelayOnly(0, 100, 40, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.PulseCyclesOrDelayDelayOnly(0, 100, 40, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayDelayOnly(0, 100, 40, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.PulseCyclesOrDelayDelayOnly(System.String,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence that is used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="DelayTime">The quantity of time to delay between a fire event and the laser output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.PulseCyclesOrDelayDelayOnly("X", 100, 40, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.PulseCyclesOrDelayDelayOnly("X", 100, 40, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayDelayOnly(L"X", 100, 40, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.PulseCyclesOrDelayCyclesAndDelay(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence that is used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="NumCycles">The number of pulses to generate in a single pulse event.</param><param name="DelayTime">The quantity of time to delay between a fire event and the laser output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.PulseCyclesOrDelayCyclesAndDelay(0, 100, 40, 2, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.PulseCyclesOrDelayCyclesAndDelay(0, 100, 40, 2, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayCyclesAndDelay(0, 100, 40, 2, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.PulseCyclesOrDelayCyclesAndDelay(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>Configures the pulse sequence that is used for PSO.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="TotalTime">The total time of generated pulse in microseconds.</param><param name="OnTime">The time of the cycle when the PSO output is in the ON state.</param><param name="NumCycles">The number of pulses to generate in a single pulse event.</param><param name="DelayTime">The quantity of time to delay between a fire event and the laser output.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOPULSE_Command.html">PSOPULSE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.PulseCyclesOrDelayCyclesAndDelay("X", 100, 40, 2, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.PulseCyclesOrDelayCyclesAndDelay("X", 100, 40, 2, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;PulseCyclesOrDelayCyclesAndDelay(L"X", 100, 40, 2, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackInput(System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackInput(0, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackInput(0, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(0, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackInput(System.String,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackInput("X", 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackInput("X", 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(L"X", 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackInput(System.Int32,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><param name="Source2">The encoder to use as the source for the second axis of tracking (DO NOT use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackInput(0, 0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackInput(0, 0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(0, 0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackInput(System.String,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><param name="Source2">The encoder to use as the source for the second axis of tracking (DO NOT use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackInput("X", 0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackInput("X", 0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(L"X", 0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackInput(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><param name="Source2">The encoder to use as the source for the second axis of tracking (DO NOT use for single-axis).</param><param name="Source3">The encoder to use as the source for the third axis of tracking (DO NOT use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackInput(0, 0, 1, 2);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackInput(0, 0, 1, 2)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(0, 0, 1, 2);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackInput(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Source1">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><param name="Source2">The encoder to use as the source for the second axis of tracking (DO NOT use for single-axis).</param><param name="Source3">The encoder to use as the source for the third axis of tracking (DO NOT use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK INPUT_Command.html">PSOTRACK INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackInput("X", 0, 1, 2);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackInput("X", 0, 1, 2)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackInput(L"X", 0, 1, 2);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackReset(System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="RBitMask">The mask of possible conditions that can hold the tracking counter in reset.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK RESET_Command.html">PSOTRACK RESET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackReset(0, 3);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackReset(0, 3)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackReset(0, 3);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackReset(System.String,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="RBitMask">The mask of possible conditions that can hold the tracking counter in reset.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK RESET_Command.html">PSOTRACK RESET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackReset("X", 3);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackReset("X", 3)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackReset(L"X", 3);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackScale(System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackScale(0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackScale(0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackScale(System.String,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackScale("X", 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackScale("X", 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackScale(System.Int32,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><param name="PreScale2">The divisor applied to the encoder input to the second PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackScale(0, 1, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackScale(0, 1, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(0, 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackScale(System.String,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><param name="PreScale2">The divisor applied to the encoder input to the second PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackScale("X", 1, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackScale("X", 1, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(L"X", 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackScale(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><param name="PreScale2">The divisor applied to the encoder input to the second PSO channel.</param><param name="PreScale3">The divisor applied to the encoder input to the third PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackScale(0, 1, 1, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackScale(0, 1, 1, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(0, 1, 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackScale(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="PreScale1">The divisor applied to the encoder input to the first PSO channel.</param><param name="PreScale2">The divisor applied to the encoder input to the second PSO channel.</param><param name="PreScale3">The divisor applied to the encoder input to the third PSO channel.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK SCALE_Command.html">PSOTRACK SCALE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackScale("X", 1, 1, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackScale("X", 1, 1, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackScale(L"X", 1, 1, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackDirection(System.Int32,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="DBitMask">The mask of possible directions to be suppressed when tracking position.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK DIRECTION_Command.html">PSOTRACK DIRECTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackDirection(0, 3);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackDirection(0, 3)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackDirection(0, 3);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.TrackDirection(System.String,System.Int32)">
            <summary>Configures the PSO distance tracking counters.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="DBitMask">The mask of possible directions to be suppressed when tracking position.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOTRACK DIRECTION_Command.html">PSOTRACK DIRECTION</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.TrackDirection("X", 3);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.TrackDirection("X", 3)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;TrackDirection(L"X", 3);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowOn(System.Int32,System.Int32)">
            <summary>Enables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW ON_Command.html">PSOWINDOW ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowOn(0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowOn(0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowOn(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowOn(System.String,System.Int32)">
            <summary>Enables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW ON_Command.html">PSOWINDOW ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowOn("X", 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowOn("X", 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowOn(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowOnInvert(System.Int32,System.Int32)">
            <summary>Enables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW ON_Command.html">PSOWINDOW ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowOnInvert(0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowOnInvert(0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowOnInvert(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowOnInvert(System.String,System.Int32)">
            <summary>Enables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW ON_Command.html">PSOWINDOW ON</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowOnInvert("X", 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowOnInvert("X", 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowOnInvert(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowOff(System.Int32,System.Int32)">
            <summary>Disables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW OFF_Command.html">PSOWINDOW OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowOff(0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowOff(0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowOff(0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowOff(System.String,System.Int32)">
            <summary>Disables the PSO Window Hardware.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW OFF_Command.html">PSOWINDOW OFF</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowOff("X", 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowOff("X", 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowOff(L"X", 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowInput(System.Int32,System.Int32,System.Int32)">
            <summary>Configures which encoder channel is connected to each window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="Source">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW INPUT_Command.html">PSOWINDOW INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowInput(0, 1, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowInput(0, 1, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowInput(0, 1, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowInput(System.String,System.Int32,System.Int32)">
            <summary>Configures which encoder channel is connected to each window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="Source">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW INPUT_Command.html">PSOWINDOW INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowInput("X", 1, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowInput("X", 1, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowInput(L"X", 1, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowInputInvert(System.Int32,System.Int32,System.Int32)">
            <summary>Configures which encoder channel is connected to each window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="Source">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW INPUT_Command.html">PSOWINDOW INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowInputInvert(0, 1, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowInputInvert(0, 1, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowInputInvert(0, 1, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowInputInvert(System.String,System.Int32,System.Int32)">
            <summary>Configures which encoder channel is connected to each window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="Source">The encoder to use as the source for the first axis of tracking (use for single-axis).</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW INPUT_Command.html">PSOWINDOW INPUT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowInputInvert("X", 1, 0);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowInputInvert("X", 1, 0)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowInputInvert(L"X", 1, 0);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowReset(System.Int32,System.Int32,System.Int32)">
            <summary>Resets the window counter to 0 based on the encoder marker signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="BitMask">The mask of possible conditions that hold the tracking counter in reset.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW RESET_Command.html">PSOWINDOW RESET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowReset(0, 1, 2);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowReset(0, 1, 2)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowReset(0, 1, 2);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowReset(System.String,System.Int32,System.Int32)">
            <summary>Resets the window counter to 0 based on the encoder marker signal.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="BitMask">The mask of possible conditions that hold the tracking counter in reset.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW RESET_Command.html">PSOWINDOW RESET</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowReset("X", 1, 2);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowReset("X", 1, 2)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowReset(L"X", 1, 2);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowLoad(System.Int32,System.Int32,System.Int32)">
            <summary>Loads the specified window counter with a value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="Value">The value to load into the specified window.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW LOAD_Command.html">PSOWINDOW LOAD</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowLoad(0, 1, 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowLoad(0, 1, 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowLoad(0, 1, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowLoad(System.String,System.Int32,System.Int32)">
            <summary>Loads the specified window counter with a value.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="Value">The value to load into the specified window.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW LOAD_Command.html">PSOWINDOW LOAD</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowLoad("X", 1, 10000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowLoad("X", 1, 10000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowLoad(L"X", 1, 10000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowRangeArray(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Specifies the array mode parameters for the specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. Set to 1 or 2.</param><param name="StartIndex">The index of the first array value to load into the window.</param><param name="NumElements">The number of values to sequentially load into the window.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW RANGE ARRAY_Command.html">PSOWINDOW RANGE ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowRangeArray(0, 1, 5, 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowRangeArray(0, 1, 5, 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowRangeArray(0, 1, 5, 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowRangeArray(System.String,System.Int32,System.Double,System.Double)">
            <summary>Specifies the array mode parameters for the specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. Set to 1 or 2.</param><param name="StartIndex">The index of the first array value to load into the window.</param><param name="NumElements">The number of values to sequentially load into the window.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW RANGE ARRAY_Command.html">PSOWINDOW RANGE ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowRangeArray("X", 1, 5, 10);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowRangeArray("X", 1, 5, 10)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowRangeArray(L"X", 1, 5, 10);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowRangeArrayEdge(System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Specifies the array mode parameters for the specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. Set to 1 or 2.</param><param name="StartIndex">The index of the first array value to load into the window.</param><param name="NumElements">The number of values to sequentially load into the window.</param><param name="EdgeCode">An optional argument to restrict updating to one encoder direction.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW RANGE ARRAY_Command.html">PSOWINDOW RANGE ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowRangeArrayEdge(0, 1, 5, 10, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowRangeArrayEdge(0, 1, 5, 10, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowRangeArrayEdge(0, 1, 5, 10, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowRangeArrayEdge(System.String,System.Int32,System.Double,System.Double,System.Double)">
            <summary>Specifies the array mode parameters for the specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. Set to 1 or 2.</param><param name="StartIndex">The index of the first array value to load into the window.</param><param name="NumElements">The number of values to sequentially load into the window.</param><param name="EdgeCode">An optional argument to restrict updating to one encoder direction.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW RANGE ARRAY_Command.html">PSOWINDOW RANGE ARRAY</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowRangeArrayEdge("X", 1, 5, 10, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowRangeArrayEdge("X", 1, 5, 10, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowRangeArrayEdge(L"X", 1, 5, 10, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowRange(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Specifies the low and high comparison values for specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="LowValue">The low limit of the fixed window range.</param><param name="HighValue">The high limit of the for fixed window range.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW RANGE_Command.html">PSOWINDOW RANGE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowRange(0, 1, 5000, 22000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowRange(0, 1, 5000, 22000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowRange(0, 1, 5000, 22000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowRange(System.String,System.Int32,System.Double,System.Double)">
            <summary>Specifies the low and high comparison values for specified PSO window.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="WindowNumber">The window to configure. The Ndrive CP, MP, QL, and Npaq MR with MP drives must be set to 1. All other drives can be set to 1 or 2.</param><param name="LowValue">The low limit of the fixed window range.</param><param name="HighValue">The high limit of the for fixed window range.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW RANGE_Command.html">PSOWINDOW RANGE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowRange("X", 1, 5000, 22000);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowRange("X", 1, 5000, 22000)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowRange(L"X", 1, 5000, 22000);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowControl(System.Int32,Aerotech.A3200.Commands.PsoWindowDependance)">
            <summary>Specifies that the two PSO window counters are either co-dependent or independent.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">The window control mode to use. <snippetText src="../Resources/Snippets/Commands/ArgumentDescriptions/Mode.flsnp"/>
						</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW CONTROL_Command.html">PSOWINDOW CONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowControl(0, PsoWindowDependance.CoDependent);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowControl(0, PsoWindowDependance.CoDependent)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowControl(0, PsoWindowDependance::CoDependent);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.PSOCommands.WindowControl(System.String,Aerotech.A3200.Commands.PsoWindowDependance)">
            <summary>Specifies that the two PSO window counters are either co-dependent or independent.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">
										The axis on which to execute the command
									</param><param name="Mode">The window control mode to use. <snippetText src="../Resources/Snippets/Commands/ArgumentDescriptions/Mode.flsnp"/>
						</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/PSOWINDOW CONTROL_Command.html">PSOWINDOW CONTROL</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.PSO.WindowControl("X", PsoWindowDependance.CoDependent);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.PSO.WindowControl("X", PsoWindowDependance.CoDependent)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;PSO-&gt;WindowControl(L"X", PsoWindowDependance::CoDependent);
</code></example>
        </member>
        <member name="T:Aerotech.A3200.Commands.ModbusCommands">
            <summary>Contains the Modbus Commands</summary>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteRegisterInt16(Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus register set as 16-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="RegName">The register set to access (MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords). The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT16_Function.html">MODBUSREGINT16</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteRegisterInt16(RegisterType.MasterOutputWords, 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteRegisterInt16(RegisterType.MasterOutputWords, 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteRegisterInt16(RegisterType::MasterOutputWords, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteRegisterInt16(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus register set as 16-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="ConnectionNumber">Specify a number from 0 - 15 to use the corresponding PC Modbus register set (1 - 15 available only with the Professional option).</param><param name="RegName">The register set to access (MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords). The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT16_Function.html">MODBUSREGINT16</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteRegisterInt16(0, RegisterType.MasterOutputWords, 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteRegisterInt16(0, RegisterType.MasterOutputWords, 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteRegisterInt16(0, RegisterType::MasterOutputWords, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadRegisterInt16(Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as 16-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="RegName">The register set to access (MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords). The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT16_Function.html">MODBUSREGINT16</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadRegisterInt16(RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadRegisterInt16(RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadRegisterInt16(RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadRegisterInt16(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as 16-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="ConnectionNumber">Specify a number from 0 - 15 to use the corresponding PC Modbus register set (1 - 15 available only with the Professional option).</param><param name="RegName">The register set to access (MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords). The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT16_Function.html">MODBUSREGINT16</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadRegisterInt16(0, RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadRegisterInt16(0, RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadRegisterInt16(0, RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveRegisterInt16(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus register set as 16-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">Specify the name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access (MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords). The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT16_Function.html">MODBUSREGINT16</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveRegisterInt16(1, RegisterType.MasterOutputWords, 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveRegisterInt16(1, RegisterType.MasterOutputWords, 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveRegisterInt16(1, RegisterType::MasterOutputWords, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveRegisterInt16(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus register set as 16-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">Specify the name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access (MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords). The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT16_Function.html">MODBUSREGINT16</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveRegisterInt16("X", RegisterType.MasterOutputWords, 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveRegisterInt16("X", RegisterType.MasterOutputWords, 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveRegisterInt16("X", RegisterType::MasterOutputWords, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveRegisterInt16(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as 16-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">Specify the name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access (MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords). The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT16_Function.html">MODBUSREGINT16</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterInt16(1, RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterInt16(1, RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveRegisterInt16(1, RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveRegisterInt16(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as 16-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">Specify the name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access (MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords). The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT16_Function.html">MODBUSREGINT16</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterInt16("X", RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterInt16("X", RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveRegisterInt16("X", RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteRegisterInt32(Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus register set as 32-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT32_Function.html">MODBUSREGINT32</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteRegisterInt32(RegisterType.MasterOutputWords, 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteRegisterInt32(RegisterType.MasterOutputWords, 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteRegisterInt32(RegisterType::MasterOutputWords, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteRegisterInt32(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus register set as 32-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="ConnectionNumber">Specify a number from 0 - 15 to use the corresponding PC Modbus register set (sets 1 - 15 are available only with the Professional option).</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT32_Function.html">MODBUSREGINT32</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteRegisterInt32(0, RegisterType.MasterOutputWords, 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteRegisterInt32(0, RegisterType.MasterOutputWords, 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteRegisterInt32(0, RegisterType::MasterOutputWords, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadRegisterInt32(Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as 32-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT32_Function.html">MODBUSREGINT32</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadRegisterInt32(RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadRegisterInt32(RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadRegisterInt32(RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadRegisterInt32(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as 32-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="ConnectionNumber">Specify a number from 0 - 15 to use the corresponding PC Modbus register set (sets 1 - 15 are available only with the Professional option).</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT32_Function.html">MODBUSREGINT32</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadRegisterInt32(0, RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadRegisterInt32(0, RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadRegisterInt32(0, RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveRegisterInt32(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus register set as 32-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT32_Function.html">MODBUSREGINT32</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveRegisterInt32(1, RegisterType.MasterOutputWords, 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveRegisterInt32(1, RegisterType.MasterOutputWords, 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveRegisterInt32(1, RegisterType::MasterOutputWords, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveRegisterInt32(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus register set as 32-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT32_Function.html">MODBUSREGINT32</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveRegisterInt32("X", RegisterType.MasterOutputWords, 0, 5);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveRegisterInt32("X", RegisterType.MasterOutputWords, 0, 5)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveRegisterInt32("X", RegisterType::MasterOutputWords, 0, 5);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveRegisterInt32(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as 32-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT32_Function.html">MODBUSREGINT32</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterInt32(1, RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterInt32(1, RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveRegisterInt32(1, RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveRegisterInt32(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as 32-bit integer values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGINT32_Function.html">MODBUSREGINT32</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterInt32("X", RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterInt32("X", RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveRegisterInt32("X", RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteRegisterFloat(Aerotech.A3200.Commands.RegisterType,System.Int32,System.Single)">
            <summary>Provides access to a Modbus register set as single-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGSINGLE_Function.html">MODBUSREGSINGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteRegisterFloat(RegisterType.MasterOutputWords, 0, 3.1415F);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteRegisterFloat(RegisterType.MasterOutputWords, 0, 3.1415F)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteRegisterFloat(RegisterType::MasterOutputWords, 0, 3.1415F);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteRegisterFloat(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Single)">
            <summary>Provides access to a Modbus register set as single-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="ConnectionNumber">Specify a number from 0 - 15 to use the corresponding PC Modbus register set (1 - 15 available only with the Professional option).</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGSINGLE_Function.html">MODBUSREGSINGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteRegisterFloat(0, RegisterType.MasterOutputWords, 0, 3.1415F);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteRegisterFloat(0, RegisterType.MasterOutputWords, 0, 3.1415F)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteRegisterFloat(0, RegisterType::MasterOutputWords, 0, 3.1415F);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadRegisterFloat(Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as single-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGSINGLE_Function.html">MODBUSREGSINGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadRegisterFloat(RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadRegisterFloat(RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadRegisterFloat(RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadRegisterFloat(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as single-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="ConnectionNumber">Specify a number from 0 - 15 to use the corresponding PC Modbus register set (1 - 15 available only with the Professional option).</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGSINGLE_Function.html">MODBUSREGSINGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadRegisterFloat(0, RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadRegisterFloat(0, RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadRegisterFloat(0, RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveRegisterFloat(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Single)">
            <summary>Provides access to a Modbus register set as single-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGSINGLE_Function.html">MODBUSREGSINGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveRegisterFloat(1, RegisterType.MasterOutputWords, 0, 3.1415F);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveRegisterFloat(1, RegisterType.MasterOutputWords, 0, 3.1415F)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveRegisterFloat(1, RegisterType::MasterOutputWords, 0, 3.1415F);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveRegisterFloat(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Single)">
            <summary>Provides access to a Modbus register set as single-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGSINGLE_Function.html">MODBUSREGSINGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveRegisterFloat("X", RegisterType.MasterOutputWords, 0, 3.1415F);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveRegisterFloat("X", RegisterType.MasterOutputWords, 0, 3.1415F)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveRegisterFloat("X", RegisterType::MasterOutputWords, 0, 3.1415F);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveRegisterFloat(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as single-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGSINGLE_Function.html">MODBUSREGSINGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterFloat(1, RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterFloat(1, RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveRegisterFloat(1, RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveRegisterFloat(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as single-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGSINGLE_Function.html">MODBUSREGSINGLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterFloat("X", RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterFloat("X", RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveRegisterFloat("X", RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteRegisterDouble(Aerotech.A3200.Commands.RegisterType,System.Int32,System.Double)">
            <summary>Provides access to a Modbus register set as double-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGDOUBLE_Function.html">MODBUSREGDOUBLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteRegisterDouble(RegisterType.MasterOutputWords, 0, 3.141592);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteRegisterDouble(RegisterType.MasterOutputWords, 0, 3.141592)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteRegisterDouble(RegisterType::MasterOutputWords, 0, 3.141592);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteRegisterDouble(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Double)">
            <summary>Provides access to a Modbus register set as double-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="ConnectionNumber">Specify a number from 0 - 15 to use the corresponding PC Modbus register set (1 - 15 available only with the Professional option).</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGDOUBLE_Function.html">MODBUSREGDOUBLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteRegisterDouble(0, RegisterType.MasterOutputWords, 0, 3.141592);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteRegisterDouble(0, RegisterType.MasterOutputWords, 0, 3.141592)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteRegisterDouble(0, RegisterType::MasterOutputWords, 0, 3.141592);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadRegisterDouble(Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as double-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGDOUBLE_Function.html">MODBUSREGDOUBLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadRegisterDouble(RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadRegisterDouble(RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadRegisterDouble(RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadRegisterDouble(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as double-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="ConnectionNumber">Specify a number from 0 - 15 to use the corresponding PC Modbus register set (1 - 15 available only with the Professional option).</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGDOUBLE_Function.html">MODBUSREGDOUBLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadRegisterDouble(0, RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadRegisterDouble(0, RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadRegisterDouble(0, RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveRegisterDouble(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Double)">
            <summary>Provides access to a Modbus register set as double-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGDOUBLE_Function.html">MODBUSREGDOUBLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveRegisterDouble(1, RegisterType.MasterOutputWords, 0, 3.141592);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveRegisterDouble(1, RegisterType.MasterOutputWords, 0, 3.141592)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveRegisterDouble(1, RegisterType::MasterOutputWords, 0, 3.141592);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveRegisterDouble(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Double)">
            <summary>Provides access to a Modbus register set as double-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to store.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGDOUBLE_Function.html">MODBUSREGDOUBLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveRegisterDouble("X", RegisterType.MasterOutputWords, 0, 3.141592);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveRegisterDouble("X", RegisterType.MasterOutputWords, 0, 3.141592)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveRegisterDouble("X", RegisterType::MasterOutputWords, 0, 3.141592);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveRegisterDouble(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as double-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGDOUBLE_Function.html">MODBUSREGDOUBLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterDouble(1, RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterDouble(1, RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveRegisterDouble(1, RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveRegisterDouble(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus register set as double-precision floating-point values.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">The name of the axis on which to use the Modbus register set.</param><param name="RegName">The register set to access. Either MasterInputWords, SlaveInputWords, MasterOutputWords, or SlaveOutputWords. The input words have read-only access, and the output words have read and write access.</param><param name="RegNumber">The index number of the register to access. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSREGDOUBLE_Function.html">MODBUSREGDOUBLE</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterDouble("X", RegisterType.MasterOutputWords, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveRegisterDouble("X", RegisterType.MasterOutputWords, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveRegisterDouble("X", RegisterType::MasterOutputWords, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteBit(Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus bit set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="BitName">The bit set to access. Either MasterInputBits, SlaveInputBits, MasterOutputBits, or SlaveOutputBits. The input bits have read-only access, and the output bits have read and write access.</param><param name="BitNumber">The bit number in the set. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to write to the bit. Either 0 or 1.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSBIT_Function.html">MODBUSBIT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteBit(RegisterType.MasterOutputBits, 0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteBit(RegisterType.MasterOutputBits, 0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteBit(RegisterType::MasterOutputBits, 0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteBit(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus bit set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="ConnectionNumber">Identifies the Modbus connection to use. Specify the axis name on which to use the Modbus register set. Specify a number from 0 - 15 to use the corresponding PC Modbus register set (1 - 15 only available with the Professional option).</param><param name="BitName">The bit set to access. Either MasterInputBits, SlaveInputBits, MasterOutputBits, or SlaveOutputBits. The input bits have read-only access, and the output bits have read and write access.</param><param name="BitNumber">The bit number in the set. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to write to the bit. Either 0 or 1.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSBIT_Function.html">MODBUSBIT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteBit(0, RegisterType.MasterOutputBits, 0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteBit(0, RegisterType.MasterOutputBits, 0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteBit(0, RegisterType::MasterOutputBits, 0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadBit(Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus bit set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="BitName">The bit set to access. Either MasterInputBits, SlaveInputBits, MasterOutputBits, or SlaveOutputBits. The input bits have read-only access, and the output bits have read and write access.</param><param name="BitNumber">The bit number in the set. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSBIT_Function.html">MODBUSBIT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadBit(RegisterType.MasterOutputBits, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadBit(RegisterType.MasterOutputBits, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadBit(RegisterType::MasterOutputBits, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadBit(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus bit set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="ConnectionNumber">Identifies the Modbus connection to use. Specify the axis name on which to use the Modbus register set. Specify a number from 0 - 15 to use the corresponding PC Modbus register set (1 - 15 only available with the Professional option).</param><param name="BitName">The bit set to access. Either MasterInputBits, SlaveInputBits, MasterOutputBits, or SlaveOutputBits. The input bits have read-only access, and the output bits have read and write access.</param><param name="BitNumber">The bit number in the set. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSBIT_Function.html">MODBUSBIT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadBit(0, RegisterType.MasterOutputBits, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadBit(0, RegisterType.MasterOutputBits, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadBit(0, RegisterType::MasterOutputBits, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveBit(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus bit set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The name of the axis for drive Modbus.</param><param name="BitName">The bit set to access. Either MasterInputBits, SlaveInputBits, MasterOutputBits, or SlaveOutputBits. The input bits have read-only access, and the output bits have read and write access.</param><param name="BitNumber">The bit number in the set. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to write to the bit. Either 0 or 1.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSBIT_Function.html">MODBUSBIT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveBit(1, RegisterType.MasterOutputBits, 0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveBit(1, RegisterType.MasterOutputBits, 0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveBit(1, RegisterType::MasterOutputBits, 0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.WriteDriveBit(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32,System.Int32)">
            <summary>Provides access to a Modbus bit set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><param name="Axis">The name of the axis for drive Modbus.</param><param name="BitName">The bit set to access. Either MasterInputBits, SlaveInputBits, MasterOutputBits, or SlaveOutputBits. The input bits have read-only access, and the output bits have read and write access.</param><param name="BitNumber">The bit number in the set. This argument can be an expression and must be a positive integer.</param><param name="Value">The value to write to the bit. Either 0 or 1.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSBIT_Function.html">MODBUSBIT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
myController.Commands.Modbus.WriteDriveBit("X", RegisterType.MasterOutputBits, 0, 1);
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
myController.Commands.Modbus.WriteDriveBit("X", RegisterType.MasterOutputBits, 0, 1)
</code><code language="C++">Controller^ myController = Controller::Connect();
myController-&gt;Commands-&gt;Modbus-&gt;WriteDriveBit("X", RegisterType::MasterOutputBits, 0, 1);
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveBit(System.Int32,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus bit set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">The name of the axis for drive Modbus.</param><param name="BitName">The bit set to access. Either MasterInputBits, SlaveInputBits, MasterOutputBits, or SlaveOutputBits. The input bits have read-only access, and the output bits have read and write access.</param><param name="BitNumber">The bit number in the set. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSBIT_Function.html">MODBUSBIT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveBit(1, RegisterType.MasterOutputBits, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveBit(1, RegisterType.MasterOutputBits, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveBit(1, RegisterType::MasterOutputBits, 0));
</code></example>
        </member>
        <member name="M:Aerotech.A3200.Commands.ModbusCommands.ReadDriveBit(System.String,Aerotech.A3200.Commands.RegisterType,System.Int32)">
            <summary>Provides access to a Modbus bit set.</summary><param name="axisMask">
				The mask representing on which axes to execute the commands
			</param><param name="axisIndexes">
				The indexes of the axes on which to execute the command
			</param><param name="axisIndex">
				The index of the axis on which to execute the command
			</param><param name="axisNames">
				The names of the axes on which to execute the command
			</param><param name="axisName">
				The name of the axis on which to execute the command
			</param><returns>The stored value.</returns><param name="Axis">The name of the axis for drive Modbus.</param><param name="BitName">The bit set to access. Either MasterInputBits, SlaveInputBits, MasterOutputBits, or SlaveOutputBits. The input bits have read-only access, and the output bits have read and write access.</param><param name="BitNumber">The bit number in the set. This argument can be an expression and must be a positive integer.</param><remarks>
      <para>
						This command is the same as
						<a href="mk:@MSITStore:A3200.chm::/Commands/MODBUSBIT_Function.html">MODBUSBIT</a>
						in AeroBasic.
					</para>
    </remarks><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>Aerotech.A3200</li><li>Aerotech.A3200.Commands</li></ul><code language="C#">Controller myController = Controller.Connect();
Console.WriteLine(myController.Commands.Modbus.ReadDriveBit("X", RegisterType.MasterOutputBits, 0));
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()
Console.WriteLine(myController.Commands.Modbus.ReadDriveBit("X", RegisterType.MasterOutputBits, 0))
</code><code language="C++">Controller^ myController = Controller::Connect();
Console::WriteLine(myController-&gt;Commands-&gt;Modbus-&gt;ReadDriveBit("X", RegisterType::MasterOutputBits, 0));
</code></example>
        </member>
        <member name="T:Aerotech.A3200.GenericPropertyExposerConverter`1">
            <summary>This allows the type to be expanded in the property grid</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.Builder">
            <summary>Allows to compile and build AeroBasic files</summary>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.Build(System.String)">
            <summary>Builds an AeroBasic file with default settings</summary>
            <param name="fileName">The path to the file to compile</param>
            <returns>Information about the result of the build</returns>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.Build(System.String,Aerotech.AeroBasic.BuildSettings)">
            <summary>Builds an AeroBasic file with provided settings</summary>
            <param name="fileName">The path to the file to build</param>
            <param name="settings">The settings to use to build the file</param>
            <returns>Information about the result of the build</returns>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.BuildSource(System.String)">
            <summary>Builds an AeroBasic source with default settings</summary>
            <param name="sourceCode">The source code to compile</param>
            <returns>Information about the result of the build</returns>
        </member>
        <member name="M:Aerotech.AeroBasic.Builder.BuildSource(System.String,Aerotech.AeroBasic.BuildSettings)">
            <summary>Builds an AeroBasic source with provided settings</summary>
            <param name="sourceCode">The source code to compile</param>
            <param name="settings">The settings to use to build the file</param>
            <returns>Information about the result of the build</returns>
        </member>
        <member name="T:Aerotech.AeroBasic.BuildSettings">
            <summary>Settings for <see cref="M:Aerotech.AeroBasic.Builder.Build(System.String,Aerotech.AeroBasic.BuildSettings)"/></summary>
        </member>
        <member name="M:Aerotech.AeroBasic.BuildSettings.#ctor">
            <summary>Creates default build settings</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.BuildResults">
            <summary>Results of building an AeroBasic file</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.BuildResults.Succeeded">
            <summary>Whether the build succeeded</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.BuildResults.CompilerErrors">
            <summary>Any errors that occured during the building</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.BuildResults.OutputFile">
            <summary>The path to the output file that was generated.</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.CompilerResult">
            <summary>Contains an error of compiling an AeroBasic file</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerResult.ErrorType">
            <summary>The errror type</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerResult.Error">
            <summary>The error description</summary>
        </member>
        <member name="P:Aerotech.AeroBasic.CompilerResult.Location">
            <summary>The error location</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.CncOperatorInterfaceConfiguration">
            <summary>Contains CNC Operator Interface settings</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.CncOperatorInterfaceConfiguration.CustomizableButtonsFile">
            <summary>Path to the file for customizable buttons' configuration</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.SystemConfiguration">
            <summary>Contains the configuration for the whole system</summary>
            <remarks>
            	<para>
            		Please note that any changes will be saved right away, but will not take
            		effect until the <see cref="T:Aerotech.A3200.Controller"/> is <see cref="M:Aerotech.A3200.Controller.Reset"/>,
            		one reconnects by using <see cref="M:Aerotech.A3200.Controller.Connect"/>, or the PC is
            		restarted.
            		Which one will load the new settings depends on the specific setting.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Configuration</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code language="C++">
<![CDATA[
    try 
    {
        // Set the active parameter file path
        Controller::Configuration->ParameterFile = Path::GetFullPath("foo.prma");
        // Set the 1D calibration file path
        Controller::Configuration->Calibration->Axis1D = Path::GetFullPath("default1D.cal");
       // Set and Print the PLC shared tag file path
        Controller::Configuration->PlcSharedTagFile = Path::GetFullPath("shared.plctag");
        Console::WriteLine("PLC shared tag file path : {0}", Controller::Configuration->PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller::Configuration->DistanceLoggingFile = Path::GetFullPath("distance.txt");
        Console::WriteLine("Distance logging file path : {0}", Controller::Configuration->DistanceLoggingFile);
        // Print out all program automation entries
        for each (ProgramAutomationEntry^ entry in Controller::Configuration->ProgramAutomation)
        {
            Console::WriteLine("Tasks: {0}", entry->Mask);
            Console::WriteLine("Path: {0}", entry->ProgramPath);
            Console::WriteLine("Automation Mode: {0}", entry->Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry^ newEntry = gcnew ProgramAutomationEntry(Path::GetFullPath("program.pgm"), ProgramAutomationMode::RunSilent, TaskMask::T01) ;
        Controller::Configuration->ProgramAutomation->Add(newEntry);
        // Print out a few properties of each machine tool
        for each (MachineTool^ tool in Controller::Configuration->MachineTools->MachineTools)
        {
            Console::WriteLine("Name: {0}", tool->Name);
            Console::WriteLine("Units: {0}", tool->Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller::IsRunning;
        Controller^ myController = Controller::Connect();
        // We only have to force a reset if we were previously running
        if(alreadyRunning) { myController->Reset(); }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
  
</code>
<code language="C#">
<![CDATA[
    
    try 
    {
        // Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma");
        // Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal");
        // Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag");
        Console.WriteLine("PLC shared tag file path: {0}", Controller.Configuration.PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt");
        Console.WriteLine("Distance logging file path: {0}", Controller.Configuration.DistanceLoggingFile);
        // Print out all program automation entries
        foreach (ProgramAutomationEntry entry in Controller.Configuration.ProgramAutomation)
        {
            Console.WriteLine("Tasks: {0}", entry.Mask);
            Console.WriteLine("Path: {0}", entry.ProgramPath);
            Console.WriteLine("Automation Mode: {0}", entry.Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry newEntry = new ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01);
        Controller.Configuration.ProgramAutomation.Add(newEntry);
        // Print out a few properties of each machine tool
        foreach (MachineTool tool in Controller.Configuration.MachineTools.MachineTools)
        {
            Console.WriteLine("Name: {0}", tool.Name);
            Console.WriteLine("Units: {0}", tool.Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller.IsRunning;
        Controller myController = Controller.Connect();
        // We only have to force a reset if we were previously running
        if (alreadyRunning) { myController.Reset(); }
    }
    catch(Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }
]]>
</code>
<code language="VB.NET">
<![CDATA[
    
    Try
        ' Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma")
        ' Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal")
        ' Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag")
        Console.WriteLine("PLC shared tag file path : {0}", Controller.Configuration.PlcSharedTagFile)
        ' Print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt")
        Console.WriteLine("Distance logging file path : {0}", Controller.Configuration.DistanceLoggingFile)
        ' Print out all program automation entries
        Dim entry As ProgramAutomationEntry
        For Each entry In Controller.Configuration.ProgramAutomation
            Console.WriteLine("Tasks: {0}", entry.Mask)
            Console.WriteLine("Path: {0}", entry.ProgramPath)
            Console.WriteLine("Automation Mode: {0}", entry.Mode)
        Next
        ' Add a new program automation entry
        Dim newEntry As New ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01)
        Controller.Configuration.ProgramAutomation.Add(newEntry)
        ' Print out a few properties of each machine tool
        Dim tool As MachineTool
        For Each tool In Controller.Configuration.MachineTools.MachineTools
            Console.WriteLine("Name: {0}", tool.Name)
            Console.WriteLine("Units: {0}", tool.Units)
        Next
        ' Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        Dim alreadyRunning as Boolean = Controller.IsRunning
        Dim myController As Controller = Controller.Connect
        ' We only have to force a reset if we were previously running
        If alreadyRunning Then
            myController.Reset
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try
]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.SMCArguments">
            <summary>The arguments that will be passed on the SMC on initialization</summary>
            <remarks>
            	<para>Please see the main help file for more information about what arguments can be passed</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.CommunicationServiceArguments">
            <summary>The arguments that will be passed to the communication service on its startup</summary>
            <remarks>
            	<para>Please see the main help file for more information about what arguments can be passed</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.ParameterFile">
            <summary>Path to the parameter file to use for initialization of the controller</summary>
            <exception cref="T:System.ArgumentNullException">If the value given is <c>null</c></exception>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Configuration</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code language="C++">
<![CDATA[
    try 
    {
        // Set the active parameter file path
        Controller::Configuration->ParameterFile = Path::GetFullPath("foo.prma");
        // Set the 1D calibration file path
        Controller::Configuration->Calibration->Axis1D = Path::GetFullPath("default1D.cal");
       // Set and Print the PLC shared tag file path
        Controller::Configuration->PlcSharedTagFile = Path::GetFullPath("shared.plctag");
        Console::WriteLine("PLC shared tag file path : {0}", Controller::Configuration->PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller::Configuration->DistanceLoggingFile = Path::GetFullPath("distance.txt");
        Console::WriteLine("Distance logging file path : {0}", Controller::Configuration->DistanceLoggingFile);
        // Print out all program automation entries
        for each (ProgramAutomationEntry^ entry in Controller::Configuration->ProgramAutomation)
        {
            Console::WriteLine("Tasks: {0}", entry->Mask);
            Console::WriteLine("Path: {0}", entry->ProgramPath);
            Console::WriteLine("Automation Mode: {0}", entry->Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry^ newEntry = gcnew ProgramAutomationEntry(Path::GetFullPath("program.pgm"), ProgramAutomationMode::RunSilent, TaskMask::T01) ;
        Controller::Configuration->ProgramAutomation->Add(newEntry);
        // Print out a few properties of each machine tool
        for each (MachineTool^ tool in Controller::Configuration->MachineTools->MachineTools)
        {
            Console::WriteLine("Name: {0}", tool->Name);
            Console::WriteLine("Units: {0}", tool->Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller::IsRunning;
        Controller^ myController = Controller::Connect();
        // We only have to force a reset if we were previously running
        if(alreadyRunning) { myController->Reset(); }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
  
</code>
<code language="C#">
<![CDATA[
    
    try 
    {
        // Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma");
        // Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal");
        // Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag");
        Console.WriteLine("PLC shared tag file path: {0}", Controller.Configuration.PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt");
        Console.WriteLine("Distance logging file path: {0}", Controller.Configuration.DistanceLoggingFile);
        // Print out all program automation entries
        foreach (ProgramAutomationEntry entry in Controller.Configuration.ProgramAutomation)
        {
            Console.WriteLine("Tasks: {0}", entry.Mask);
            Console.WriteLine("Path: {0}", entry.ProgramPath);
            Console.WriteLine("Automation Mode: {0}", entry.Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry newEntry = new ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01);
        Controller.Configuration.ProgramAutomation.Add(newEntry);
        // Print out a few properties of each machine tool
        foreach (MachineTool tool in Controller.Configuration.MachineTools.MachineTools)
        {
            Console.WriteLine("Name: {0}", tool.Name);
            Console.WriteLine("Units: {0}", tool.Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller.IsRunning;
        Controller myController = Controller.Connect();
        // We only have to force a reset if we were previously running
        if (alreadyRunning) { myController.Reset(); }
    }
    catch(Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }
]]>
</code>
<code language="VB.NET">
<![CDATA[
    
    Try
        ' Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma")
        ' Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal")
        ' Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag")
        Console.WriteLine("PLC shared tag file path : {0}", Controller.Configuration.PlcSharedTagFile)
        ' Print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt")
        Console.WriteLine("Distance logging file path : {0}", Controller.Configuration.DistanceLoggingFile)
        ' Print out all program automation entries
        Dim entry As ProgramAutomationEntry
        For Each entry In Controller.Configuration.ProgramAutomation
            Console.WriteLine("Tasks: {0}", entry.Mask)
            Console.WriteLine("Path: {0}", entry.ProgramPath)
            Console.WriteLine("Automation Mode: {0}", entry.Mode)
        Next
        ' Add a new program automation entry
        Dim newEntry As New ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01)
        Controller.Configuration.ProgramAutomation.Add(newEntry)
        ' Print out a few properties of each machine tool
        Dim tool As MachineTool
        For Each tool In Controller.Configuration.MachineTools.MachineTools
            Console.WriteLine("Name: {0}", tool.Name)
            Console.WriteLine("Units: {0}", tool.Units)
        Next
        ' Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        Dim alreadyRunning as Boolean = Controller.IsRunning
        Dim myController As Controller = Controller.Connect
        ' We only have to force a reset if we were previously running
        If alreadyRunning Then
            myController.Reset
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try
]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.DistanceLoggingFile">
            <summary>Path to the distance logging file.</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.PlcSharedTagFile">
            <summary>Path to the PLC shared tag specification file</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Configuration</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code language="C++">
<![CDATA[
    try 
    {
        // Set the active parameter file path
        Controller::Configuration->ParameterFile = Path::GetFullPath("foo.prma");
        // Set the 1D calibration file path
        Controller::Configuration->Calibration->Axis1D = Path::GetFullPath("default1D.cal");
       // Set and Print the PLC shared tag file path
        Controller::Configuration->PlcSharedTagFile = Path::GetFullPath("shared.plctag");
        Console::WriteLine("PLC shared tag file path : {0}", Controller::Configuration->PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller::Configuration->DistanceLoggingFile = Path::GetFullPath("distance.txt");
        Console::WriteLine("Distance logging file path : {0}", Controller::Configuration->DistanceLoggingFile);
        // Print out all program automation entries
        for each (ProgramAutomationEntry^ entry in Controller::Configuration->ProgramAutomation)
        {
            Console::WriteLine("Tasks: {0}", entry->Mask);
            Console::WriteLine("Path: {0}", entry->ProgramPath);
            Console::WriteLine("Automation Mode: {0}", entry->Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry^ newEntry = gcnew ProgramAutomationEntry(Path::GetFullPath("program.pgm"), ProgramAutomationMode::RunSilent, TaskMask::T01) ;
        Controller::Configuration->ProgramAutomation->Add(newEntry);
        // Print out a few properties of each machine tool
        for each (MachineTool^ tool in Controller::Configuration->MachineTools->MachineTools)
        {
            Console::WriteLine("Name: {0}", tool->Name);
            Console::WriteLine("Units: {0}", tool->Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller::IsRunning;
        Controller^ myController = Controller::Connect();
        // We only have to force a reset if we were previously running
        if(alreadyRunning) { myController->Reset(); }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
  
</code>
<code language="C#">
<![CDATA[
    
    try 
    {
        // Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma");
        // Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal");
        // Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag");
        Console.WriteLine("PLC shared tag file path: {0}", Controller.Configuration.PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt");
        Console.WriteLine("Distance logging file path: {0}", Controller.Configuration.DistanceLoggingFile);
        // Print out all program automation entries
        foreach (ProgramAutomationEntry entry in Controller.Configuration.ProgramAutomation)
        {
            Console.WriteLine("Tasks: {0}", entry.Mask);
            Console.WriteLine("Path: {0}", entry.ProgramPath);
            Console.WriteLine("Automation Mode: {0}", entry.Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry newEntry = new ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01);
        Controller.Configuration.ProgramAutomation.Add(newEntry);
        // Print out a few properties of each machine tool
        foreach (MachineTool tool in Controller.Configuration.MachineTools.MachineTools)
        {
            Console.WriteLine("Name: {0}", tool.Name);
            Console.WriteLine("Units: {0}", tool.Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller.IsRunning;
        Controller myController = Controller.Connect();
        // We only have to force a reset if we were previously running
        if (alreadyRunning) { myController.Reset(); }
    }
    catch(Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }
]]>
</code>
<code language="VB.NET">
<![CDATA[
    
    Try
        ' Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma")
        ' Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal")
        ' Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag")
        Console.WriteLine("PLC shared tag file path : {0}", Controller.Configuration.PlcSharedTagFile)
        ' Print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt")
        Console.WriteLine("Distance logging file path : {0}", Controller.Configuration.DistanceLoggingFile)
        ' Print out all program automation entries
        Dim entry As ProgramAutomationEntry
        For Each entry In Controller.Configuration.ProgramAutomation
            Console.WriteLine("Tasks: {0}", entry.Mask)
            Console.WriteLine("Path: {0}", entry.ProgramPath)
            Console.WriteLine("Automation Mode: {0}", entry.Mode)
        Next
        ' Add a new program automation entry
        Dim newEntry As New ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01)
        Controller.Configuration.ProgramAutomation.Add(newEntry)
        ' Print out a few properties of each machine tool
        Dim tool As MachineTool
        For Each tool In Controller.Configuration.MachineTools.MachineTools
            Console.WriteLine("Name: {0}", tool.Name)
            Console.WriteLine("Units: {0}", tool.Units)
        Next
        ' Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        Dim alreadyRunning as Boolean = Controller.IsRunning
        Dim myController As Controller = Controller.Connect
        ' We only have to force a reset if we were previously running
        If alreadyRunning Then
            myController.Reset
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try
]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.CompilerOutputDirectory">
            <summary>OGM file destination</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.AutoStart">
            <summary>Whether to automatically initialize the A3200 on system start or not</summary>
            <remarks>
            	<para>Set to <c>true</c> to have the A3200 initialize on system start.</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.Connection">
            <summary>Contains configuration settings for client/server</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.ProgramAutomation">
            <summary>Contains the program automation settings</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Configuration</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code language="C++">
<![CDATA[
    try 
    {
        // Set the active parameter file path
        Controller::Configuration->ParameterFile = Path::GetFullPath("foo.prma");
        // Set the 1D calibration file path
        Controller::Configuration->Calibration->Axis1D = Path::GetFullPath("default1D.cal");
       // Set and Print the PLC shared tag file path
        Controller::Configuration->PlcSharedTagFile = Path::GetFullPath("shared.plctag");
        Console::WriteLine("PLC shared tag file path : {0}", Controller::Configuration->PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller::Configuration->DistanceLoggingFile = Path::GetFullPath("distance.txt");
        Console::WriteLine("Distance logging file path : {0}", Controller::Configuration->DistanceLoggingFile);
        // Print out all program automation entries
        for each (ProgramAutomationEntry^ entry in Controller::Configuration->ProgramAutomation)
        {
            Console::WriteLine("Tasks: {0}", entry->Mask);
            Console::WriteLine("Path: {0}", entry->ProgramPath);
            Console::WriteLine("Automation Mode: {0}", entry->Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry^ newEntry = gcnew ProgramAutomationEntry(Path::GetFullPath("program.pgm"), ProgramAutomationMode::RunSilent, TaskMask::T01) ;
        Controller::Configuration->ProgramAutomation->Add(newEntry);
        // Print out a few properties of each machine tool
        for each (MachineTool^ tool in Controller::Configuration->MachineTools->MachineTools)
        {
            Console::WriteLine("Name: {0}", tool->Name);
            Console::WriteLine("Units: {0}", tool->Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller::IsRunning;
        Controller^ myController = Controller::Connect();
        // We only have to force a reset if we were previously running
        if(alreadyRunning) { myController->Reset(); }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
  
</code>
<code language="C#">
<![CDATA[
    
    try 
    {
        // Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma");
        // Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal");
        // Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag");
        Console.WriteLine("PLC shared tag file path: {0}", Controller.Configuration.PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt");
        Console.WriteLine("Distance logging file path: {0}", Controller.Configuration.DistanceLoggingFile);
        // Print out all program automation entries
        foreach (ProgramAutomationEntry entry in Controller.Configuration.ProgramAutomation)
        {
            Console.WriteLine("Tasks: {0}", entry.Mask);
            Console.WriteLine("Path: {0}", entry.ProgramPath);
            Console.WriteLine("Automation Mode: {0}", entry.Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry newEntry = new ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01);
        Controller.Configuration.ProgramAutomation.Add(newEntry);
        // Print out a few properties of each machine tool
        foreach (MachineTool tool in Controller.Configuration.MachineTools.MachineTools)
        {
            Console.WriteLine("Name: {0}", tool.Name);
            Console.WriteLine("Units: {0}", tool.Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller.IsRunning;
        Controller myController = Controller.Connect();
        // We only have to force a reset if we were previously running
        if (alreadyRunning) { myController.Reset(); }
    }
    catch(Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }
]]>
</code>
<code language="VB.NET">
<![CDATA[
    
    Try
        ' Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma")
        ' Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal")
        ' Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag")
        Console.WriteLine("PLC shared tag file path : {0}", Controller.Configuration.PlcSharedTagFile)
        ' Print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt")
        Console.WriteLine("Distance logging file path : {0}", Controller.Configuration.DistanceLoggingFile)
        ' Print out all program automation entries
        Dim entry As ProgramAutomationEntry
        For Each entry In Controller.Configuration.ProgramAutomation
            Console.WriteLine("Tasks: {0}", entry.Mask)
            Console.WriteLine("Path: {0}", entry.ProgramPath)
            Console.WriteLine("Automation Mode: {0}", entry.Mode)
        Next
        ' Add a new program automation entry
        Dim newEntry As New ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01)
        Controller.Configuration.ProgramAutomation.Add(newEntry)
        ' Print out a few properties of each machine tool
        Dim tool As MachineTool
        For Each tool In Controller.Configuration.MachineTools.MachineTools
            Console.WriteLine("Name: {0}", tool.Name)
            Console.WriteLine("Units: {0}", tool.Units)
        Next
        ' Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        Dim alreadyRunning as Boolean = Controller.IsRunning
        Dim myController As Controller = Controller.Connect
        ' We only have to force a reset if we were previously running
        If alreadyRunning Then
            myController.Reset
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try
]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.MachineTools">
            <summary>Contains the configuration of machine tools</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Configuration</li>
<li>System</li>
<li>System.IO</li>
</ul>
<code language="C++">
<![CDATA[
    try 
    {
        // Set the active parameter file path
        Controller::Configuration->ParameterFile = Path::GetFullPath("foo.prma");
        // Set the 1D calibration file path
        Controller::Configuration->Calibration->Axis1D = Path::GetFullPath("default1D.cal");
       // Set and Print the PLC shared tag file path
        Controller::Configuration->PlcSharedTagFile = Path::GetFullPath("shared.plctag");
        Console::WriteLine("PLC shared tag file path : {0}", Controller::Configuration->PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller::Configuration->DistanceLoggingFile = Path::GetFullPath("distance.txt");
        Console::WriteLine("Distance logging file path : {0}", Controller::Configuration->DistanceLoggingFile);
        // Print out all program automation entries
        for each (ProgramAutomationEntry^ entry in Controller::Configuration->ProgramAutomation)
        {
            Console::WriteLine("Tasks: {0}", entry->Mask);
            Console::WriteLine("Path: {0}", entry->ProgramPath);
            Console::WriteLine("Automation Mode: {0}", entry->Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry^ newEntry = gcnew ProgramAutomationEntry(Path::GetFullPath("program.pgm"), ProgramAutomationMode::RunSilent, TaskMask::T01) ;
        Controller::Configuration->ProgramAutomation->Add(newEntry);
        // Print out a few properties of each machine tool
        for each (MachineTool^ tool in Controller::Configuration->MachineTools->MachineTools)
        {
            Console::WriteLine("Name: {0}", tool->Name);
            Console::WriteLine("Units: {0}", tool->Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller::IsRunning;
        Controller^ myController = Controller::Connect();
        // We only have to force a reset if we were previously running
        if(alreadyRunning) { myController->Reset(); }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
  
</code>
<code language="C#">
<![CDATA[
    
    try 
    {
        // Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma");
        // Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal");
        // Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag");
        Console.WriteLine("PLC shared tag file path: {0}", Controller.Configuration.PlcSharedTagFile);
        // Set and print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt");
        Console.WriteLine("Distance logging file path: {0}", Controller.Configuration.DistanceLoggingFile);
        // Print out all program automation entries
        foreach (ProgramAutomationEntry entry in Controller.Configuration.ProgramAutomation)
        {
            Console.WriteLine("Tasks: {0}", entry.Mask);
            Console.WriteLine("Path: {0}", entry.ProgramPath);
            Console.WriteLine("Automation Mode: {0}", entry.Mode);
        }
        // Add a new program automation entry
        ProgramAutomationEntry newEntry = new ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01);
        Controller.Configuration.ProgramAutomation.Add(newEntry);
        // Print out a few properties of each machine tool
        foreach (MachineTool tool in Controller.Configuration.MachineTools.MachineTools)
        {
            Console.WriteLine("Name: {0}", tool.Name);
            Console.WriteLine("Units: {0}", tool.Units);
        }
        // Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        bool alreadyRunning = Controller.IsRunning;
        Controller myController = Controller.Connect();
        // We only have to force a reset if we were previously running
        if (alreadyRunning) { myController.Reset(); }
    }
    catch(Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }
]]>
</code>
<code language="VB.NET">
<![CDATA[
    
    Try
        ' Set the active parameter file path
        Controller.Configuration.ParameterFile = Path.GetFullPath("test.prma")
        ' Set the 1D calibration file path
        Controller.Configuration.Calibration.Axis1D = Path.GetFullPath("default1D.cal")
        ' Set and print the PLC shared tag file path
        Controller.Configuration.PlcSharedTagFile = Path.GetFullPath("shared.plctag")
        Console.WriteLine("PLC shared tag file path : {0}", Controller.Configuration.PlcSharedTagFile)
        ' Print the Distance logging file path
        Controller.Configuration.DistanceLoggingFile = Path.GetFullPath("distance.txt")
        Console.WriteLine("Distance logging file path : {0}", Controller.Configuration.DistanceLoggingFile)
        ' Print out all program automation entries
        Dim entry As ProgramAutomationEntry
        For Each entry In Controller.Configuration.ProgramAutomation
            Console.WriteLine("Tasks: {0}", entry.Mask)
            Console.WriteLine("Path: {0}", entry.ProgramPath)
            Console.WriteLine("Automation Mode: {0}", entry.Mode)
        Next
        ' Add a new program automation entry
        Dim newEntry As New ProgramAutomationEntry(Path.GetFullPath("program.pgm"), ProgramAutomationMode.RunSilent, TaskMask.T01)
        Controller.Configuration.ProgramAutomation.Add(newEntry)
        ' Print out a few properties of each machine tool
        Dim tool As MachineTool
        For Each tool In Controller.Configuration.MachineTools.MachineTools
            Console.WriteLine("Name: {0}", tool.Name)
            Console.WriteLine("Units: {0}", tool.Units)
        Next
        ' Force the controller to initialize to apply changes made to the active parameter file path, 1D calibration file path, and program automation
        Dim alreadyRunning as Boolean = Controller.IsRunning
        Dim myController As Controller = Controller.Connect
        ' We only have to force a reset if we were previously running
        If alreadyRunning Then
            myController.Reset
        End If
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try
]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.FireWire">
            <summary>Contains firewire settings</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.CncOperatorInterface">
            <summary>Configuration of the CNC Operator Interface</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.FieldbusDevices">
            <summary>
            Configuration of fieldbus devices
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.AccessControl">
            <summary>Contains access control settings</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.SystemConfiguration.Calibration">
            <summary>Contains calibration settings.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.ConnectionConfiguration">
            <summary>Contains configuration settings for client/server</summary>
            <remarks>
            	<para>
            		Please see the <see cref="P:Aerotech.A3200.Configuration.ConnectionConfiguration.Mode"/> for what properties
            		on this class are active (if any).
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ConnectionConfiguration.Mode">
            <summary>Configures what kind of connection mode the current machine is</summary>
            <remarks>
            	<para>
            		Depending on this property, either <see cref="P:Aerotech.A3200.Configuration.ConnectionConfiguration.Server"/>, <see cref="P:Aerotech.A3200.Configuration.ConnectionConfiguration.Client"/>, or
            		no additional settings need to be provided.  For example, if the value is
            		<see cref="F:Aerotech.A3200.Configuration.ConnectionMode.Client"/>, the settings in <see cref="P:Aerotech.A3200.Configuration.ConnectionConfiguration.Client"/> need
            		to be provided for proper operation.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ConnectionConfiguration.Server">
            <summary>Contains the settings if this machine is in <see cref="F:Aerotech.A3200.Configuration.ConnectionMode.Server"/> mode</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ConnectionConfiguration.Client">
            <summary>Contains the settings if this machine is in <see cref="F:Aerotech.A3200.Configuration.ConnectionMode.Client"/> mode</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.ServerConnectionConfiguration">
            <summary>Contains the settings if this machine is in <see cref="F:Aerotech.A3200.Configuration.ConnectionMode.Server"/> mode</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ServerConnectionConfiguration.CommunicationPort">
            <summary>The port on which to accept incoming connections</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ServerConnectionConfiguration.WatchdogTimeout">
            <summary>Specifies the timeout for stopping the SMC</summary>
            <remarks>
            	<para>
            		This specifies the time the server will wait for a communication from the client.
            		If no packets are recieved from the client the SMC will be stopped.
            		This is done as a safeguard for communication errors.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Configuration.ClientConnectionConfiguration">
            <summary>Contains the settings if this machine is in <see cref="F:Aerotech.A3200.Configuration.ConnectionMode.Client"/> mode</summary>
            <remarks>
            	<para>
            		Please note that when client establishes communication with the server, the server machine
            		then establishes a secondary connection coming back.  For the client-&gt;server connection,
            		the server port must be specified by setting <see cref="P:Aerotech.A3200.Configuration.ClientConnectionConfiguration.ServerCommunicationPort"/>.  For server-&gt;client
            		connection, the client port must be specified by setting <see cref="P:Aerotech.A3200.Configuration.ClientConnectionConfiguration.CallbackPort"/>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ClientConnectionConfiguration.CallbackPort">
            <summary>The port on local machine to which the server will connect</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ClientConnectionConfiguration.ServerCommunicationPort">
            <summary>The port on the server machine to which this machine will connect</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ClientConnectionConfiguration.ServerIPAddress">
            <summary>The address of the server machine</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.ConnectionMode">
            <summary>The connection mode of the machine</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.ConnectionMode.Local">
            <summary>Connect to local SMC</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.ConnectionMode.Client">
            <summary>Connect to remote machine that is running the SMC</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.ConnectionMode.Server">
            <summary>This machine is running the SMC and a remote machine will connect</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.FireWireConfiguration">
            <summary>Contains firewire settings</summary>
            <remarks>
            	<para>
            		Please note that these settings can vary from FireWire card to FireWire card
            		and from machine to machine.  These settings should be configured by using
            		the applications provided.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FireWireConfiguration.DeviceId">
            <summary>Contains the device unique number of the FireWire card</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FireWireConfiguration.VendorId">
            <summary>Contains the device vendor unique number of the FIreWire card</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FireWireConfiguration.BusNumber">
            <summary>Contains the number on the bus of the FireWire card</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FireWireConfiguration.SlotNumber">
            <summary>Contains the number of the slot of the FireWire card</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.FireWireConfiguration.FunctionNumber">
            <summary>Contains the function number of the FireWire card</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.ProgramAutomation">
            <summary>Contains the configuration of program automation</summary>
            <remarks>
            	<para>
            		These are settings that configure actions that will be done on programs during initialization of the system.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an untyped enumerator to go over all the entries</summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.GetEnumerator">
            <summary>Returns an enumerator to go over all the entries</summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.Contains(Aerotech.A3200.Configuration.ProgramAutomationEntry)">
            <summary>Checks if a given entry is already added</summary>
            <param name="entry">The entry to check</param>
            <returns>Whether the <paramref name="entry"/> is already in the collection</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.IndexOf(Aerotech.A3200.Configuration.ProgramAutomationEntry)">
            <summary>Finds the index of the given entry</summary>
            <param name="entry">The entry to search for</param>
            <returns>The index of the entry, or -1 if the <paramref name="entry"/> was not found</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.System#Collections#Generic#ICollection{Aerotech#A3200#Configuration#ProgramAutomationEntry}#CopyTo(Aerotech.A3200.Configuration.ProgramAutomationEntry[],System.Int32)">
            <summary>Copies entries from this collection to given collection</summary>
            <param name="entryArr">The array to copy to</param>
            <param name="startIndex">The index to start copying to</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.Add(Aerotech.A3200.Configuration.ProgramAutomationEntry)">
            <summary>Adds a new entry to the collection</summary>
            <param name="entry">The entry to add</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.Insert(System.Int32,Aerotech.A3200.Configuration.ProgramAutomationEntry)">
            <summary>Inserts a new entry into the collection</summary>
            <param name="index">The index at which to insert</param>
            <param name="entry">The entry to insert</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.Remove(Aerotech.A3200.Configuration.ProgramAutomationEntry)">
            <summary>Removes a given entry from the collection</summary>
            <param name="entry">The entry to remove</param>
            <returns>Whether the entry was removed</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.RemoveAt(System.Int32)">
            <summary>Removes the entry at a given index</summary>
            <param name="index">The index at which to remove the entry</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomation.Clear">
            <summary>Clears the collection of any entries</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ProgramAutomation.System#Collections#Generic#ICollection{Aerotech#A3200#Configuration#ProgramAutomationEntry}#IsReadOnly">
            <summary>Whether this collection is read only</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ProgramAutomation.Count">
            <summary>The number of <see cref="T:Aerotech.A3200.Configuration.ProgramAutomationEntry"/></summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ProgramAutomation.Item(System.Int32)">
            <summary>Allows to get/set a specific entry</summary>
            <param name="index">The entry to get/set</param>
            <returns>The entry corresponding to the given index</returns>
            <exception cref="T:System.ArgumentNullException">If one sets the value to <c>null</c></exception>
        </member>
        <member name="T:Aerotech.A3200.Configuration.ProgramAutomationEntry">
            <summary>Represents one entry in <see cref="T:Aerotech.A3200.Configuration.ProgramAutomation"/></summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomationEntry.#ctor(System.String,Aerotech.A3200.Configuration.ProgramAutomationMode,Aerotech.A3200.TaskMask)">
            <summary>Create a new entry with given settings</summary>
            <param name="programPath">The path to the program on which to operate</param>
            <param name="mode">What to do with <paramref name="programPath"/></param>
            <param name="mask">Which task to apply this program to</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomationEntry.GetHashCode">
            <summary>Gets the hashcode of this object</summary>
            <returns>The hashcode</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ProgramAutomationEntry.Equals(System.Object)">
            <summary>Checks equality of two objects</summary>
            <param name="obj">The object to check the equality with</param>
            <returns>Whether the objects contain the same data</returns>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ProgramAutomationEntry.ProgramPath">
            <summary>The path to the program on which to operate</summary>
            <exception cref="T:System.ArgumentNullException">If the given value is <c>null</c></exception>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ProgramAutomationEntry.Mode">
            <summary>What to do with <paramref name="ProgramPath"/></summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ProgramAutomationEntry.Mask">
            <summary>The task to which to apply <see cref="P:Aerotech.A3200.Configuration.ProgramAutomationEntry.ProgramPath"/></summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.MachineToolCollection">
            <summary>Contains the configuration of machine tools</summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineToolCollection.Add(System.Int32,Aerotech.A3200.Configuration.MachineTool)">
            <summary>Adds a new entry to the collection</summary>
            <param name="number">The tool number</param>
            <param name="tool">The tool</param>
            <exception cref="T:System.ArgumentException">If <paramref name="number"/> is less than or equal to 0</exception>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineToolCollection.ContainsKey(System.Int32)">
            <summary>Checks if a tool of given number is present</summary>
            <param name="number">The number to check for</param>
            <returns><c>true</c> if present</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineToolCollection.Remove(System.Int32)">
            <summary>Removes a tool with given number</summary>
            <param name="number">The number of tool to remove</param>
            <returns>Whether a tool was removed</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineToolCollection.Clear">
            <summary>Removes all machine tools</summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineToolCollection.GetEnumerator">
            <summary>Returns enumerator for this collection</summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineToolCollection.Numbers">
            <summary>Returns a collection of all the numbers that have been used</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineToolCollection.MachineTools">
            <summary>Returns a collection of all the machine tools</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineToolCollection.Item(System.Int32)">
            <summary>Gets a machine tool of given number</summary>
            <param name="number">The machine tool number</param>
            <returns>The machine tool with given <paramref name="number"/></returns>
            <exception cref="T:System.ArgumentException">If <paramref name="number"/> is less than or equal to 0</exception>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineToolCollection.Count">
            <summary>How many tools are stored in the collection</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.MachineTool">
            <summary>Represents one tool in <see cref="T:Aerotech.A3200.Configuration.MachineToolCollection"/></summary>
            <remarks>
            	<para>
            		Please see the main help file for information about what the different properties mean
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineTool.#ctor(System.String)">
            <summary>Creates a tool with a given name and default settings</summary>
            <param name="name">The name of the tool</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineTool.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Aerotech.A3200.Configuration.UnitsType)">
            <summary>Creates a tool with the given settings</summary>
            <param name="name">The name of the ool</param>
            <param name="cutterRadius">Cutter radius</param>
            <param name="cutterLength">Cutter length</param>
            <param name="cutterWear">Cutter wear</param>
            <param name="xOffset">X offset</param>
            <param name="yOffset">Y offset</param>
            <param name="feedrate">Feedrate</param>
            <param name="spindleSpeed">Spindle speed</param>
            <param name="unitsType">The units type the tool is for</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineTool.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Aerotech.A3200.Configuration.UnitsType,System.Boolean)">
            <summary>Creates a tool with all the settings</summary>
            <param name="name">The name of the ool</param>
            <param name="cutterRadius">Cutter radius</param>
            <param name="cutterLength">Cutter length</param>
            <param name="cutterWear">Cutter wear</param>
            <param name="xOffset">X offset</param>
            <param name="yOffset">Y offset</param>
            <param name="feedrate">Feedrate</param>
            <param name="spindleSpeed">Spindle speed</param>
            <param name="unitsType">The units type the tool is for</param>
            <param name="toolAvailable">Whether this tool is available on the machine or not</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineTool.GetHashCode">
            <summary>Gets the hashcode of this object</summary>
            <returns>The hascode</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.MachineTool.Equals(System.Object)">
            <summary>Checks if the two objects are equivalent</summary>
            <param name="obj">The object to check for</param>
            <returns>If the objects have the same <see cref="P:Aerotech.A3200.Configuration.MachineTool.Name"/></returns>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.CutterRadius">
            <summary>The cutter radius</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If given value is negative</exception>
            <remarks>
            	<para>Default is 0</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.CutterLength">
            <summary>The cutter length</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If given value is negative</exception>
            <remarks>
            	<para>Default is 0</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.CutterWear">
            <summary>The cutter wear</summary>
            <remarks>
            	<para>Default is 0</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.XOffset">
            <summary>X offset</summary>
            <remarks>
            	<para>Default is 0</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.YOffset">
            <summary>Y offset</summary>
            <remarks>
            	<para>Default is 0</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.Feedrate">
            <summary>Feedrate to use</summary>
            <remarks>
            	<para>Default is 0</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.SpindleSpeed">
            <summary>Spindle speed</summary>
            <remarks>
            	<para>Default is 0</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.Units">
            <summary>The units type this tool is for</summary>
            <remarks>
            	<para>Default is <see cref="F:Aerotech.A3200.Configuration.UnitsType.Primary"/></para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.Available">
            <summary>Whether this tool is available on the machine or not</summary>
            <remarks>
            	<para>Default is true</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.MachineTool.Name">
            <summary>The name of the tool</summary>
            <exception cref="T:System.ArgumentNullException">If the given value is <c>null</c></exception>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.ContinuousDataSamplesRetrievedEventArgs">
            <summary>The event args for <see cref="E:Aerotech.A3200.DataCollection.Data.ContinuousDataSamplesRetrieved"/></summary>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.DataCollection</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class ContinuousDataCollection abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
        config->Axis->Add(AxisDataSignal::PositionCommand, 0);
        config->Axis->Add(AxisDataSignal::PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController->DataCollection->Configuration->SampleTrigger->Time = gcnew SampleTriggerTimeConfiguration(2.0, TimeUnit::Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController->DataCollection->ContinuousDataSamplesRetrieved += gcnew EventHandler<ContinuousDataSamplesRetrievedEventArgs^>(NewDataSamplesArrived);
        myController->DataCollection->StartContinuous(500);
        // Collect data until the user presses a key
        Console::ReadKey();
        // Stop continuous data collection
        myController->DataCollection->Stop();
    }
    private:
    static void NewDataSamplesArrived(Object^ sender, ContinuousDataSamplesRetrievedEventArgs^ e)
    {
        DataCollectionResults^ results = e->Results;
        // Print out the 0th point collected for position command and feedback
        Console::WriteLine(" Position Command: {0}", results->Axis[AxisDataSignal::PositionCommand, 0]);
        Console::WriteLine(" Position Feedback: {0}", results->Axis[AxisDataSignal::PositionFeedback, 0]);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class ContinuousDataCollection
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration config = myController.DataCollection.Configuration;
        config.Axis.Add(AxisDataSignal.PositionCommand, 0);
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController.DataCollection.ContinuousDataSamplesRetrieved += new EventHandler<ContinuousDataSamplesRetrievedEventArgs>(ContinuousDataCollection.NewDataSamplesArrived);
        myController.DataCollection.StartContinuous(500);
        // Collect data until the user presses a key
        Console.ReadKey();
        // Stop continuous data collection
        myController.DataCollection.Stop();
    }

    private static void NewDataSamplesArrived(object sender, ContinuousDataSamplesRetrievedEventArgs e)
    {
        DataCollectionResults results = e.Results;
        // Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis[AxisDataSignal.PositionCommand, 0]);
        Console.WriteLine(" Position Feedback: {0}", results.Axis[AxisDataSignal.PositionFeedback, 0]);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class ContinuousDataCollection
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Add position command and position feedback on axis 0 as signals to collect.
        Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
        config.Axis.Add(AxisDataSignal.PositionCommand, 0)
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0)
        ' Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds)
        ' After 500 points have been collected, raise an event so we receive the points
        AddHandler myController.DataCollection.ContinuousDataSamplesRetrieved, New EventHandler(Of ContinuousDataSamplesRetrievedEventArgs)(AddressOf ContinuousDataCollection.NewDataSamplesArrived)
        myController.DataCollection.StartContinuous(500)
        ' Collect data until the user presses a key
        Console.ReadKey
        ' Stop continuous data collection
        myController.DataCollection.Stop
    End Sub

    Private Shared Sub NewDataSamplesArrived(ByVal sender As Object, ByVal e As ContinuousDataSamplesRetrievedEventArgs)
        Dim results As DataCollectionResults = e.Results
        ' Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, 0))
        Console.WriteLine(" Position Feedback: {0}", results.Axis.Item(AxisDataSignal.PositionFeedback, 0))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.ContinuousDataSamplesRetrievedEventArgs.Results">
            <summary>The retrieved data</summary>
            <remarks>
            	<para>
            		The number of points will be the same as what was passed to <see cref="M:Aerotech.A3200.DataCollection.Data.StartContinuous(System.Int32)"/>.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.DataCollectionConfiguration">
            <summary>Represents the configuration for data collection</summary>
            <remarks>
            	<para>See <see cref="P:Aerotech.A3200.DataCollection.Data.Configuration"/> for use</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataCollectionConfiguration.#ctor">
            <summary>Creates a new blank configuration with default settings</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataCollectionConfiguration.Clear">
            <summary>Reset the configuration to the original state</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataCollectionConfiguration.System#ICloneable#Clone">
            <summary>Creates a shallow copy of this object</summary>
            <returns>A copy of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.CollectionPeriod">
            <summary>The time between the samples/points in msec.</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.PointsToCollect">
            <summary>How many samples/points to collect</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.SampleTrigger">
            <summary>Sets the condition for when a sample point will be collected for each signal.</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.System">
            <summary>The system signals that will be collected</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.Axis">
            <summary>The axis signals that will be collected</summary>
            <remarks>
            	<para>These come from the SMC, therefore the number that can be collected is not limited.</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.AxisExtended">
            <summary>The axis extended signals that will be collected</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.Task">
            <summary>The task signals that will be collected</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.Variable">
            <summary>The variable signals that will be collected</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1">
            <summary>Base class for different kinds of data collection signals</summary>
            <typeparam name="TEntry">The kind of entries that class will contain</typeparam>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.entries">
            <summary>The list of signals to be collected</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.System#Collections#Generic#ICollection{TEntry}#CopyTo(`0[],System.Int32)">
            <summary>Copies entries to given array</summary>
            <param name="entryArr">The array to copy the values to</param>
            <param name="index">The array index to start at</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets untyped enumerator for this collection</summary>
            <returns>The untyped enumerator for this colletion to use with <c>foreach</c></returns>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.GetEnumerator">
            <summary>Provides enumerator for <c>foreach</c></summary>
            <returns>The enumerator for this collection</returns>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.Contains(`0)">
            <summary>Check if this collection contains the <paramref name="entry"/></summary>
            <param name="entry">The entry to check</param>
            <returns><c>true</c> if given <paramref name="entry"/> </returns>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.Add(`0)">
            <summary>Adds a new entry to the collection</summary>
            <param name="entry">The entry to add</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.Remove(`0)">
            <summary>Removes an entry from the collection</summary>
            <param name="entry">The entry to remove</param>
            <returns><c>true</c> if entry was removed, <c>false</c> if entry was not found</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.Clear">
            <summary>Removes all entries from this collection</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.Count">
            <summary>The number of signals configured for data collection</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataSignalEntryCollection`1.System#Collections#Generic#ICollection{TEntry}#IsReadOnly">
            <summary>Whether this collection is readonly</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.SystemDataSignalEntryCollection">
            <summary>Collection of configured system signals</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SystemDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.SystemDataSignal)">
            <summary>Adds a signal to collect</summary>
            <param name="item">The signal to collect</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SystemDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.SystemDataSignal,System.Int32)">
            <summary>Adds a signal to collect</summary>
            <param name="item">The signal to collect</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SystemDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.SystemDataSignal)">
            <summary>Removes a signal from being collected</summary>
            <param name="item">The signal to remove</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SystemDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.SystemDataSignal,System.Int32)">
            <summary>Removes a signal from being collected</summary>
            <param name="item">The signal to remove</param>
            <param name="argument">Optional argument for the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.AxisDataSignalEntryCollection">
            <summary>Collection of configured axis signals</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.AxisDataSignal,System.Int32)">
            <summary>Adds a signal to collect</summary>
            <param name="signal">The signal to collect</param>
            <param name="axisIndex">The axis on which to collect the signal</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.AxisDataSignal,System.String)">
            <summary>Adds a signal to collect</summary>
            <param name="signal">The signal to collect</param>
            <param name="axisName">The name of the axis on which to collect the signal</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.AxisDataSignal,System.Int32,System.Int32)">
            <summary>Adds a signal to collect</summary>
            <param name="signal">The signal to collect</param>
            <param name="axisIndex">The axis on which to collect the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.AxisDataSignal,System.String,System.Int32)">
            <summary>Adds a signal to collect</summary>
            <param name="signal">The signal to collect</param>
            <param name="axisName">The name of the axis on which to collect the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.AxisDataSignal,System.Int32)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="axisIndex">The axis from which to remove the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.AxisDataSignal,System.String)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="axisName">The name of the axis from which to remove the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.AxisDataSignal,System.Int32,System.Int32)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="axisIndex">The axis from which to remove the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</remarks>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.AxisDataSignal,System.String,System.Int32)">
            <summary>Removes a signal from being collected.</summary>
            <param name="signal">The signal to remove.</param>
            <param name="axisName">The name of the axis from which to remove the signal.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</remarks>
            <returns><c>true</c> if was removed, <c>false</c> if was not found.</returns>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntryCollection">
            <summary>Collection of configured axis extended signals</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.Int32)">
            <summary>Adds a signal to collect.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="axisIndex">The axis on which to collect the signal.</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.String)">
            <summary>Adds a signal to collect.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="axisName">The name of the axis on which to collect the signal.</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.Int32,System.Int32)">
            <summary>Adds a signal to collect</summary>
            <param name="signal">The signal to collect</param>
            <param name="axisIndex">The axis on which to collect the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.String,System.Int32)">
            <summary>Adds a signal to collect.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="axisName">The name of the axis on which to collect the signal.</param>
            <param name="argument">Option argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of the signals and their optional argument.</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.Int32)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="axisIndex">The axis on which to collect the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.String)">
            <summary>Removes a signal from being collected.</summary>
            <param name="signal">The signal to remove.</param>
            <param name="axisName">The name of the axis to remove the signal from.</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found.</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.Int32,System.Int32)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="axisIndex">The axis on which to collect the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.String,System.Int32)">
            <summary>Removes a signal from being collected.</summary>
            <param name="signal">The signal to remove.</param>
            <param name="axisName">The axis on which to collect the signal.</param>
            <param name="argument">Optional argument for the signal.</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found.</returns>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a DataCollectionConfiguraton.</remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.TaskDataSignalEntryCollection">
            <summary>Collection of configured task signals</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.TaskDataSignal,Aerotech.A3200.TaskId)">
            <summary>Adds a signal to collect</summary>
            <param name="signal">The signal to collect</param>
            <param name="taskId">The task on which to collect the signal</param>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.TaskDataSignal,System.Int32)">
            <summary>Adds a signal to collect.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="taskIndex">The number of the task on which to collect the signal.</param>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.TaskDataSignal,Aerotech.A3200.TaskId,System.Int32)">
            <summary>Adds a signal to collect</summary>
            <param name="signal">The signal to collect</param>
            <param name="taskId">The task on which to collect the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            	<para><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntryCollection.Add(Aerotech.A3200.DataCollection.TaskDataSignal,System.Int32,System.Int32)">
            <summary>Adds a signal to collect.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="taskIndex">The number of the task on which to collect the signal.</param>
            <param name="argument">Option argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            	<para><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.TaskDataSignal,Aerotech.A3200.TaskId)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="taskId">The task on which to collect the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.TaskDataSignal,System.Int32)">
            <summary>Removes a signal from being collected.</summary>
            <param name="signal">The signal to remove.</param>
            <param name="taskIndex">The number of the task from which to remove the signal.</param>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.TaskDataSignal,Aerotech.A3200.TaskId,System.Int32)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="taskId">The task on which to collect the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntryCollection.Remove(Aerotech.A3200.DataCollection.TaskDataSignal,System.Int32,System.Int32)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="taskIndex">The number of the task on which to collect the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.VariableDataSignalEntryCollection">
            <summary>Collection of configured variable signals</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.VariableDataSignalEntryCollection.Add(System.String)">
            <summary>Adds a variable signal to collect</summary>
            <param name="variableName">The variable to collect</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.VariableDataSignalEntryCollection.Add(System.String,Aerotech.A3200.TaskId)">
            <summary>Adds a signal to collect</summary>
            <param name="variableName">The variable to collect</param>
            <param name="taskId">The index of the variable (for task-based variables)</param>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.VariableDataSignalEntryCollection.Add(System.String,System.Int32)">
            <summary>Adds a signal to collect.</summary>
            <param name="variableName">The variable to collect.</param>
            <param name="taskIndex">The index of the variable (for task-based variables)</param>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.VariableDataSignalEntryCollection.Remove(System.String)">
            <summary>Removes a variable signal from being collected.</summary>
            <param name="variableName">The variable signal to remove.</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found.</returns>
            <remarks>
            	<para>
            		If there are multiple signals in the collection that share the same variable name
            		but are different by index, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix TaskId and taskIndex references while creating a DataCollectionConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.VariableDataSignalEntryCollection.Remove(System.String,Aerotech.A3200.TaskId)">
            <summary>Removes a variable signal from being collected</summary>
            <param name="variableName">The variable signal to remove</param>
            <param name="taskId">The TaskId of the variable (for task-based variables)</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while create a DataCollectionConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.VariableDataSignalEntryCollection.Remove(System.String,System.Int32)">
            <summary>Removes a variable signal from being collected.</summary>
            <param name="variableName">The variable signal to remove.</param>
            <param name="taskIndex">The number of the task for variable to be removed (for task-based variables).</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found.</returns>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while create a DataCollectionConfiguration.</remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.DataSignalEntry`3">
            <summary>The base class for a configured data collection item.</summary>
            <typeparam name="TSignal">The kind of signal it is.</typeparam>
            <typeparam name="TIndexName">The name of the index used.</typeparam>
            <typeparam name="TIndex">The kind of index used.</typeparam>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataSignalEntry`3.GetHashCode">
            <summary>Gets the hashcode of this class</summary>
            <returns></returns>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataSignalEntry`3.Equals(System.Object)">
            <summary>Checks for equality with another object.</summary>
            <param name="obj">The object to check.</param>
            <returns><c>true</c> if objects are the same type and contain the same information.</returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataSignalEntry`3.Signal">
            <summary>Which signal to collect</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataSignalEntry`3.IndexName">
            <summary>The name of the axis or the TaskId of the task to collect the signal on.</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataSignalEntry`3.Index">
            <summary>Which axis or task to collect the signal on</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataSignalEntry`3.Argument">
            <summary>Optional argument for given configuration item</summary>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.AxisDataSignalEntry">
            <summary>The configured data collection item for axis signals</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.AxisDataSignal,System.Int32)">
            <summary>Creates a new configuration entry based on the AxisIndex.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="index">The axis index to collect the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.AxisDataSignal,System.String)">
            <summary>Creates a new configuration entry based on the AxisName.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="axisName">The name of the axis to collect the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.AxisDataSignal,System.Int32,System.Int32)">
            <summary>Creates a new configuration entry based on the AxisIndex.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="index">The axis index to collect the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.AxisDataSignal,System.String,System.Int32)">
            <summary>Creates a new configuration entry based on the AxisName.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="axisName">The name of the axis to collect the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments.</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntry">
            <summary>The configured data collection item for axis extended signals.</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="index">The axis index to collect the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.String)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="axisName">The name of the axis to collect the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.Int32,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="index">The axis index to collect the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.AxisExtendedDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.String,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="axisName">The name of the axis to collect the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments.</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.TaskDataSignalEntry">
            <summary>The configured data collection item for task signals</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.TaskDataSignal,System.Nullable{Aerotech.A3200.TaskId})">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="taskId">The TaskId of the task to collect the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.TaskDataSignal,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="taskIndex">The number of the task to collect the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.TaskDataSignal,System.Nullable{Aerotech.A3200.TaskId},System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="taskId">The TaskId of the task to collect the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.TaskDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.TaskDataSignal,System.Int32,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to collect.</param>
            <param name="taskIndex">The number of the task to collect the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments.</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.SystemDataSignalEntry">
            <summary>The configured data collection item for system signals</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SystemDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.SystemDataSignal)">
            <summary>Creates a new configuration entry</summary>
            <param name="signal">The signal to collect</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SystemDataSignalEntry.#ctor(Aerotech.A3200.DataCollection.SystemDataSignal,System.Int32)">
            <summary>Creates a new configuration entry</summary>
            <param name="signal">The signal to collect</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.VariableDataSignalEntry">
            <summary>The configuration data collection item for variables</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.VariableDataSignalEntry.#ctor(System.String)">
            <summary>Creates a new configuration entry</summary>
            <param name="variableName">The variable signal to collect</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.VariableDataSignalEntry.#ctor(System.String,System.Nullable{Aerotech.A3200.TaskId})">
            <summary>Creates a new configuration entry.</summary>
            <param name="variableName">The variable signal to collect.</param>
            <param name="taskId">The TaskId to collect the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.VariableDataSignalEntry.#ctor(System.String,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="variableName">The variable signal to collect.</param>
            <param name="taskIndex">The number of the task to collect the signal on.</param>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.SampleTriggerConfiguration">
            <summary>Configure for time or edge based collection.</summary>
            <example>
        This example uses the following namespaces: 
        <ul>
            <li>Aerotech.A3200</li>
            <li>Aerotech.A3200.DataCollection</li>
            <li>Aerotech.A3200.Status</li>
            <li>System</li>
        </ul>
        <code language="C++">
            <![CDATA[
            
                // Connect to the controller.
                Controller^ myController = Controller::Connect();
                // Add position feedback on axis X as signal to collect.
                DataCollectionConfiguration^ configuration = myController->DataCollection->Configuration;
                configuration->Axis->Add(AxisDataSignal::PositionFeedback, "X");
                // Collect 100 points of data for each signal.
                configuration->PointsToCollect = 100;
                // Collect a point of data every time bit number 1 of DigitalOutput on axis X increases.
                myController->DataCollection->Configuration->SampleTrigger->Change = gcnew SampleTriggerChangeConfiguration(AxisStatusSignal::DigitalOutput, 0, 2, DataCollectionSampleTrigger::OnIncrease) ;
                // Start the data collection
                myController->DataCollection->Start();
                // Toggle the DigitalOutput bit to trigger collection of data.
                for (int i = 0 ; (i < configuration->PointsToCollect); i++)
                {
                    myController->Commands->IO->DigitalOutputBit(1, 0, 0);
                    myController->Commands->IO->DigitalOutputBit(1, 0, 1);
                }
                // Retrieve the data points collected
                DataCollectionResults^ data = myController->DataCollection->GetData();
                // Print out the 75th position feedback point collected
                Console::WriteLine("Position Feedback for Axis X: {0}", data->Axis->Item[AxisDataSignal::PositionFeedback, "X"]->Points[74]);

            ]]>
        </code>
        <code language="C#">
            <![CDATA[

                // Connect to the controller.
                Controller myController = Controller.Connect();
                // Add position feedback on axis X as signal to collect.
                DataCollectionConfiguration configuration = myController.DataCollection.Configuration;
                configuration.Axis.Add(AxisDataSignal.PositionFeedback, "X");
                // Collect 100 points of data for each signal.
                configuration.PointsToCollect = 100;
                // Collect a point of data every time bit number 1 of DigitalOutput on axis X increases.
                myController.DataCollection.Configuration.SampleTrigger.Change = new SampleTriggerChangeConfiguration(AxisStatusSignal.DigitalOutput, 0, 2, DataCollectionSampleTrigger.OnIncrease);
                // Start the data collection
                myController.DataCollection.Start();
                // Toggle the DigitalOutput bit to trigger collection of data.
                for (int i = 0; i < configuration.PointsToCollect; i++)
                {
                    myController.Commands.IO.DigitalOutputBit(1, 0, 0);
                    myController.Commands.IO.DigitalOutputBit(1, 0, 1);
                }
                // Retrieve the data points collected
                DataCollectionResults data = myController.DataCollection.GetData();
                // Print out the 75th position feedback point collected
                Console.WriteLine("Position Feedback for Axis X: {0}", data.Axis[AxisDataSignal.PositionFeedback, "X"].Points[0x4a]);

            ]]>
        </code>
        <code language="VB.NET">
            <![CDATA[

                ' Connect to the controller.
                Dim myController As Controller = Controller.Connect
                ' Add position feedback on axis X as signal to collect.
                Dim configuration As DataCollectionConfiguration = myController.DataCollection.Configuration
                configuration.Axis.Add(AxisDataSignal.PositionFeedback, "X")
                ' Collect 100 points of data for each signal.
                configuration.PointsToCollect = 100
                ' Collect a point of data every time bit number 1 of DigitalOutput on axis X increases.
                myController.DataCollection.Configuration.SampleTrigger.Change = New SampleTriggerChangeConfiguration(AxisStatusSignal.DigitalOutput, 0, 2, DataCollectionSampleTrigger.OnIncrease)
                ' Start the data collection
                myController.DataCollection.Start
                ' Toggle the DigitalOutput bit to trigger collection of data.
                Dim i As Integer
                For i = 0 To configuration.PointsToCollect - 1
                    myController.Commands.IO.DigitalOutputBit(1, 0, 0)
                    myController.Commands.IO.DigitalOutputBit(1, 0, 1)
                Next i
                ' Retrieve the data points collected
                Dim data As DataCollectionResults = myController.DataCollection.GetData
                ' Print out the 75th position feedback point collected
                Console.WriteLine("Position Feedback for Axis X: {0}", data.Axis.Item(AxisDataSignal.PositionFeedback, "X").Points(&H4A))

            ]]>
        </code>

    </example>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerConfiguration.Change">
            <summary>Set to collect on a change-based system.</summary>
            <remarks>Will trigger when signal changes.</remarks>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerConfiguration.Time">
            <summary>Set to collect on a time-based system.</summary>
            <remarks>Specify delay between points.</remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration">
            <summary>Configure change-based collection.</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.AxisStatusSignal,System.Int32,System.Int32,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="axis">The axis on which to monitor the signal on.</param>
            <param name="optional">The optional argument for the signal to monitor.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
            <remarks>See topic "DATACOLLECT ITEM Command" in the A3200 Help File for details on <paramref name="optional"/></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.AxisStatusSignal,System.Int32,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="axis">The axis on which to monitor the signal on.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.AxisStatusSignal,System.String,System.Int32,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="axis">The axis on which to monitor the signal on.</param>
            <param name="optional">The optional argument for the signal to monitor.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
            <remarks>See topic "DATACOLLECT ITEM Command" in the A3200 Help File for details on <paramref name="optional"/></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.AxisStatusSignal,System.String,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="axis">The axis on which to monitor the signal on.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.TaskStatusSignal,System.Int32,System.Int32,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="task">The task on which to monitor the signal on.</param>
            <param name="optional">The optional argument for the signal to monitor.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
            <remarks>See topic "DATACOLLECT ITEM Command" in the A3200 Help File for details on <paramref name="optional"/></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.TaskStatusSignal,System.Int32,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="task">The task on which to monitor the signal on.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.TaskStatusSignal,Aerotech.A3200.TaskId,System.Int32,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="task">The task on which to monitor the signal on.</param>
            <param name="optional">The optional argument for the signal to monitor.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
            <remarks>See topic "DATACOLLECT ITEM Command" in the A3200 Help File for details on <paramref name="optional"/></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.TaskStatusSignal,Aerotech.A3200.TaskId,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="task">The task on which to monitor the signal on.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.SystemStatusSignal,System.Int32,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="optional">The optional argument for the signal to monitor.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
            <remarks>See topic "DATACOLLECT ITEM Command" in the A3200 Help File for details on <paramref name="optional"/></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(Aerotech.A3200.Status.SystemStatusSignal,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified signal.</summary>
            <param name="signal">The signal to monitor for changes.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(System.String,System.Int32,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified variable.</summary>
            <param name="variable">The variable to monitor for changes.</param>
            <param name="task">The task on which to monitor the variable on.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(System.String,Aerotech.A3200.TaskId,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified variable.</summary>
            <param name="variable">The variable to monitor for changes.</param>
            <param name="task">The task on which to monitor the variable on.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.#ctor(System.String,Aerotech.A3200.DataCollectionSampleTrigger)">
            <summary>Collects on a change-based system for the specified variable.</summary>
            <param name="variable">The variable to monitor for changes.</param>
            <param name="trigger">The condition to meet for the sample to be collected.</param>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.Signal">
            <summary>The Item to monitor for changes.</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.Index">
            <summary>The index on which to monitor the signal.</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.Optional">
            <summary>The optional argument for the signal to monitor.  See topic "DATACOLLECT ITEM Command" in the A3200 Help File.</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.Trigger">
            <summary>The condition to meet for the sample to be collected.</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.VariableName">
            <summary>The name of the variable to trigger on.</summary>
            <remarks>Null unless variable name is passed.</remarks>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerChangeConfiguration.AxisName">
            <summary>The name of the axis to trigger on.</summary>
            <remarks>Null unless axis name is passed.</remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.SampleTriggerTimeConfiguration">
            <summary>Configure change-based collection.</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.SampleTriggerTimeConfiguration.#ctor(System.Double,Aerotech.A3200.Units.TimeUnit)">
            <summary>Collects on a time-based system using the specified delay between points.</summary>
            <param name="collectionPeriod">The time between the samples/points.</param>
            <param name="units">The units used for <see cref="F:Aerotech.A3200.DataCollection.SampleTriggerTimeConfiguration.collectionPeriod"/>.</param>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerTimeConfiguration.CollectionPeriod">
            <summary>The time between the samples/points.</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SampleTriggerTimeConfiguration.Units">
            <summary>The units used for <see cref="P:Aerotech.A3200.DataCollection.SampleTriggerTimeConfiguration.CollectionPeriod"/>.</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.DataCollectionResults">
            <summary>Contains all the data that has been collected</summary>
            <remarks>
            	<para>This can be retrieved from <see cref="M:Aerotech.A3200.DataCollection.Data.GetData"/></para>
            	<para>
            		The unit information can be accessed from <see cref="P:Aerotech.A3200.DataCollection.DataCollectionResults.Units"/>
            		and the data can be converted to a different set of units by calling
            		<see cref="M:Aerotech.A3200.DataCollection.DataCollectionResults.ConvertUnits(Aerotech.A3200.Units.UnitInformation)"/>.  The unit names are available
            		from <see cref="P:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.UnitName"/>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.DataCollection</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class ContinuousDataCollection abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
        config->Axis->Add(AxisDataSignal::PositionCommand, 0);
        config->Axis->Add(AxisDataSignal::PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController->DataCollection->Configuration->SampleTrigger->Time = gcnew SampleTriggerTimeConfiguration(2.0, TimeUnit::Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController->DataCollection->ContinuousDataSamplesRetrieved += gcnew EventHandler<ContinuousDataSamplesRetrievedEventArgs^>(NewDataSamplesArrived);
        myController->DataCollection->StartContinuous(500);
        // Collect data until the user presses a key
        Console::ReadKey();
        // Stop continuous data collection
        myController->DataCollection->Stop();
    }
    private:
    static void NewDataSamplesArrived(Object^ sender, ContinuousDataSamplesRetrievedEventArgs^ e)
    {
        DataCollectionResults^ results = e->Results;
        // Print out the 0th point collected for position command and feedback
        Console::WriteLine(" Position Command: {0}", results->Axis[AxisDataSignal::PositionCommand, 0]);
        Console::WriteLine(" Position Feedback: {0}", results->Axis[AxisDataSignal::PositionFeedback, 0]);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class ContinuousDataCollection
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration config = myController.DataCollection.Configuration;
        config.Axis.Add(AxisDataSignal.PositionCommand, 0);
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController.DataCollection.ContinuousDataSamplesRetrieved += new EventHandler<ContinuousDataSamplesRetrievedEventArgs>(ContinuousDataCollection.NewDataSamplesArrived);
        myController.DataCollection.StartContinuous(500);
        // Collect data until the user presses a key
        Console.ReadKey();
        // Stop continuous data collection
        myController.DataCollection.Stop();
    }

    private static void NewDataSamplesArrived(object sender, ContinuousDataSamplesRetrievedEventArgs e)
    {
        DataCollectionResults results = e.Results;
        // Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis[AxisDataSignal.PositionCommand, 0]);
        Console.WriteLine(" Position Feedback: {0}", results.Axis[AxisDataSignal.PositionFeedback, 0]);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class ContinuousDataCollection
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Add position command and position feedback on axis 0 as signals to collect.
        Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
        config.Axis.Add(AxisDataSignal.PositionCommand, 0)
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0)
        ' Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds)
        ' After 500 points have been collected, raise an event so we receive the points
        AddHandler myController.DataCollection.ContinuousDataSamplesRetrieved, New EventHandler(Of ContinuousDataSamplesRetrievedEventArgs)(AddressOf ContinuousDataCollection.NewDataSamplesArrived)
        myController.DataCollection.StartContinuous(500)
        ' Collect data until the user presses a key
        Console.ReadKey
        ' Stop continuous data collection
        myController.DataCollection.Stop
    End Sub

    Private Shared Sub NewDataSamplesArrived(ByVal sender As Object, ByVal e As ContinuousDataSamplesRetrievedEventArgs)
        Dim results As DataCollectionResults = e.Results
        ' Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, 0))
        Console.WriteLine(" Position Feedback: {0}", results.Axis.Item(AxisDataSignal.PositionFeedback, 0))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.DataCollectionResults.ConvertUnits(Aerotech.A3200.Units.UnitInformation)">
            <summary>Converts the data in this data collectionresult to a new set of units</summary>
            <param name="newUnits">The units to convert to</param>
            <returns>The same data, but in <paramref name="newUnits"/> set of units</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="newUnits"/> is null</exception>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>Aerotech.A3200.Units</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // Collect Position Feedback on axis X
        myController->DataCollection->Configuration->Axis->Add(AxisDataSignal::PositionFeedback, "X");
        myController->DataCollection->Configuration->PointsToCollect = 10;
        myController->DataCollection->Start();
        DataCollectionResults^ results = myController->DataCollection->GetData(10);
        // Convert the results to be in secondary units per minute
        results = results->ConvertUnits(gcnew UnitInformation(DistanceUnit::Secondary, TimeUnit::Minutes) );
        for (int i = 0 ; (i < results->CollectedPoints); i++)
        {
            Console::WriteLine("Position Feedback : {0}", results->Axis[AxisDataSignal::PositionFeedback, "X"]->Points[i]);
        }
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // Collect Position Feedback on axis X
        myController.DataCollection.Configuration.Axis.Add(AxisDataSignal.PositionFeedback, "X");
        myController.DataCollection.Configuration.PointsToCollect = 10;
        myController.DataCollection.Start();
        DataCollectionResults results = myController.DataCollection.GetData(10);
        // Convert the results to be in secondary units per minute
        results = results.ConvertUnits(new UnitInformation(DistanceUnit.Secondary, TimeUnit.Minutes));
        for (int i = 0; i < results.CollectedPoints; i++)
        {
            Console.WriteLine("Position Feedback : {0}", results.Axis[AxisDataSignal.PositionFeedback, "X"].Points[i]);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' Collect Position Feedback on axis X
        myController.DataCollection.Configuration.Axis.Add(AxisDataSignal.PositionFeedback, "X")
        myController.DataCollection.Configuration.PointsToCollect = 10
        myController.DataCollection.Start
        Dim results As DataCollectionResults = myController.DataCollection.GetData(10)
        ' Convert the results to be in secondary units per minute
        results = results.ConvertUnits(New UnitInformation(DistanceUnit.Secondary, TimeUnit.Minutes))
        Dim i As Integer
        For i = 0 To results.CollectedPoints - 1
            Console.WriteLine("Position Feedback : {0}", results.Axis(AxisDataSignal.PositionFeedback, "X").Points(i))
        Next i
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionResults.Units">
            <summary>Contains information about what units the data is in</summary>
            <remarks>
            	<para>By default the units are <see cref="F:Aerotech.A3200.Units.DistanceUnit.Counts"/> per <see cref="F:Aerotech.A3200.Units.TimeUnit.Milliseconds"/></para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionResults.CollectionPeriod">
            <summary>Time between each sample/point in msec</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionResults.CollectedPoints">
            <summary>The number of samples/points collected</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionResults.System">
            <summary>Contains system signals collected</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionResults.Axis">
            <summary>Contains axis signals collected</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionResults.AxisExtended">
            <summary>Contains axis extended signals collected</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionResults.Task">
            <summary>Contains task signals collected</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionResults.Variable">
            <summary>Contains variable signals collected</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.CategoryDataResults`4">
            <summary>Base class for different categories of collected signals</summary>
            <typeparam name="TSignal">The kind of signal.</typeparam>
            <typeparam name="TIndexName">The name of the index used.</typeparam>
            <typeparam name="TIndex">The kind of index used.</typeparam>
            <typeparam name="TEntry">The kind of data container entries contained.</typeparam>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.CategoryDataResults`4.results">
            <summary>The results of the data collection</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CategoryDataResults`4.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an untyped enumerator for this collection</summary>
            <returns>An untyped enumerator to use with <c>foreach</c></returns>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CategoryDataResults`4.GetEnumerator">
            <summary>Gets the enumerator for this collection</summary>
            <returns>The enumerator to use with <c>foreach</c></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.CategoryDataResults`4.Item(Aerotech.A3200.DataCollection.DataSignalEntry{`0,`1,`2})">
            <summary>Gets data that corresponds to a given </summary>
            <param name="entry">The configuration entry</param>
            <returns>The data corresponding to the <paramref name="entry"/>.</returns>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.SystemDataResults">
            <summary>Contains all collected system signals</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SystemDataResults.Item(Aerotech.A3200.DataCollection.SystemDataSignal)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.SystemDataResults.Item(Aerotech.A3200.DataCollection.SystemDataSignal,System.Int32)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <param name="argument">Optional argument for the signal</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.AxisDataResults">
            <summary>Contains all collected axis signals</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.AxisDataResults.Item(Aerotech.A3200.DataCollection.AxisDataSignal,System.Int32)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <param name="axisIndex">The axis the signal was collected on</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.AxisDataResults.Item(Aerotech.A3200.DataCollection.AxisDataSignal,System.String)">
            <summary>Gets the given collected signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="axisName">The name of the axis the signal was collected on.</param>
            <returns>The collected <paramref name="signal"/>.</returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.AxisDataResults.Item(Aerotech.A3200.DataCollection.AxisDataSignal,System.Int32,System.Int32)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <param name="axisIndex">The axis the signal was collected on</param>
            <param name="argument">Optional argument for the signal</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.AxisDataResults.Item(Aerotech.A3200.DataCollection.AxisDataSignal,System.String,System.Int32)">
            <summary>Gets the given collected signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="axisName">The name of the axis the signal was collected on.</param>
            <param name="argument">Optional argument for the signal</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.AxisExtendedDataResults">
            <summary>Contains all collected axis extended signals</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.AxisExtendedDataResults.Item(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.Int32)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <param name="axisIndex">The axis the signal was collected on</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.AxisExtendedDataResults.Item(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.String)">
            <summary>Gets the given collected signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="axisName">The name of the axis the signal was collected on.</param>
            <returns>The collected <paramref name="signal"/>.</returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.AxisExtendedDataResults.Item(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.Int32,System.Int32)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <param name="axisIndex">The axis the signal was collected on</param>
            <param name="argument">Optional argument for the signal</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.AxisExtendedDataResults.Item(Aerotech.A3200.DataCollection.AxisExtendedDataSignal,System.String,System.Int32)">
            <summary>Gets the given signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="axisName">The name of the axis the signal was collected on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <returns>The collected <paramref name="signal"/>.</returns>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.TaskDataResults">
            <summary>Contains all collected task signals</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.TaskDataResults.Item(Aerotech.A3200.DataCollection.TaskDataSignal,Aerotech.A3200.TaskId)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <param name="taskId">The task the signal was collected on</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.TaskDataResults.Item(Aerotech.A3200.DataCollection.TaskDataSignal,System.Int32)">
            <summary>Gets the given collected signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="taskIndex">The number of the task the signal was collected on.</param>
            <returns>The collected <paramref name="signal"/>.</returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.TaskDataResults.Item(Aerotech.A3200.DataCollection.TaskDataSignal,Aerotech.A3200.TaskId,System.Int32)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <param name="taskId">The task the signal was collected on</param>
            <param name="argument">Optional argument for the signal</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.TaskDataResults.Item(Aerotech.A3200.DataCollection.TaskDataSignal,System.Int32,System.Int32)">
            <summary>Gets the given collected signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="taskIndex">The number of the task the signal was collected on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <returns>The collected <paramref name="signal"/>.</returns>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.VariableDataResults">
            <summary>Contains all collected variable signals</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.VariableDataResults.Item(System.String)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.VariableDataResults.Item(System.String,Aerotech.A3200.TaskId)">
            <summary>Gets the given collected signal</summary>
            <param name="signal">The signal to get</param>
            <param name="taskId">The index the signal was collected on</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.VariableDataResults.Item(System.String,System.Int32)">
            <summary>Gets the given collected signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="taskIndex">The number of the taks the signal was collected on.</param>
            <returns>The collected <paramref name="signal"/>.</returns>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3">
            <summary>Base class for collected signals.</summary>
            <typeparam name="TSignal">The kind of signal.</typeparam>
            <typeparam name="TIndexName">The kind of name for the index.</typeparam>
            <typeparam name="TIndex">The kind of index.</typeparam>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.points_">
            <summary>The points collected</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.unitName_">
            <summary>The name of the unit</summary>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints(System.Int32[])">
            <summary>Converts <paramref name="Points"/> to array of <see cref="T:System.Int32"/></summary>
            <param name="array">The array to store the data in</param>
            <returns>The array containing the data</returns>
            <remarks>
            	<para>
            		If <paramref name="array"/> is <c>null</c> or not big enough for the data,
            		a new array will be automatically allocated, and returned.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints(System.Single[])">
            <summary>Converts <paramref name="Points"/> to array of <see cref="T:System.Single"/></summary>
            <param name="array">The array to store the data in</param>
            <returns>The array containing the data</returns>
            <remarks>
            	<para>
            		If <paramref name="array"/> is <c>null</c> or not big enough for the data,
            		a new array will be automatically allocated, and returned.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints``1">
            <summary>Converts <paramref name="Points"/> to array of provided type</summary>
            <returns>The array containing the data or <c>null</c> if unknown type given</returns>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints(Aerotech.A3200.Status.AxisStatus[])">
            <summary>Converts <paramref name="Points"/> to array of <see cref="T:Aerotech.A3200.Status.AxisStatus"/></summary>
            <param name="array">The array to store the data in</param>
            <returns>The array containing the data</returns>
            <remarks><para>If <paramref name="array"/> is <c>null</c> or not big enough for the data, a new array will automatically be allocated, and returned.</para></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints(Aerotech.A3200.Status.AxisFault[])">
            <summary>Converts <paramref name="Points"/> to array of <see cref="T:Aerotech.A3200.Status.AxisFault"/></summary>
            <param name="array">The array to store the data in</param>
            <returns>The array containing the data</returns>
            <remarks><para>If <paramref name="array"/> is <c>null</c> or not big enough for the data, a new array will automatically be allocated, and returned.</para></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints(Aerotech.A3200.Status.DriveStatus[])">
            <summary>Converts <paramref name="Points"/> to array of <see cref="T:Aerotech.A3200.Status.DriveStatus"/></summary>
            <param name="array">The array to store the data in</param>
            <returns>The array containing the data</returns>
            <remarks><para>If <paramref name="array"/> is <c>null</c> or not big enough for the data, a new array will automatically be allocated, and returned.</para></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints(Aerotech.A3200.Tasks.TaskStatus0[])">
            <summary>Converts <paramref name="Points"/> to array of <see cref="T:Aerotech.A3200.Tasks.TaskStatus0"/></summary>
            <param name="array">The array to store the data in</param>
            <returns>The array containing the data</returns>
            <remarks><para>If <paramref name="array"/> is <c>null</c> or not big enough for the data, a new array will automatically be allocated, and returned.</para></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints(Aerotech.A3200.Tasks.TaskStatus1[])">
            <summary>Converts <paramref name="Points"/> to array of <see cref="T:Aerotech.A3200.Tasks.TaskStatus1"/></summary>
            <param name="array">The array to store the data in</param>
            <returns>The array containing the data</returns>
            <remarks><para>If <paramref name="array"/> is <c>null</c> or not big enough for the data, a new array will automatically be allocated, and returned.</para></remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints(Aerotech.A3200.Tasks.TaskStatus2[])">
            <summary>Converts <paramref name="Points"/> to array of <see cref="T:Aerotech.A3200.Tasks.TaskStatus2"/></summary>
            <param name="array">The array to store the data in</param>
            <returns>The array containing the data</returns>
            <remarks><para>If <paramref name="array"/> is <c>null</c> or not big enough for the data, a new array will automatically be allocated, and returned.</para></remarks>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.Points">
            <summary>The points collected</summary>
            <remarks>
            	<para>If one needs points as other types, see <see cref="M:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.ConvertPoints``1"/>.</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.CollectedDataSignalEntry`3.UnitName">
            <summary>The name of the unit</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.CollectedSystemDataSignalEntry">
            <summary>Represents a collected system signal</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.CollectedAxisDataSignalEntry">
            <summary>Represents a collected axis signal</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.CollectedAxisExtendedDataSignalEntry">
            <summary>Represents a collected axis extended signal</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.CollectedTaskDataSignalEntry">
            <summary>Represents a collected task signal</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.CollectedVariableDataSignalEntry">
            <summary>Represents a collected variable signal</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.DataCollectionStatus">
            <summary>Represents the status of data collection</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionStatus.PointsAllocated">
            <summary>For how many points the space has been allocated for</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionStatus.PointsCollected">
            <summary>Number of points collected</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionStatus.PointsRetrieved">
            <summary>Number of points that have been retrieved into the SMC</summary>
            <remarks>
            	<para>This is the number of points that are available for <see cref="M:Aerotech.A3200.DataCollection.Data.GetData"/></para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionStatus.IsCollecting">
            <summary>Whether collection is still going on</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionStatus.IsContinuousMode">
            <summary>Whether the collection is in continuous (queue) mode</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionStatus.IsOverflowed">
            <summary>Whether the collection is in continuous mode and the buffer is full</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionStatus.IsScopeTrigInitiated">
            <summary>Whether the collection was started by a scopetrig command</summary>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.DataCollectionStatus.ScopeTrigId">
            <summary>The Id with which ScopeTrig was initiated</summary>
        </member>
        <member name="T:Aerotech.A3200.Information.DriveInformationExtended">
            <summary>
            Represents a physical drive.
            </summary>
            <remarks>
            	<para>
            		Please note that this does represent an axis, but a physical drive:
            		an <see cref="F:Aerotech.A3200.Information.ComponentType.Npaq"/> will be represented by one of these.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Firmware.DriveInformation">
            <summary>Represents a physical drive</summary>
            <remarks>
            	<para>
            		Please note that this does represent an axis, but a physical drive:
            		an <see cref="F:Aerotech.A3200.Information.ComponentType.Npaq"/> will be represented by one of these.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Firmware.DriveInformation.CommunicationChannel">
            <summary>The configured communication channel on the drive</summary>
        </member>
        <member name="P:Aerotech.A3200.Firmware.DriveInformation.Type">
            <summary>What type the drive is</summary>
        </member>
        <member name="P:Aerotech.A3200.Firmware.DriveInformation.FirmwareVersion">
            <summary>What firmware version the drive is running</summary>
            <remarks>
            	<para>
            		This can be <c>null</c> if the version could not be retrieved
            		from the drive.  This can happen if the version is too out of sync
            		to be able to do this.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Firmware.DriveInformation.FireWireNodeNumber">
            <summary>The firewire chain number of the drive</summary>
        </member>
        <member name="P:Aerotech.A3200.Firmware.DriveInformation.FPGAVersion">
            <summary>What FPGA version the drive is running</summary>
            <remarks>
            	<para>
            		This can be 0 if the version could not be retrieved
            		from the drive.  This can happen if the version is too out of sync
            		to be able to do this.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Information.DriveInformationExtended.FireWireChannelMask">
            <summary>The FireWire channels that this drive is occupying</summary>
        </member>
        <member name="T:Aerotech.A3200.Information.MotionDriveInformation">
            <summary>
            Represents a physical drive that can do motion. Also contains references to axis information for axes that are contained on the drive.
            </summary>
            <remarks>
            	<para>
            		Please note that this does represent an axis, but a physical drive:
            		an <see cref="F:Aerotech.A3200.Information.ComponentType.Npaq"/> will be represented by one of these.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Information.MotionDriveInformation.Axes">
            <summary>
            Returns information about the axes that are present on the drive.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Information.MotionDriveInformation.IOBoardPresent">
            <summary>Provides information about the presense of an IO board</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.ErrorInformation">
            <summary>Provides error information.</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.ErrorInformation.ToString">
            <summary>Returns a string representation of this class.</summary>
            <returns>The string representation of this class</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.ErrorInformation.Description">
            <summary>The description of the error.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ErrorInformation.HelpKey">
            <summary>Specifies the key to look for in the help file for a more detailed description.</summary>
            <remarks>
            	<para>
            		This property provides a key to look for in the index page of the help file
            		for a more detailed description of the error and possible solutions.
            	</para>
            	<note>
            		The value of this key for a given error can change from version to version, and should
            		<strong>not</strong> be used to uniquely identify an error.
            	</note>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.ErrorInformation.HelpLink">
            <summary>Gets the link to the help associated with this error.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ErrorInformation.ErrorCode">
            <summary>The error code identifier.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ErrorInformation.ErrorLocationCode">
            <summary>The error location code identifier.</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionInformation">
            <summary>
            Contains information describing a fieldbus connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionInformation.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionInformation"/>.
            </summary>
            <param name="name">The name of the connection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionInformation.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionInformation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionInformation.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance is less than obj. Zero This instance is equal to obj.
                Greater than zero This instance is greater than obj.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionInformation.Name">
            <summary>
            The name of the connection.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation">
            <summary>
            Contains information describing a Hilscher fieldbus connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation.#ctor(System.String,System.Int32,Aerotech.A3200.Configuration.FieldbusType)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation"/>.
            </summary>
            <param name="name">The name of the connection.</param>
            <param name="id">The identifier of the connection.</param>
            <param name="kind">The kind of the fieldbus connection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance is less than obj. Zero This instance is equal to obj.
                Greater than zero This instance is greater than obj.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation.Id">
            <summary>
            The identifier of the connection.
            </summary>
            <remarks>
            This identifier is the same as the Hilscher card identifier.
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation.Kind">
            <summary>
            The kind of the fieldbus connection.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation">
            <summary>
            Contains information describing a modbus master connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation.#ctor(System.String,System.Int32,System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation"/>
            </summary>
            <param name="name">The name of the modbus master connection.</param>
            <param name="slaveId">The identifier for the slave device.</param>
            <param name="slaveIPAddress">The IPv4 address of the slave device.</param>
            <param name="slavePort">The TCP/IP port on which the slave device is handling Modbus connections.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance is less than obj. Zero This instance is equal to obj.
                Greater than zero This instance is greater than obj.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation.SlaveId">
            <summary>
            The identifier for the slave device.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation.SlaveIPAddress">
            <summary>
            The IPv4 address of the slave device.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation.SlavePort">
            <summary>
            The TCP/IP port on which the slave device is handling Modbus connections.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation">
            <summary>
            Contains information describing a drive modbus master connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation.#ctor(System.String,System.Int32,System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation"/>.
            </summary>
            <param name="name">The name of the drive modbus master connection.</param>
            <param name="slaveId">The identifier for the slave device.</param>
            <param name="slaveIPAddress">The IPv4 address of the slave device.</param>
            <param name="slavePort">The TCP/IP port on which the slave device is handling Modbus connections.</param>
            <param name="axisNumber">The axis number that corresponds to the drive serving as the modbus master for this connection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance is less than obj. Zero This instance is equal to obj.
                Greater than zero This instance is greater than obj.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation.AxisNumber">
            <summary>
            The axis number that corresponds to the drive serving as the modbus master for this connection.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation">
            <summary>
            Contains information describing a modbus slave connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation"/>.
            </summary>
            <param name="name">The name of the modbus slave connection.</param>
            <param name="id">The identifier for the modbus slave connection.</param>
            <param name="inputWordsCount">The number of input words exposed on the modbus slave.</param>
            <param name="outputWordsCount">The number of output words exposed on the modbus slave.</param>
            <param name="inputBitsCount">The number of input bits exposed on the modbus slave.</param>
            <param name="outputBitsCount">The number of output bits exposed on the modbus slave.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects
                being compared. The return value has these meanings: Value Meaning Less than
                zero This instance is less than obj. Zero This instance is equal to obj.
                Greater than zero This instance is greater than obj.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.Id">
            <summary>
            The identifier for the modbus slave connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.InputWordsCount">
            <summary>
            The number of input words exposed on the modbus slave.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.OutputWordsCount">
            <summary>
            The number of output words exposed on the modbus slave.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.InputBitsCount">
            <summary>
            The number of input bits exposed on the modbus slave.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation.OutputBitsCount">
            <summary>
            The number of output bits exposed on the modbus slave.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping">
            <summary>
            Represents a mapping of a fieldbus address to a symbolic name.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.#ctor(System.String,System.Int32,Aerotech.A3200.Variables.VariableType)">
            <summary>
            Creates an instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.#ctor(System.String,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Variables.VariableType,System.String)">
            <summary>
            Creates an instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="bitAddress">The bit address of the mapping.</param>
            <param name="count">The number of elements included in the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="comment">A comment describing the mapping.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.Name">
            <summary>
            The symbolic name of the mapping.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.Comment">
            <summary>
            A comment describing the mapping.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.ByteAddress">
            <summary>
            The byte address of the mapping.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.BitAddress">
            <summary>
            The bit address of the mapping.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.Count">
            <summary>
            The number of elements included in the mapping.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping.ValueType">
            <summary>
            The data type of the mapping.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping">
            <summary>
            Represents a mapping of a drive modbus master address to a symbolic name.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping.#ctor(System.String,System.Int32,Aerotech.A3200.Variables.VariableType,Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping.#ctor(System.String,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Variables.VariableType,System.String,Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="bitAddress">The bit address of the mapping.</param>
            <param name="count">The number of elements included in the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="comment">A comment describing the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping.Kind">
            <summary>
            The memory space where the the mapped address is located.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping">
            <summary>
            Represents a mapping of a PC modbus master address to a symbolic name.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping.#ctor(System.String,System.Int32,Aerotech.A3200.Variables.VariableType,Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping.#ctor(System.String,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Variables.VariableType,System.String,Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="bitAddress">The bit address of the mapping.</param>
            <param name="count">The number of elements included in the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="comment">A comment describing the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping.Kind">
            <summary>
            The memory space where the the mapped address is located.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping">
            <summary>
            Represents a mapping of a PC modbus slave address to a symbolic name.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping.#ctor(System.String,System.Int32,Aerotech.A3200.Variables.VariableType,Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping.#ctor(System.String,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Variables.VariableType,System.String,Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="bitAddress">The bit address of the mapping.</param>
            <param name="count">The number of elements included in the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="comment">A comment describing the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping.Kind">
            <summary>
            The memory space where the the mapped address is located.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping">
            <summary>
            Represents a mapping of a Hilscher address to a symbolic name.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping.#ctor(System.String,System.Int32,Aerotech.A3200.Variables.VariableType,Aerotech.A3200.Parameters.Fieldbus.HilscherMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping.#ctor(System.String,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Variables.VariableType,System.String,Aerotech.A3200.Parameters.Fieldbus.HilscherMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="bitAddress">The bit address of the mapping.</param>
            <param name="count">The number of elements included in the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="comment">A comment describing the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. GetHashCode() is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current instance.</param>
            <returns>A <see cref="T:System.Boolean"/> value representing whether or not the two compared instances are equal.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping.Kind">
            <summary>
            The memory space where the the mapped address is located.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.ParameterFile">
            <summary>
            Root parameter category that handles parameters from a file
            </summary>
            <remarks>
            	<para>
            		This class can be instantiated by itself to load from a parameter file.
            		To load defaults, see <see cref="P:Aerotech.A3200.Parameters.BaseParameters.Defaults"/>.
            	</para>
            	<para>
            		To load parameters from a source to this class, see <see cref="M:Aerotech.A3200.Parameters.ParameterFile.Import(Aerotech.A3200.Parameters.ParameterCategory)"/> or
            		you can instantiate this class by giving the source of initial data; see
            		<see cref="M:Aerotech.A3200.Parameters.ParameterFile.#ctor(System.String,Aerotech.A3200.Parameters.BaseParameters)"/>.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.BaseParameters">
            <summary>
            Represents the root category of parameters
            </summary>
            <remarks>
            	<para>
            		This is a generic class for parameters.  The two specialized classes that inherit from it
            		are <see cref="T:Aerotech.A3200.Parameters.ControllerParameters"/> and <see cref="T:Aerotech.A3200.Parameters.ParameterFile"/>.  The first one
            		can be accessed from <see cref="P:Aerotech.A3200.Controller.Parameters"/>, while the latter can be
            		instantiated.
            	</para>
            	<para>
            		The default parameters can be retrieved from <see cref="P:Aerotech.A3200.Parameters.BaseParameters.Defaults"/>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Get all the default parameter values.
        BaseParameters^ defaultParameters = BaseParameters::Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters->Axes[0]->Motion->AbortDecelRate->Value);
        Console::WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters->Axes["Z"]->Motor->CountsPerRev->Value);
        Console::WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters->Axes[AxisMask::A02]->Units->CountsPerUnit->Value);
        Console::WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters->System->User->UserDouble1->Value);
        Console::WriteLine("Default for Parameter GlobalDoubles is: {0}", defaultParameters->System->MemoryAllocation->GlobalDoubles->Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Get all the default parameter values.
        BaseParameters defaultParameters = BaseParameters.Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes[AxisMask.A02].Units.CountsPerUnit.Value);
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Default for Parameter GlobalDoubles is: {0}", defaultParameters.System.MemoryAllocation.GlobalDoubles.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Get all the default parameter values.
        Dim defaultParameters As BaseParameters = BaseParameters.Defaults
        ' Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes.Item(AxisMask.A02).Units.CountsPerUnit.Value)
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Default for Parameter GlobalDoubles is: {0}", defaultParameters.System.MemoryAllocation.GlobalDoubles.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Parameters.BaseParameters.SaveToFile(System.String)">
            <summary>
            Saves the parameters to a file
            </summary>
            <param name="fileName">The file to save to</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.BaseParameters.SaveToFile(System.String,System.Xml.XmlNode)">
            <summary>
            Saves the parameters to a file
            </summary>
            <param name="fileName">The file to save to</param>
            <param name="data">The additinal user-defined data to save into the parameter file
            (see <see cref="P:Aerotech.A3200.Parameters.ParameterFile.UserDataSections"/> for a way to retrieve this data)</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.BaseParameters.GetCategories(Aerotech.A3200.Parameters.BaseParameters)">
            <summary>Gets all the <see cref="T:Aerotech.A3200.Parameters.ParameterCategory"/> from a <see cref="T:Aerotech.A3200.Parameters.BaseParameters"/></summary>
            <param name="parameters">Where to get the categories</param>
            <returns>The categories</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.BaseParameters.OptimizedRetrieve">
            <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Parameters.BaseParameters.OrganizeParameterData(System.Collections.IEnumerable)">
            <summary>
            Organizes the parameter data
            </summary>
            <param name="parameterData">The data to organize</param>
            <returns>
            	<para>
            		Organized by [axis, task] -&gt; [parameter name -&gt; Parameter]
            	</para>
            	<para><see cref="F:Aerotech.A3200.AxisMask.None"/> used for controller, <see cref="F:Aerotech.A3200.Global.UnknownTask"/> used for axis</para>
            </returns>
            <exception cref="T:Aerotech.A3200.Exceptions.ParameterException">
            	<para>
            		If the axis indexes do not match
            	</para>
            </exception>
            <exception cref="T:System.InvalidCastException">
            	<para>
            		If the <paramref name="parameterData"/> is not <see cref="T:Aerotech.A3200.Parameters.Parameter"/> or <see cref="T:Aerotech.A3200.Parameters.ParameterCategory"/>
            		derived
            	</para>
            </exception>
        </member>
        <member name="P:Aerotech.A3200.Parameters.BaseParameters.Defaults">
            <summary>
            Provides the defaults of the parameters
            </summary>
            <remarks>
            	<para>
            		These are version defaults, not user-specified defaults.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Get all the default parameter values.
        BaseParameters^ defaultParameters = BaseParameters::Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters->Axes[0]->Motion->AbortDecelRate->Value);
        Console::WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters->Axes["Z"]->Motor->CountsPerRev->Value);
        Console::WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters->Axes[AxisMask::A02]->Units->CountsPerUnit->Value);
        Console::WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters->System->User->UserDouble1->Value);
        Console::WriteLine("Default for Parameter GlobalDoubles is: {0}", defaultParameters->System->MemoryAllocation->GlobalDoubles->Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Get all the default parameter values.
        BaseParameters defaultParameters = BaseParameters.Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes[AxisMask.A02].Units.CountsPerUnit.Value);
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Default for Parameter GlobalDoubles is: {0}", defaultParameters.System.MemoryAllocation.GlobalDoubles.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Get all the default parameter values.
        Dim defaultParameters As BaseParameters = BaseParameters.Defaults
        ' Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes.Item(AxisMask.A02).Units.CountsPerUnit.Value)
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Default for Parameter GlobalDoubles is: {0}", defaultParameters.System.MemoryAllocation.GlobalDoubles.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Parameters.BaseParameters.Tasks">
            <summary>The task parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.BaseParameters.System">
            <summary>The parameters that are per controller</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.BaseParameters.Axes">
            <summary>
            Provides access to the axes parameters
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Get all the default parameter values.
        BaseParameters^ defaultParameters = BaseParameters::Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters->Axes[0]->Motion->AbortDecelRate->Value);
        Console::WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters->Axes["Z"]->Motor->CountsPerRev->Value);
        Console::WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters->Axes[AxisMask::A02]->Units->CountsPerUnit->Value);
        Console::WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters->System->User->UserDouble1->Value);
        Console::WriteLine("Default for Parameter GlobalDoubles is: {0}", defaultParameters->System->MemoryAllocation->GlobalDoubles->Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Get all the default parameter values.
        BaseParameters defaultParameters = BaseParameters.Defaults;
        // Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes[AxisMask.A02].Units.CountsPerUnit.Value);
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Default for Parameter GlobalDoubles is: {0}", defaultParameters.System.MemoryAllocation.GlobalDoubles.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Get all the default parameter values.
        Dim defaultParameters As BaseParameters = BaseParameters.Defaults
        ' Print out the default values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Default for Parameter AbortDecelRate is: {0}", defaultParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Default for Parameter CountsPerRev is: {0}", defaultParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Default for Parameter CountsPerUnit is: {0}", defaultParameters.Axes.Item(AxisMask.A02).Units.CountsPerUnit.Value)
        Console.WriteLine("Default for Parameter UserDouble1 is: {0}", defaultParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Default for Parameter GlobalDoubles is: {0}", defaultParameters.System.MemoryAllocation.GlobalDoubles.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterFile.#ctor(System.String)">
            <summary>
            Loads parameters from a file
            </summary>
            <param name="path">The parameter file path</param>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController->Parameters->SaveToFile("controllerParametersBackup.prma");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prma");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prma")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterFile.#ctor(System.String,System.Boolean)">
            <summary>
            Loads parameters from a file
            </summary>
            <param name="path">The parameter file path</param>
            <param name="failIfNotFound">If <c>false</c> and file not present, will load defaults</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterFile.#ctor(System.String,Aerotech.A3200.Parameters.BaseParameters)">
            <summary>
            Creates a new parameter file
            </summary>
            <param name="path">The parameter file path</param>
            <param name="parameters">The initial data for the parameter file</param>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters->Axes["X"]->Motor->MotorType->Value = 0;
        baseParameters->Axes["X"]->Motor->CyclesPerRev->Value = 4;
        baseParameters->Axes["X"]->Motor->CountsPerRev->Value = 4000;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackType->Value = 1;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackChannel->Value = 0;
        baseParameters->Axes["X"]->Fault->Thresholds->AverageCurrentThreshold->Value = 1.15f;
        baseParameters->Axes["X"]->Motor->MaxCurrentClamp->Value = 4.6f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKi->Value = 12000.0f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKp->Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prma", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile->FileInfo->Name);
        // Change some other parameters.
        baseParameters->Axes["X"]->Fault->Thresholds->PositionErrorThreshold->Value = 0.001;
        baseParameters->Axes["X"]->Limits->SoftwareLimitHigh->Value = -10;
        baseParameters->Axes["X"]->Limits->SoftwareLimitLow->Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile->Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile->Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prma", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prma", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterFile.Import(Aerotech.A3200.Parameters.ParameterCategory)">
            <summary>
            Imports parameter data into this file
            </summary>
            <param name="parameterCategory">The category from which to import the parameters</param>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters->Axes["X"]->Motor->MotorType->Value = 0;
        baseParameters->Axes["X"]->Motor->CyclesPerRev->Value = 4;
        baseParameters->Axes["X"]->Motor->CountsPerRev->Value = 4000;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackType->Value = 1;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackChannel->Value = 0;
        baseParameters->Axes["X"]->Fault->Thresholds->AverageCurrentThreshold->Value = 1.15f;
        baseParameters->Axes["X"]->Motor->MaxCurrentClamp->Value = 4.6f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKi->Value = 12000.0f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKp->Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prma", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile->FileInfo->Name);
        // Change some other parameters.
        baseParameters->Axes["X"]->Fault->Thresholds->PositionErrorThreshold->Value = 0.001;
        baseParameters->Axes["X"]->Limits->SoftwareLimitHigh->Value = -10;
        baseParameters->Axes["X"]->Limits->SoftwareLimitLow->Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile->Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile->Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prma", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prma", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterFile.Import``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Imports parameter data into this file
            </summary>
            <param name="parameterCategory">
            	<para>
            		A collection of <see cref="T:Aerotech.A3200.Parameters.ParameterCategory"/> to
            		import the data from.
            	</para>
            </param>
            <typeparam name="TType">
            	The subtype of the category to send, most of the time this can be omitted
            </typeparam>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterFile.Import(Aerotech.A3200.Parameters.BaseParameters)">
            <summary>Imports parameter data into this file</summary>
            <param name="parameters">The parameters to import</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterFile.Save(System.String)">
            <summary>
            Saves parameters to a file
            </summary>
            <param name="fileName">The file to save the parameters to</param>
            <remarks>
            	<para>
            		This method automatically stores the data node
            		in the <paramref name="fileName"/>.  This method also updates the <see cref="T:System.IO.Path"/> of
            		this parameter file.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterFile.Save">
            <summary>
            Saves this parameter file
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters->Axes["X"]->Motor->MotorType->Value = 0;
        baseParameters->Axes["X"]->Motor->CyclesPerRev->Value = 4;
        baseParameters->Axes["X"]->Motor->CountsPerRev->Value = 4000;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackType->Value = 1;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackChannel->Value = 0;
        baseParameters->Axes["X"]->Fault->Thresholds->AverageCurrentThreshold->Value = 1.15f;
        baseParameters->Axes["X"]->Motor->MaxCurrentClamp->Value = 4.6f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKi->Value = 12000.0f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKp->Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prma", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile->FileInfo->Name);
        // Change some other parameters.
        baseParameters->Axes["X"]->Fault->Thresholds->PositionErrorThreshold->Value = 0.001;
        baseParameters->Axes["X"]->Limits->SoftwareLimitHigh->Value = -10;
        baseParameters->Axes["X"]->Limits->SoftwareLimitLow->Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile->Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile->Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prma", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prma", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterFile.FieldbusMappings">
            <summary>
            Provides access to the fieldbus mapping configuration.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterFile.FileInfo">
            <summary>The <see cref="P:Aerotech.A3200.Parameters.ParameterFile.FileInfo"/> of the parameter file</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters->Axes["X"]->Motor->MotorType->Value = 0;
        baseParameters->Axes["X"]->Motor->CyclesPerRev->Value = 4;
        baseParameters->Axes["X"]->Motor->CountsPerRev->Value = 4000;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackType->Value = 1;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackChannel->Value = 0;
        baseParameters->Axes["X"]->Fault->Thresholds->AverageCurrentThreshold->Value = 1.15f;
        baseParameters->Axes["X"]->Motor->MaxCurrentClamp->Value = 4.6f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKi->Value = 12000.0f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKp->Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prma", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile->FileInfo->Name);
        // Change some other parameters.
        baseParameters->Axes["X"]->Fault->Thresholds->PositionErrorThreshold->Value = 0.001;
        baseParameters->Axes["X"]->Limits->SoftwareLimitHigh->Value = -10;
        baseParameters->Axes["X"]->Limits->SoftwareLimitLow->Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile->Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile->Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prma", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prma", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterFile.DataVersion">
            <summary>The version of the library that last modified data in the parameter file</summary>
            <remarks>
            	<para>This gets modified on a <see cref="M:Aerotech.A3200.Parameters.ParameterFile.Save"/></para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterFile.CompatibleVersion">
            <summary>Specifies the oldest version of software with which the parameter files are compatible.</summary>
        </member>
        <member name="E:Aerotech.A3200.Parameters.ParameterFile.FileInfoChanged">
            <summary>
            Is raised when <see cref="P:Aerotech.A3200.Parameters.ParameterFile.FileInfo"/> changes
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterFile.UserDataSections">
            <summary>Provides access to the user-customizable tag in the configuration file</summary>
            <remarks>
            	<para>
            		This is so that whomever uses this class can store additional information in this tag that
            		is not a parameter value.
            	</para>
            	<para>
            		When using this, pick a unique string to store the data.  It is recommended to have the company
            		name in the name of the section.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterFile.Axes">
            <summary>
            Provides access to parameters on the axes
            </summary>
            <remarks>
            	<note>
            		For <see cref="T:Aerotech.A3200.Parameters.ParameterFile"/>, one can set the mask of the axes, thus
            		enabling or disabling the existance of some axes.
            	</note>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters^ baseParameters = BaseParameters::Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters->Axes["X"]->Motor->MotorType->Value = 0;
        baseParameters->Axes["X"]->Motor->CyclesPerRev->Value = 4;
        baseParameters->Axes["X"]->Motor->CountsPerRev->Value = 4000;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackType->Value = 1;
        baseParameters->Axes["X"]->Feedback->PositionFeedbackChannel->Value = 0;
        baseParameters->Axes["X"]->Fault->Thresholds->AverageCurrentThreshold->Value = 1.15f;
        baseParameters->Axes["X"]->Motor->MaxCurrentClamp->Value = 4.6f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKi->Value = 12000.0f;
        baseParameters->Axes["X"]->CurrentLoop->CurrentGainKp->Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile^ parameterFile = gcnew ParameterFile("myParameters.prma", baseParameters) ;
        // Output the path and name of the new parameter file.
        Console::WriteLine("Parameter File {0} created", parameterFile->FileInfo->Name);
        // Change some other parameters.
        baseParameters->Axes["X"]->Fault->Thresholds->PositionErrorThreshold->Value = 0.001;
        baseParameters->Axes["X"]->Limits->SoftwareLimitHigh->Value = -10;
        baseParameters->Axes["X"]->Limits->SoftwareLimitLow->Value = 10;
        // Update the new parameter file with these new changes.
        parameterFile->Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile->Save();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Create a set of default base parameters to base our file off of.
        BaseParameters baseParameters = BaseParameters.Defaults;
        // Change some typical motor setup parameters from their default values.
        baseParameters.Axes["X"].Motor.MotorType.Value = 0;
        baseParameters.Axes["X"].Motor.CyclesPerRev.Value = 4;
        baseParameters.Axes["X"].Motor.CountsPerRev.Value = 4000.0;
        baseParameters.Axes["X"].Feedback.PositionFeedbackType.Value = 1;
        baseParameters.Axes["X"].Feedback.PositionFeedbackChannel.Value = 0;
        baseParameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold.Value = 1.15f;
        baseParameters.Axes["X"].Motor.MaxCurrentClamp.Value = 4.6f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKi.Value = 12000.0f;
        baseParameters.Axes["X"].CurrentLoop.CurrentGainKp.Value = 26000.0f;
        // Create the parameter file with these new base parameters.
        ParameterFile parameterFile = new ParameterFile("myParameters.prma", baseParameters);
        // Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name);
        // Change some other parameters.
        baseParameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold.Value = 0.001;
        baseParameters.Axes["X"].Limits.SoftwareLimitHigh.Value = -10.0;
        baseParameters.Axes["X"].Limits.SoftwareLimitLow.Value = 10.0;
        // Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters);
        // Save the changes to the parameter file.
        parameterFile.Save();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Create a set of default base parameters to base our file off of.
        Dim baseParameters As BaseParameters = BaseParameters.Defaults
        ' Change some typical motor setup parameters from their default values.
        baseParameters.Axes.Item("X").Motor.MotorType.Value = 0
        baseParameters.Axes.Item("X").Motor.CyclesPerRev.Value = 4
        baseParameters.Axes.Item("X").Motor.CountsPerRev.Value = 4000
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackType.Value = 1
        baseParameters.Axes.Item("X").Feedback.PositionFeedbackChannel.Value = 0
        baseParameters.Axes.Item("X").Fault.Thresholds.AverageCurrentThreshold.Value = 1.15!
        baseParameters.Axes.Item("X").Motor.MaxCurrentClamp.Value = 4.6!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKi.Value = 12000!
        baseParameters.Axes.Item("X").CurrentLoop.CurrentGainKp.Value = 26000!
        ' Create the parameter file with these new base parameters.
        Dim parameterFile As New ParameterFile("myParameters.prma", baseParameters)
        ' Output the path and name of the new parameter file.
        Console.WriteLine("Parameter File {0} created", parameterFile.FileInfo.Name)
        ' Change some other parameters.
        baseParameters.Axes.Item("X").Fault.Thresholds.PositionErrorThreshold.Value = 0.001
        baseParameters.Axes.Item("X").Limits.SoftwareLimitHigh.Value = -10
        baseParameters.Axes.Item("X").Limits.SoftwareLimitLow.Value = 10
        ' Update the new parameter file with these new changes.
        parameterFile.Import(baseParameters)
        ' Save the changes to the parameter file.
        parameterFile.Save
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusMappings">
            <summary>
            Provides access to the fieldbus mapping configuration.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMappings.Hilscher">
            <summary>
            Provides access to the Hilscher mapping configuration.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMappings.PCModbusMaster">
            <summary>
            Provides access to the PC modbus master mapping configuration.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMappings.PCModbusSlave">
            <summary>
            Provides access to the PC modbus slave mapping configuration.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusMappings.DriveModbusMaster">
            <summary>
            Provides access to the drive modbus master mapping configuration.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2">
            <summary>
            Represents a fieldbus connection and the associated mappings.
            </summary>
            <typeparam name="TConnInfo">The type of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionInformation"/> that describes the fieldbus connection.</typeparam>
            <typeparam name="TMapping">The type of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusMapping"/> that describes each fieldbus mapping for this connection.</typeparam>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2.#ctor(`0)">
            <summary>
            Creates an instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2"/>.
            </summary>
            <param name="connectionInformation">Information that describes the fieldbus connection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2.Add(`1)">
            <summary>
            Adds a fieldbus mapping to the collection.
            </summary>
            <param name="mapping">The mapping to add to the collection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2.Remove(`1)">
            <summary>
            Removes a fieldbus mapping from the collection.
            </summary>
            <param name="mapping">The mapping to remove from the collection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2.Remove(System.Int32)">
            <summary>
            Removes a fieldbus mapping from the collection.
            </summary>
            <param name="index">The index of the mapping to remove from the collection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2.Clear">
            <summary>
            Removes all fieldbus mappings from the collection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2.Name">
            <summary>
            The information that describes the fieldbus connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2.Item(System.Int32)">
            <summary>
            Gets or sets a mapping at the specified address.
            </summary>
            <param name="index">The index of the mapping in the collection.</param>
            <returns>The mapping object at the specified address.</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Fieldbus.FieldbusConnectionMappings`2.Item(System.String)">
            <summary>
            Get a mapping with the specified symbolic name.
            </summary>
            <param name="name">The symbolic name of the mapping in the collection.</param>
            <returns>The mapping object with the specified symbolic name.</returns>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionMappings">
            <summary>
            Represents a Hilscher connection and the associated mappings.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionMappings.#ctor(Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionInformation)">
            <summary>
            Creates an instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionMappings"/>.
            </summary>
            <param name="connectionInformation">Information that describes the Hilscher connection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionMappings.Add(System.String,System.Int32,Aerotech.A3200.Variables.VariableType,Aerotech.A3200.Parameters.Fieldbus.HilscherMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping"/> and adds it to the collection.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionMappings.Add(System.String,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Variables.VariableType,System.String,Aerotech.A3200.Parameters.Fieldbus.HilscherMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.HilscherMapping"/> and adds it to the collection.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="bitAddress">The bit address of the mapping.</param>
            <param name="count">The number of elements included in the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="comment">A comment describing the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionMappings.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.HilscherConnectionMappings"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionMappings">
            <summary>
            Represents a drive modbus master connection and the associated mappings.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionMappings.#ctor(Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionInformation)">
            <summary>
            Creates an instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionMappings"/>
            </summary>
            <param name="connectionInformation">Information that describes the drive modbus master connection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionMappings.Add(System.String,System.Int32,Aerotech.A3200.Variables.VariableType,Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping"/> and adds it to the collection.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionMappings.Add(System.String,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Variables.VariableType,System.String,Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterMapping"/> and adds it to the collection.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="bitAddress">The bit address of the mapping.</param>
            <param name="count">The number of elements included in the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="comment">A comment describing the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionMappings.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMasterConnectionMappings"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterConnectionMappings">
            <summary>
            Represents a PC modbus master connection and the associated mappings.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterConnectionMappings.#ctor(Aerotech.A3200.Parameters.Fieldbus.ModbusMasterConnectionInformation)">
            <summary>
            Creates an instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterConnectionMappings"/>
            </summary>
            <param name="connectionInformation">Information that describes the PC modbus master connection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterConnectionMappings.Add(System.String,System.Int32,Aerotech.A3200.Variables.VariableType,Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterConnectionMappings.Add(System.String,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Variables.VariableType,System.String,Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMapping"/>.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="bitAddress">The bit address of the mapping.</param>
            <param name="count">The number of elements included in the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="comment">A comment describing the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterConnectionMappings.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterConnectionMappings"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveConnectionMappings">
            <summary>
            Represents a PC modbus slave connection and the associated mappings.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveConnectionMappings.#ctor(Aerotech.A3200.Parameters.Fieldbus.ModbusSlaveConnectionInformation)">
            <summary>
            Creates an instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveConnectionMappings"/>
            </summary>
            <param name="connectionInformation">Information that describes the PC modbus slave connection.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveConnectionMappings.Add(System.String,System.Int32,Aerotech.A3200.Variables.VariableType,Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping"/> and adds it to the collection.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveConnectionMappings.Add(System.String,System.Int32,System.Int32,System.Int32,Aerotech.A3200.Variables.VariableType,System.String,Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMappingKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMapping"/> and adds it to the collection.
            </summary>
            <param name="name">The symbolic name of the mapping.</param>
            <param name="byteAddress">The byte address of the mapping.</param>
            <param name="bitAddress">The bit address of the mapping.</param>
            <param name="count">The number of elements included in the mapping.</param>
            <param name="valueType">The data type of the mapping.</param>
            <param name="comment">A comment describing the mapping.</param>
            <param name="kind">The memory space where the specified mapping resides.</param>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveConnectionMappings.Clone">
            <summary>
            Creates a new instance of the current instance.
            </summary>
            <returns>An instance of <see cref="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveConnectionMappings"/> which is a deep copy of the current instance.</returns>
        </member>
        <member name="T:Aerotech.A3200.Plc.PlcSharedTagContainer">
            <summary>
            This is the top-level type for PLC shared tag access.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Plc.PlcSharedTagContainer.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> object in order to enumerate all PLC shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.Item(System.String)">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Variables.Variable"/> object with the specified name.
            </summary>
            <param name="name">The name of the shared tag</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> object, or null if a shared tag with the specified name cannot be found</returns>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.Bools">
            <summary>
            Provides access to the PLC Bool shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.Bytes">
            <summary>
            Provides access to the PLC Byte shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.DInts">
            <summary>
            Provides access to the PLC DInt shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.LReals">
            <summary>
            Provides access to the PLC LReal shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.DWords">
            <summary>
            Provides access to the PLC DWord shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.Ints">
            <summary>
            Provides access to the PLC Int shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.Reals">
            <summary>
            Provides access to the PLC Real shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.SInts">
            <summary>
            Provides access to the PLC SInt shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.UDInts">
            <summary>
            Provides access to the PLC UDInt shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.UInts">
            <summary>
            Provides access to the PLC UInt shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.USInts">
            <summary>
            Provides access to the PLC USInt shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagContainer.Words">
            <summary>
            Provides access to the PLC Word shared tags.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Plc.PlcSharedTagCollection`1">
            <summary>
            Represents a collection of type-specific PLC shared tags.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Plc.PlcSharedTagCollection`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> object in order to enumerate all PLC shared tags of the type of the collection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagCollection`1.Memory">
            <summary>
            Provides access to raw PLC memory, which allows one to access and modify values at specific byte offsets.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagCollection`1.Item(System.String)">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Variables.TypedVariable`1"/> object with the specified name.
            </summary>
            <param name="name">The name of the shared tag</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.TypedVariable`1"/> object, or null if a shared tag with the specified name cannot be found</returns>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagCollection`1.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Variables.TypedVariable`1"/> object with the specified index.
            </summary>
            <param name="index">The index of the shared tag in this collection</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.TypedVariable`1"/> object</returns>
            <remarks>Note that the index is the index into this .NET collection and not the byte offset in the PLC memory. To use byte offsets, see <see cref="T:Aerotech.A3200.Plc.RawPlcMemory`1"/>.</remarks>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagCollection`1.Capacity">
            <summary>
            The capacity of this collection
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcSharedTagCollection`1.Count">
            <summary>
            The number of elements in this collection
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Plc.PlcBoolSharedTagCollection">
            <summary>
            Provides access to the PLC Bool shared tags.
            </summary>
            <remarks>
            This is a separate collection because this collection will have an indexer that specifies both the byte and bit offset.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Plc.PlcBoolSharedTagCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> object in order to enumerate all PLC Bool shared tags in this collection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcBoolSharedTagCollection.Memory">
            <summary>
            Provides access to raw PLC memory 
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcBoolSharedTagCollection.Item(System.String)">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Plc.PlcBoolSharedTag"/> object with the specified name.
            </summary>
            <param name="name">The name of the shared tag</param>
            <returns>A <see cref="T:Aerotech.A3200.Plc.PlcBoolSharedTag"/> object, or null if a shared tag with the specified name cannot be found</returns>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcBoolSharedTagCollection.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Plc.PlcBoolSharedTag"/> object with the specified index.
            </summary>
            <param name="index">The index of the shared in this collection</param>
            <returns>A <see cref="T:Aerotech.A3200.Plc.PlcBoolSharedTag"/> object</returns>
            <remarks>Note that the index is the index into this .NET collection and not the byte offset in the PLC memory. To use byte offsets, see <see cref="T:Aerotech.A3200.Plc.RawPlcBoolMemory"/>.</remarks>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcBoolSharedTagCollection.Capacity">
            <summary>
            The capacity of this collection
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcBoolSharedTagCollection.Count">
            <summary>
            The number of elements in this collection
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Plc.RawPlcMemory`1">
            <summary>
            Provides access to raw PLC variable memory. With this type, one can access values at byte offsets in the memory space.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.RawPlcMemory`1.Item(System.String)">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Variables.TypedVariable`1"/> object with the specified name.
            </summary>
            <param name="name">The name of the shared tag</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.TypedVariable`1"/> object, or null if a shared tag with the specified name cannot be found</returns>
        </member>
        <member name="P:Aerotech.A3200.Plc.RawPlcMemory`1.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Variables.TypedVariable`1"/> object that represents the memory at the specified offset.
            </summary>
            <param name="offset">The byte offset in PLC shared tag memory to access
            </param>
        </member>
        <member name="T:Aerotech.A3200.Plc.RawPlcBoolMemory">
            <summary>
            Provides access to raw PLC Bool shared tag memory. With this type, one can access Bool values at byte offsets in the memory space.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.RawPlcBoolMemory.Item(System.String)">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Plc.PlcBoolSharedTag"/> object with the specified name.
            </summary>
            <param name="name">The name of the shared tag</param>
            <returns>A <see cref="T:Aerotech.A3200.Plc.PlcBoolSharedTag"/> object, or null if a shared tag with the specified name cannot be found</returns>
        </member>
        <member name="P:Aerotech.A3200.Plc.RawPlcBoolMemory.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Plc.PlcBoolSharedTag"/> object that represents the memory at the specified offset.
            </summary>
            <param name="byteOffset">The byte offset in PLC Bool shared tag memory to access
            </param>
            <remarks>A future release will allow access by both byte and bit offset.</remarks>
        </member>
        <member name="T:Aerotech.A3200.Plc.PlcBoolSharedTag">
            <summary>
            A type that represents a PLC Bool shared tag. This type inherits from <see cref="T:Aerotech.A3200.Variables.TypedVariable`1"/>, so all members exposed on <see cref="T:Aerotech.A3200.Variables.TypedVariable`1"/> are available.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.TypedVariable`1">
            <summary>Typed base class for variables</summary>
            <typeparam name="TType">The type of data stored</typeparam>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Set the value of $global[0] to PI
    myController->Variables->Global->Doubles[0]->Value = 3.14159265358979;
    // Read back the value that was set in $global[0]
    Console::WriteLine("Value of $global[0] : {0}", myController->Variables->Global->Doubles[0]->Value);
    // One can also access variables by name
    Console::WriteLine("Value of $global[0] : {0}", myController->Variables->Global["$global[0]"]->Value);
    // Print out the value of $task[0] for Task 1
    Console::WriteLine("Value of $task[0] on task 1 : {0}", myController->Variables->Tasks[1]["$task[0]"]->Value);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Set the value of $global[0] to PI
    myController.Variables.Global.Doubles[0].Value = 3.1415926535897931;
    // Read back the value that was set in $global[0]
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global.Doubles[0].Value);
    // One can also access variables by name
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global["$global[0]"].Value);
    // Print out the value of $task[0] for Task 1
    Console.WriteLine("Value of $task[0] on task 1 : {0}", myController.Variables.Tasks[1]["$task[0]"].Value);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Set the value of $global[0] to PI
    myController.Variables.Global.Doubles.Item(0).Value = 3.1415926535897931
    ' Read back the value that was set in $global[0]
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global.Doubles.Item(0).Value)
    ' One can also access variables by name
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global.Item("$global[0]").Value)
    ' Print out the value of $task[0] for Task 1
    Console.WriteLine("Value of $task[0] on task 1 : {0}", myController.Variables.Tasks.Item(1).Item("$task[0]").Value)

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.Variables.Variable">
            <summary>Base class for variables</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Set the value of $global[0] to PI
    myController->Variables->Global->Doubles[0]->Value = 3.14159265358979;
    // Read back the value that was set in $global[0]
    Console::WriteLine("Value of $global[0] : {0}", myController->Variables->Global->Doubles[0]->Value);
    // One can also access variables by name
    Console::WriteLine("Value of $global[0] : {0}", myController->Variables->Global["$global[0]"]->Value);
    // Print out the value of $task[0] for Task 1
    Console::WriteLine("Value of $task[0] on task 1 : {0}", myController->Variables->Tasks[1]["$task[0]"]->Value);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Set the value of $global[0] to PI
    myController.Variables.Global.Doubles[0].Value = 3.1415926535897931;
    // Read back the value that was set in $global[0]
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global.Doubles[0].Value);
    // One can also access variables by name
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global["$global[0]"].Value);
    // Print out the value of $task[0] for Task 1
    Console.WriteLine("Value of $task[0] on task 1 : {0}", myController.Variables.Tasks[1]["$task[0]"].Value);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Set the value of $global[0] to PI
    myController.Variables.Global.Doubles.Item(0).Value = 3.1415926535897931
    ' Read back the value that was set in $global[0]
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global.Doubles.Item(0).Value)
    ' One can also access variables by name
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global.Item("$global[0]").Value)
    ' Print out the value of $task[0] for Task 1
    Console.WriteLine("Value of $task[0] on task 1 : {0}", myController.Variables.Tasks.Item(1).Item("$task[0]").Value)

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Variables.Variable.Name">
            <summary>The name of the variable</summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Variable.Context">
            <summary>The context this variable is declared in</summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Variable.ContextKey">
            <summary>The axis, connection, task, etc. number of the variable. The meaning of this property's value is dependant on the variable's <see cref="P:Aerotech.A3200.Variables.Variable.Context"/></summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Variable.Number">
            <summary>The number of the variable in the given <see cref="P:Aerotech.A3200.Variables.Variable.Context"/></summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Variable.ValueType">
            <summary>The type of the data stored</summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Variable.Value">
            <summary>Gets or sets the value of the variable</summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.TypedVariable`1.Value">
            <summary>Gets or sets the variable value</summary>
        </member>
        <member name="P:Aerotech.A3200.Plc.PlcBoolSharedTag.BitNumber">
            <summary>
            The bit number (offset) of the shared tag
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.CustomDiagnostics">
            <summary>Provides ability to retrieve custom diagnostic packet</summary>
            <remarks>
            	<para>These APIs are similar to the data collection APIs found in <see cref="T:Aerotech.A3200.DataCollection.Data"/></para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>Aerotech.A3200.Status</li>
<li>Aerotech.A3200.Status.Custom</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Do some things on the controller so we can detect them
    myController->Variables->Global->Doubles[0]->Value = 2.71828182845905;
    myController->Variables->Global->Doubles[5]->Value = 3.14159265358979;
    myController->Commands->Motion->Enable(0);
    myController->Commands->Motion->MoveAbs(0, 1, 100);
    myController->Commands->Motion->WaitForMotionDone(WaitOption::MoveDone, 0);
    // Configure the custom diagnostics
    CustomDiagnostics^ customDiagnostics = gcnew CustomDiagnostics(myController) ;
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::DriveStatus, "X");
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::DriveStatus, "Y");
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionCommand, "X");
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionCommand, "Y");
    customDiagnostics->Configuration->Variable->Add("$global[0]");
    customDiagnostics->Configuration->System->Add(SystemStatusSignal::GlobalVariable, 5);
    // Get the values
    CustomDiagnosticsResults^ result = customDiagnostics->Retrieve();
    // Extract the values, note that they can be extracted in any order
    Console::WriteLine("Position Command for Axis X: {0}", result->Axis[AxisStatusSignal::PositionCommand, "X"]->Value);
    Console::WriteLine("Position Command for Axis Y: {0}", result->Axis[AxisStatusSignal::PositionCommand, "Y"]->Value);
    Console::WriteLine("Drive Status for Axis X: {0}", result->Axis[AxisStatusSignal::DriveStatus, "X"]->ConvertValueDriveStatus());
    Console::WriteLine("Drive Status for Axis Y: {0}", result->Axis[AxisStatusSignal::DriveStatus, "Y"]->ConvertValueDriveStatus());
    Console::WriteLine("Global Double #0 : {0}", result->Variable["$global[0]"]->Value);
    Console::WriteLine("Global Double #5 : {0}", result->System[SystemStatusSignal::GlobalVariable, 5]->Value);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Do some things on the controller so we can detect them
    myController.Variables.Global.Doubles[0].Value = 2.7182818284590452;
    myController.Variables.Global.Doubles[5].Value = 3.1415926535897931;
    myController.Commands.Motion.Enable(0);
    myController.Commands.Motion.MoveAbs(0, 1.0, 100.0);
    myController.Commands.Motion.WaitForMotionDone(WaitOption.MoveDone, 0);
    // Configure the custom diagnostics
    CustomDiagnostics customDiagnostics = new CustomDiagnostics(myController);
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "X");
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "Y");
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "X");
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "Y");
    customDiagnostics.Configuration.Variable.Add("$global[0]");
    customDiagnostics.Configuration.System.Add(SystemStatusSignal.GlobalVariable, 5);
    // Get the values
    CustomDiagnosticsResults result = customDiagnostics.Retrieve();
    // Extract the values, note that they can be extracted in any order
    Console.WriteLine("Position Command for Axis X: {0}", result.Axis[AxisStatusSignal.PositionCommand, "X"].Value);
    Console.WriteLine("Position Command for Axis Y: {0}", result.Axis[AxisStatusSignal.PositionCommand, "Y"].Value);
    Console.WriteLine("Drive Status for Axis X: {0}", result.Axis[AxisStatusSignal.DriveStatus, "X"].ConvertValueDriveStatus());
    Console.WriteLine("Drive Status for Axis Y: {0}", result.Axis[AxisStatusSignal.DriveStatus, "Y"].ConvertValueDriveStatus());
    Console.WriteLine("Global Double #0 : {0}", result.Variable["$global[0]"].Value);
    Console.WriteLine("Global Double #5 : {0}", result.System[SystemStatusSignal.GlobalVariable, 5].Value);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Do some things on the controller so we can detect them
    myController.Variables.Global.Doubles.Item(0).Value = 2.7182818284590452
    myController.Variables.Global.Doubles.Item(5).Value = 3.1415926535897931
    myController.Commands.Motion.Enable(0)
    myController.Commands.Motion.MoveAbs(0, 1, 100)
    myController.Commands.Motion.WaitForMotionDone(WaitOption.MoveDone, 0)
    ' Configure the custom diagnostics
    Dim customDiagnostics As New CustomDiagnostics(myController)
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "X")
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "Y")
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "X")
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "Y")
    customDiagnostics.Configuration.Variable.Add("$global[0]")
    customDiagnostics.Configuration.System.Add(SystemStatusSignal.GlobalVariable, 5)
    ' Get the values
    Dim result As CustomDiagnosticsResults = customDiagnostics.Retrieve
    ' Extract the values, note that they can be extracted in any order
    Console.WriteLine("Position Command for Axis X: {0}", result.Axis.Item(AxisStatusSignal.PositionCommand, "X").Value)
    Console.WriteLine("Position Command for Axis Y: {0}", result.Axis.Item(AxisStatusSignal.PositionCommand, "Y").Value)
    Console.WriteLine("Drive Status for Axis X: {0}", result.Axis.Item(AxisStatusSignal.DriveStatus, "X").ConvertValueDriveStatus)
    Console.WriteLine("Drive Status for Axis Y: {0}", result.Axis.Item(AxisStatusSignal.DriveStatus, "Y").ConvertValueDriveStatus)
    Console.WriteLine("Global Double #0 : {0}", result.Variable.Item("$global[0]").Value)
    Console.WriteLine("Global Double #5 : {0}", result.System.Item(SystemStatusSignal.GlobalVariable, 5).Value)

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.CustomDiagnostics.#ctor(Aerotech.A3200.Controller)">
            <summary>Creates a new instance of this class</summary>
            <param name="controller">The controller from which to get diagnostics</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="controller"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.CustomDiagnostics.Retrieve">
            <summary>Retrieves diagnostics from the <see cref="P:Aerotech.A3200.Status.Custom.CustomDiagnostics.Controller"/></summary>
            <returns>The diagnostics configured in <see cref="P:Aerotech.A3200.Status.Custom.CustomDiagnostics.Configuration"/> from <see cref="P:Aerotech.A3200.Status.Custom.CustomDiagnostics.Controller"/></returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.CustomDiagnostics.Retrieve(Aerotech.A3200.Units.UnitInformation)">
            <summary>Retrieves diagnostics from the <see cref="P:Aerotech.A3200.Status.Custom.CustomDiagnostics.Controller"/></summary>
            <param name="units">The units the data is returned in</param>
            <returns>The diagnostics configured in <see cref="P:Aerotech.A3200.Status.Custom.CustomDiagnostics.Configuration"/> from <see cref="P:Aerotech.A3200.Status.Custom.CustomDiagnostics.Controller"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="units"/> is null</exception>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>Aerotech.A3200.Status.Custom</li>
<li>Aerotech.A3200.Units</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // Get Position Feedback on axes X and Y
        CustomDiagnostics^ customDiagnostics = gcnew CustomDiagnostics(myController) ;
        customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionFeedback, "X");
        customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionFeedback, "Y");
        CustomDiagnosticsResults^ results = customDiagnostics->Retrieve();
        // Convert the results to be in secondary units per minute
        results = results->ConvertUnits(gcnew UnitInformation(DistanceUnit::Secondary, TimeUnit::Minutes) );
        Console::WriteLine("Position Feedback for axis X: {0}", results->Axis[AxisStatusSignal::PositionFeedback, "X"]->Value);
        Console::WriteLine("Position Feedback for axis Y: {0}", results->Axis[AxisStatusSignal::PositionFeedback, "Y"]->Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // Get Position Feedback on axes X and Y
        CustomDiagnostics customDiagnostics = new CustomDiagnostics(myController);
        customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionFeedback, "X");
        customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionFeedback, "Y");
        CustomDiagnosticsResults results = customDiagnostics.Retrieve();
        // Convert the results to be in secondary units per minute
        results = results.ConvertUnits(new UnitInformation(DistanceUnit.Secondary, TimeUnit.Minutes));
        Console.WriteLine("Position Feedback for axis X: {0}", results.Axis[AxisStatusSignal.PositionFeedback, "X"].Value);
        Console.WriteLine("Position Feedback for axis Y: {0}", results.Axis[AxisStatusSignal.PositionFeedback, "Y"].Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' Get Position Feedback on axes X and Y
        Dim customDiagnostics As New CustomDiagnostics(myController)
        customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionFeedback, "X")
        customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionFeedback, "Y")
        Dim results As CustomDiagnosticsResults = customDiagnostics.Retrieve
        ' Convert the results to be in secondary units per minute
        results = results.ConvertUnits(New UnitInformation(DistanceUnit.Secondary, TimeUnit.Minutes))
        Console.WriteLine("Position Feedback for axis X: {0}", results.Axis(AxisStatusSignal.PositionFeedback, "X").Value)
        Console.WriteLine("Position Feedback for axis Y: {0}", results.Axis(AxisStatusSignal.PositionFeedback, "Y").Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnostics.Configuration">
            <summary>Contains the configuration of what items to retrieve</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnostics.Controller">
            <summary>The controller from which to retrieve diagnostics</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.CustomDiagnosticsConfiguration">
            <summary>Represents the configuration for custom diagnositcs</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>Aerotech.A3200.Status</li>
<li>Aerotech.A3200.Status.Custom</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Do some things on the controller so we can detect them
    myController->Variables->Global->Doubles[0]->Value = 2.71828182845905;
    myController->Variables->Global->Doubles[5]->Value = 3.14159265358979;
    myController->Commands->Motion->Enable(0);
    myController->Commands->Motion->MoveAbs(0, 1, 100);
    myController->Commands->Motion->WaitForMotionDone(WaitOption::MoveDone, 0);
    // Configure the custom diagnostics
    CustomDiagnostics^ customDiagnostics = gcnew CustomDiagnostics(myController) ;
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::DriveStatus, "X");
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::DriveStatus, "Y");
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionCommand, "X");
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionCommand, "Y");
    customDiagnostics->Configuration->Variable->Add("$global[0]");
    customDiagnostics->Configuration->System->Add(SystemStatusSignal::GlobalVariable, 5);
    // Get the values
    CustomDiagnosticsResults^ result = customDiagnostics->Retrieve();
    // Extract the values, note that they can be extracted in any order
    Console::WriteLine("Position Command for Axis X: {0}", result->Axis[AxisStatusSignal::PositionCommand, "X"]->Value);
    Console::WriteLine("Position Command for Axis Y: {0}", result->Axis[AxisStatusSignal::PositionCommand, "Y"]->Value);
    Console::WriteLine("Drive Status for Axis X: {0}", result->Axis[AxisStatusSignal::DriveStatus, "X"]->ConvertValueDriveStatus());
    Console::WriteLine("Drive Status for Axis Y: {0}", result->Axis[AxisStatusSignal::DriveStatus, "Y"]->ConvertValueDriveStatus());
    Console::WriteLine("Global Double #0 : {0}", result->Variable["$global[0]"]->Value);
    Console::WriteLine("Global Double #5 : {0}", result->System[SystemStatusSignal::GlobalVariable, 5]->Value);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Do some things on the controller so we can detect them
    myController.Variables.Global.Doubles[0].Value = 2.7182818284590452;
    myController.Variables.Global.Doubles[5].Value = 3.1415926535897931;
    myController.Commands.Motion.Enable(0);
    myController.Commands.Motion.MoveAbs(0, 1.0, 100.0);
    myController.Commands.Motion.WaitForMotionDone(WaitOption.MoveDone, 0);
    // Configure the custom diagnostics
    CustomDiagnostics customDiagnostics = new CustomDiagnostics(myController);
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "X");
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "Y");
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "X");
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "Y");
    customDiagnostics.Configuration.Variable.Add("$global[0]");
    customDiagnostics.Configuration.System.Add(SystemStatusSignal.GlobalVariable, 5);
    // Get the values
    CustomDiagnosticsResults result = customDiagnostics.Retrieve();
    // Extract the values, note that they can be extracted in any order
    Console.WriteLine("Position Command for Axis X: {0}", result.Axis[AxisStatusSignal.PositionCommand, "X"].Value);
    Console.WriteLine("Position Command for Axis Y: {0}", result.Axis[AxisStatusSignal.PositionCommand, "Y"].Value);
    Console.WriteLine("Drive Status for Axis X: {0}", result.Axis[AxisStatusSignal.DriveStatus, "X"].ConvertValueDriveStatus());
    Console.WriteLine("Drive Status for Axis Y: {0}", result.Axis[AxisStatusSignal.DriveStatus, "Y"].ConvertValueDriveStatus());
    Console.WriteLine("Global Double #0 : {0}", result.Variable["$global[0]"].Value);
    Console.WriteLine("Global Double #5 : {0}", result.System[SystemStatusSignal.GlobalVariable, 5].Value);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Do some things on the controller so we can detect them
    myController.Variables.Global.Doubles.Item(0).Value = 2.7182818284590452
    myController.Variables.Global.Doubles.Item(5).Value = 3.1415926535897931
    myController.Commands.Motion.Enable(0)
    myController.Commands.Motion.MoveAbs(0, 1, 100)
    myController.Commands.Motion.WaitForMotionDone(WaitOption.MoveDone, 0)
    ' Configure the custom diagnostics
    Dim customDiagnostics As New CustomDiagnostics(myController)
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "X")
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "Y")
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "X")
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "Y")
    customDiagnostics.Configuration.Variable.Add("$global[0]")
    customDiagnostics.Configuration.System.Add(SystemStatusSignal.GlobalVariable, 5)
    ' Get the values
    Dim result As CustomDiagnosticsResults = customDiagnostics.Retrieve
    ' Extract the values, note that they can be extracted in any order
    Console.WriteLine("Position Command for Axis X: {0}", result.Axis.Item(AxisStatusSignal.PositionCommand, "X").Value)
    Console.WriteLine("Position Command for Axis Y: {0}", result.Axis.Item(AxisStatusSignal.PositionCommand, "Y").Value)
    Console.WriteLine("Drive Status for Axis X: {0}", result.Axis.Item(AxisStatusSignal.DriveStatus, "X").ConvertValueDriveStatus)
    Console.WriteLine("Drive Status for Axis Y: {0}", result.Axis.Item(AxisStatusSignal.DriveStatus, "Y").ConvertValueDriveStatus)
    Console.WriteLine("Global Double #0 : {0}", result.Variable.Item("$global[0]").Value)
    Console.WriteLine("Global Double #5 : {0}", result.System.Item(SystemStatusSignal.GlobalVariable, 5).Value)

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.CustomDiagnosticsConfiguration.#ctor">
            <summary>Creates a new blank configuration with default settings</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.CustomDiagnosticsConfiguration.Clear">
            <summary>Reset the configuration to the original state</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.CustomDiagnosticsConfiguration.System#ICloneable#Clone">
            <summary>Creates a shallow copy of this object</summary>
            <returns>A copy of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsConfiguration.System">
            <summary>The system signals that will be retrieved</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsConfiguration.Axis">
            <summary>The axis signals that will be retrieved</summary>
            <remarks>
            	<para>These come from the SMC, therefore the number that can be retrieved is not limited.</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsConfiguration.Task">
            <summary>The task signals that will be retrieved</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsConfiguration.Variable">
            <summary>The variable signals that will be retrieved</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.SignalEntryCollection`1">
            <summary>Base class for different kinds of custom diagnostics signal collections</summary>
            <typeparam name="TEntry">The kind of entries that class will contain</typeparam>
        </member>
        <member name="F:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.entries">
            <summary>The list of signals to be retrieved</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.System#Collections#Generic#ICollection{TEntry}#CopyTo(`0[],System.Int32)">
            <summary>Copies entries to given array</summary>
            <param name="entryArr">The array to copy the values to</param>
            <param name="index">The array index to start at</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets untyped enumerator for this collection</summary>
            <returns>The untyped enumerator for this colletion to use with <c>foreach</c></returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.GetEnumerator">
            <summary>Provides enumerator for <c>foreach</c></summary>
            <returns>The enumerator for this collection</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.Contains(`0)">
            <summary>Check if this collection contains the <paramref name="entry"/></summary>
            <param name="entry">The entry to check</param>
            <returns><c>true</c> if given <paramref name="entry"/> </returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.Add(`0)">
            <summary>Adds a new entry to the collection</summary>
            <param name="entry">The entry to add</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.Remove(`0)">
            <summary>Removes an entry from the collection</summary>
            <param name="entry">The entry to remove</param>
            <returns><c>true</c> if entry was removed, <c>false</c> if entry was not found</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entry"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.Clear">
            <summary>Removes all entries from this collection</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.Count">
            <summary>The number of signals configured for custom diagnostics</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.SignalEntryCollection`1.System#Collections#Generic#ICollection{TEntry}#IsReadOnly">
            <summary>Whether this collection is readonly</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.SystemSignalEntryCollection">
            <summary>Collection of configured system signals</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SystemSignalEntryCollection.Add(Aerotech.A3200.Status.SystemStatusSignal)">
            <summary>Adds a signal to collect</summary>
            <param name="item">The signal to collect</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SystemSignalEntryCollection.Add(Aerotech.A3200.Status.SystemStatusSignal,System.Int32)">
            <summary>Adds a signal to collect</summary>
            <param name="item">The signal to collect</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SystemSignalEntryCollection.Remove(Aerotech.A3200.Status.SystemStatusSignal)">
            <summary>Removes a signal from being collected</summary>
            <param name="item">The signal to remove</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SystemSignalEntryCollection.Remove(Aerotech.A3200.Status.SystemStatusSignal,System.Int32)">
            <summary>Removes a signal from being collected</summary>
            <param name="item">The signal to remove</param>
            <param name="argument">Optional argument for the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.AxisSignalEntryCollection">
            <summary>Collection of configured axis signals</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntryCollection.Add(Aerotech.A3200.Status.AxisStatusSignal,System.Int32)">
            <summary>Adds a signal to retrieve.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="axisIndex">The axis on which to retrieve the signal.</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntryCollection.Add(Aerotech.A3200.Status.AxisStatusSignal,System.String)">
            <summary>Adds a signal to collect</summary>
            <param name="signal">The signal to collect</param>
            <param name="axisName">The name of the axis on which to collect the signal</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntryCollection.Add(Aerotech.A3200.Status.AxisStatusSignal,System.Int32,System.Int32)">
            <summary>Adds a signal to retrieve.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="axisIndex">The axis on which to retrieve the signal.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments.</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntryCollection.Add(Aerotech.A3200.Status.AxisStatusSignal,System.String,System.Int32)">
            <summary>Adds a signal to collect</summary>
            <param name="signal">The signal to collect</param>
            <param name="axisName">The name of the axis on which to collect the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguraion.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntryCollection.Remove(Aerotech.A3200.Status.AxisStatusSignal,System.Int32)">
            <summary>Removes a signal from being retrieved</summary>
            <param name="signal">The signal to remove</param>
            <param name="axisIndex">The axis on which to retrieve the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntryCollection.Remove(Aerotech.A3200.Status.AxisStatusSignal,System.String)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="axisName">The name of the axis from which to remove the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntryCollection.Remove(Aerotech.A3200.Status.AxisStatusSignal,System.Int32,System.Int32)">
            <summary>Removes a signal from being retrieved</summary>
            <param name="signal">The signal to remove</param>
            <param name="axisIndex">The axis on which to retrieve the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</remarks>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntryCollection.Remove(Aerotech.A3200.Status.AxisStatusSignal,System.String,System.Int32)">
            <summary>Removes a signal from being collected</summary>
            <param name="signal">The signal to remove</param>
            <param name="axisName">The name of the axis from which to remove the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</remarks>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.TaskSignalEntryCollection">
            <summary>Collection of configured task signals</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntryCollection.Add(Aerotech.A3200.Status.TaskStatusSignal,Aerotech.A3200.TaskId)">
            <summary>Adds a signal to retrieve</summary>
            <param name="signal">The signal to retrieve</param>
            <param name="taskId">The task on which to retrieve the signal</param>
            <remarks><b>Do not</b> mix TaskIds and taskIndexes when creating a CustomDiagnosticConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntryCollection.Add(Aerotech.A3200.Status.TaskStatusSignal,System.Int32)">
            <summary>Adds a signal to retrieve.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="taskIndex">The number of the task on which to retrieve the signal.</param>
            <remarks><b>Do not</b> mix TaskIds and taskIndexes when creating a CustomDiagnosticConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntryCollection.Add(Aerotech.A3200.Status.TaskStatusSignal,Aerotech.A3200.TaskId,System.Int32)">
            <summary>Adds a signal to retrieve</summary>
            <param name="signal">The signal to retrieve</param>
            <param name="taskId">The task on which to retrieve the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            	<para><b>Do not</b> mix TaskIds and taskIndexes when creating a CustomDiagnosticConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntryCollection.Add(Aerotech.A3200.Status.TaskStatusSignal,System.Int32,System.Int32)">
            <summary>Adds a signal to retrieve.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="taskIndex">The number of the task on which to retrieve the signal.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            	<para><b>Do not</b> mix TaskIds and taskIndexes when creating a CustomDiagnosticConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntryCollection.Remove(Aerotech.A3200.Status.TaskStatusSignal,Aerotech.A3200.TaskId)">
            <summary>Removes a signal from being retrieved</summary>
            <param name="signal">The signal to remove</param>
            <param name="taskId">The task on which to retrieve the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix TaskIds and taskIndexes when creating a CustomDiagnosticConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntryCollection.Remove(Aerotech.A3200.Status.TaskStatusSignal,System.Int32)">
            <summary>Removes a signal from being retrieved.</summary>
            <param name="signal">The signal to remove.</param>
            <param name="taskIndex">The index of the task on which to retrieve the signal.</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found.</returns>
            <remarks>
            	<para>
            		If there are multiple signals in collection that share the same signal type
            		but are different by optional arguments, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix TaskIds and taskIndexes when creating a CustomDiagnosticConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntryCollection.Remove(Aerotech.A3200.Status.TaskStatusSignal,Aerotech.A3200.TaskId,System.Int32)">
            <summary>Removes a signal from being retrieved</summary>
            <param name="signal">The signal to remove</param>
            <param name="taskId">The task on which to retrieve the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks><b>Do not</b> mix TaskIds and taskIndexes when creating a CustomDiagnosticsConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntryCollection.Remove(Aerotech.A3200.Status.TaskStatusSignal,System.Int32,System.Int32)">
            <summary>Removes a signal from being retrieved</summary>
            <param name="signal">The signal to remove</param>
            <param name="taskIndex">The task on which to retrieve the signal</param>
            <param name="argument">Optional argument for the signal</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks><b>Do not</b> mix TaskIds and taskIndexes when creating a CustomDiagnosticsConfiguration.</remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.VariableSignalEntryCollection">
            <summary>Collection of configured variable signals</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.VariableSignalEntryCollection.Add(System.String)">
            <summary>Adds a variable signal to retrieve</summary>
            <param name="variableName">The variable to retrieve</param>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while creating a CustomDiagnosticsConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.VariableSignalEntryCollection.Add(System.String,Aerotech.A3200.TaskId)">
            <summary>Adds a signal to retrieve</summary>
            <param name="variableName">The variable to retrieve</param>
            <param name="taskId">The TaskId of the index of the variable (for task-based variables)</param>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while creating a CustomDiagnosticsConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.VariableSignalEntryCollection.Add(System.String,System.Int32)">
            <summary>Adds a signal to retrieve.</summary>
            <param name="variableName">The variable to retrieve.</param>
            <param name="taskIndex">The number of the index of the variable (for task-based variables).</param>
            <remarks><b>Do not</b> mix TaskId and taskIndex references while creating a CustomDiagnosticsConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.VariableSignalEntryCollection.Remove(System.String)">
            <summary>Removes a variable signal from being retrieved</summary>
            <param name="variableName">The variable signal to remove</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found</returns>
            <remarks>
            	<para>
            		If there are multiple signals in the collection that share the same variable name
            		but are different by index, this method will remove all of them.
            	</para>
            	<para><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.VariableSignalEntryCollection.Remove(System.String,Aerotech.A3200.TaskId)">
            <summary>Removes a variable signal from being retrieved.</summary>
            <param name="variableName">The variable signal to remove.</param>
            <param name="taskId">The TaskId of the index of the variable (for task-based variables).</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found.</returns>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.VariableSignalEntryCollection.Remove(System.String,System.Int32)">
            <summary>Removes a variable signal from being retrieved.</summary>
            <param name="variableName">The variable signal to remove.</param>
            <param name="taskIndex">The number of the index of the variable (for task-based variables).</param>
            <returns><c>true</c> if was removed, <c>false</c> if was not found.</returns>
            <remarks><b>Do not</b> mix AxisName and AxisIndex references while creating a CustomDiagnosticsConfiguration.</remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.SignalEntry`3">
            <summary>The base class for a configured custom diagnostic item.</summary>
            <typeparam name="TSignal">The kind of signal it is.</typeparam>
            <typeparam name="TIndexName">The kind of the name of the index used.</typeparam>
            <typeparam name="TIndex">The kind of index used.</typeparam>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SignalEntry`3.GetHashCode">
            <summary>Gets the hashcode of this class</summary>
            <returns></returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SignalEntry`3.Equals(System.Object)">
            <summary>Checks for equality with another object</summary>
            <param name="obj">The objec to check</param>
            <returns><c>true</c> if objects are the same type and contain the same information</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.SignalEntry`3.Signal">
            <summary>Which signal to retrieve</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.SignalEntry`3.IndexName">
            <summary>The name of the axis or task to retrieve the signal on.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.SignalEntry`3.Index">
            <summary>Which axis or task to retrieve the signal on</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.SignalEntry`3.Argument">
            <summary>Optional argument for given configuration item</summary>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.AxisSignalEntry">
            <summary>The configured custom diagnostic item for axis signals</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntry.#ctor(Aerotech.A3200.Status.AxisStatusSignal,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="index">The axis index to retrieve the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntry.#ctor(Aerotech.A3200.Status.AxisStatusSignal,System.String)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="axisName">The name of the axis to retrieve the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntry.#ctor(Aerotech.A3200.Status.AxisStatusSignal,System.Int32,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="index">The axis index to retrieve the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.AxisSignalEntry.#ctor(Aerotech.A3200.Status.AxisStatusSignal,System.String,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="axisName">The the name of the axis to retrieve the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.TaskSignalEntry">
            <summary>The configured custom diagnostic item for task signals</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntry.#ctor(Aerotech.A3200.Status.TaskStatusSignal,System.Nullable{Aerotech.A3200.TaskId})">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="taskId">The TaskId of the task to retrieve the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntry.#ctor(Aerotech.A3200.Status.TaskStatusSignal,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="taskIndex">The number of the task to retrieve the signal on.</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntry.#ctor(Aerotech.A3200.Status.TaskStatusSignal,System.Nullable{Aerotech.A3200.TaskId},System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="taskId">The task to retrieve the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.TaskSignalEntry.#ctor(Aerotech.A3200.Status.TaskStatusSignal,System.Int32,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="signal">The signal to retrieve.</param>
            <param name="taskIndex">The number of the task to retrieve the signal on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments.</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.SystemSignalEntry">
            <summary>The configured custom diagnostic item for system signals</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SystemSignalEntry.#ctor(Aerotech.A3200.Status.SystemStatusSignal)">
            <summary>Creates a new configuration entry</summary>
            <param name="signal">The signal to retrieve</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.SystemSignalEntry.#ctor(Aerotech.A3200.Status.SystemStatusSignal,System.Int32)">
            <summary>Creates a new configuration entry</summary>
            <param name="signal">The signal to retrieve</param>
            <param name="argument">Optional argument for the signal</param>
            <remarks>
            	<para>See the main help file for a list of signals and their optional arguments</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.VariableSignalEntry">
            <summary>The configuration custom diagnostic item for variables</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.VariableSignalEntry.#ctor(System.String)">
            <summary>Creates a new configuration entry</summary>
            <param name="variableName">The variable signal to retrieve</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.VariableSignalEntry.#ctor(System.String,System.Nullable{Aerotech.A3200.TaskId})">
            <summary>Creates a new configuration entry.</summary>
            <param name="variableName">The variable signal to retrieve.</param>
            <param name="taskId">The TaskId for the task to retrieve the signal from.</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.VariableSignalEntry.#ctor(System.String,System.Int32)">
            <summary>Creates a new configuration entry.</summary>
            <param name="variableName">The variable signal to retrieve.</param>
            <param name="taskIndex">The number of the task to retrieve the signal from.</param>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.CustomDiagnosticsResults">
            <summary>Contains all the custom diagnostics that have been retrieved</summary>
            <remarks>
            	<para>This can be retrieved from <see cref="M:Aerotech.A3200.Status.Custom.CustomDiagnostics.Retrieve"/></para>
            	<para>
            		The unit information can be accessed from <see cref="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsResults.Units"/>
            		and the data can be converted to a different set of units by calling
            		<see cref="M:Aerotech.A3200.Status.Custom.CustomDiagnosticsResults.ConvertUnits(Aerotech.A3200.Units.UnitInformation)"/>.  The unit names are available
            		from <see cref="P:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.UnitName"/>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Commands</li>
<li>Aerotech.A3200.Status</li>
<li>Aerotech.A3200.Status.Custom</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Do some things on the controller so we can detect them
    myController->Variables->Global->Doubles[0]->Value = 2.71828182845905;
    myController->Variables->Global->Doubles[5]->Value = 3.14159265358979;
    myController->Commands->Motion->Enable(0);
    myController->Commands->Motion->MoveAbs(0, 1, 100);
    myController->Commands->Motion->WaitForMotionDone(WaitOption::MoveDone, 0);
    // Configure the custom diagnostics
    CustomDiagnostics^ customDiagnostics = gcnew CustomDiagnostics(myController) ;
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::DriveStatus, "X");
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::DriveStatus, "Y");
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionCommand, "X");
    customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionCommand, "Y");
    customDiagnostics->Configuration->Variable->Add("$global[0]");
    customDiagnostics->Configuration->System->Add(SystemStatusSignal::GlobalVariable, 5);
    // Get the values
    CustomDiagnosticsResults^ result = customDiagnostics->Retrieve();
    // Extract the values, note that they can be extracted in any order
    Console::WriteLine("Position Command for Axis X: {0}", result->Axis[AxisStatusSignal::PositionCommand, "X"]->Value);
    Console::WriteLine("Position Command for Axis Y: {0}", result->Axis[AxisStatusSignal::PositionCommand, "Y"]->Value);
    Console::WriteLine("Drive Status for Axis X: {0}", result->Axis[AxisStatusSignal::DriveStatus, "X"]->ConvertValueDriveStatus());
    Console::WriteLine("Drive Status for Axis Y: {0}", result->Axis[AxisStatusSignal::DriveStatus, "Y"]->ConvertValueDriveStatus());
    Console::WriteLine("Global Double #0 : {0}", result->Variable["$global[0]"]->Value);
    Console::WriteLine("Global Double #5 : {0}", result->System[SystemStatusSignal::GlobalVariable, 5]->Value);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Do some things on the controller so we can detect them
    myController.Variables.Global.Doubles[0].Value = 2.7182818284590452;
    myController.Variables.Global.Doubles[5].Value = 3.1415926535897931;
    myController.Commands.Motion.Enable(0);
    myController.Commands.Motion.MoveAbs(0, 1.0, 100.0);
    myController.Commands.Motion.WaitForMotionDone(WaitOption.MoveDone, 0);
    // Configure the custom diagnostics
    CustomDiagnostics customDiagnostics = new CustomDiagnostics(myController);
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "X");
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "Y");
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "X");
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "Y");
    customDiagnostics.Configuration.Variable.Add("$global[0]");
    customDiagnostics.Configuration.System.Add(SystemStatusSignal.GlobalVariable, 5);
    // Get the values
    CustomDiagnosticsResults result = customDiagnostics.Retrieve();
    // Extract the values, note that they can be extracted in any order
    Console.WriteLine("Position Command for Axis X: {0}", result.Axis[AxisStatusSignal.PositionCommand, "X"].Value);
    Console.WriteLine("Position Command for Axis Y: {0}", result.Axis[AxisStatusSignal.PositionCommand, "Y"].Value);
    Console.WriteLine("Drive Status for Axis X: {0}", result.Axis[AxisStatusSignal.DriveStatus, "X"].ConvertValueDriveStatus());
    Console.WriteLine("Drive Status for Axis Y: {0}", result.Axis[AxisStatusSignal.DriveStatus, "Y"].ConvertValueDriveStatus());
    Console.WriteLine("Global Double #0 : {0}", result.Variable["$global[0]"].Value);
    Console.WriteLine("Global Double #5 : {0}", result.System[SystemStatusSignal.GlobalVariable, 5].Value);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Do some things on the controller so we can detect them
    myController.Variables.Global.Doubles.Item(0).Value = 2.7182818284590452
    myController.Variables.Global.Doubles.Item(5).Value = 3.1415926535897931
    myController.Commands.Motion.Enable(0)
    myController.Commands.Motion.MoveAbs(0, 1, 100)
    myController.Commands.Motion.WaitForMotionDone(WaitOption.MoveDone, 0)
    ' Configure the custom diagnostics
    Dim customDiagnostics As New CustomDiagnostics(myController)
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "X")
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.DriveStatus, "Y")
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "X")
    customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionCommand, "Y")
    customDiagnostics.Configuration.Variable.Add("$global[0]")
    customDiagnostics.Configuration.System.Add(SystemStatusSignal.GlobalVariable, 5)
    ' Get the values
    Dim result As CustomDiagnosticsResults = customDiagnostics.Retrieve
    ' Extract the values, note that they can be extracted in any order
    Console.WriteLine("Position Command for Axis X: {0}", result.Axis.Item(AxisStatusSignal.PositionCommand, "X").Value)
    Console.WriteLine("Position Command for Axis Y: {0}", result.Axis.Item(AxisStatusSignal.PositionCommand, "Y").Value)
    Console.WriteLine("Drive Status for Axis X: {0}", result.Axis.Item(AxisStatusSignal.DriveStatus, "X").ConvertValueDriveStatus)
    Console.WriteLine("Drive Status for Axis Y: {0}", result.Axis.Item(AxisStatusSignal.DriveStatus, "Y").ConvertValueDriveStatus)
    Console.WriteLine("Global Double #0 : {0}", result.Variable.Item("$global[0]").Value)
    Console.WriteLine("Global Double #5 : {0}", result.System.Item(SystemStatusSignal.GlobalVariable, 5).Value)

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.CustomDiagnosticsResults.ConvertUnits(Aerotech.A3200.Units.UnitInformation)">
            <summary>Converts the data in this result packet to a new set of units</summary>
            <param name="newUnits">The units to convert to</param>
            <returns>The same data, but in <paramref name="newUnits"/> set of units</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="newUnits"/> is null</exception>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>Aerotech.A3200.Status.Custom</li>
<li>Aerotech.A3200.Units</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // Get Position Feedback on axes X and Y
        CustomDiagnostics^ customDiagnostics = gcnew CustomDiagnostics(myController) ;
        customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionFeedback, "X");
        customDiagnostics->Configuration->Axis->Add(AxisStatusSignal::PositionFeedback, "Y");
        CustomDiagnosticsResults^ results = customDiagnostics->Retrieve();
        // Convert the results to be in secondary units per minute
        results = results->ConvertUnits(gcnew UnitInformation(DistanceUnit::Secondary, TimeUnit::Minutes) );
        Console::WriteLine("Position Feedback for axis X: {0}", results->Axis[AxisStatusSignal::PositionFeedback, "X"]->Value);
        Console::WriteLine("Position Feedback for axis Y: {0}", results->Axis[AxisStatusSignal::PositionFeedback, "Y"]->Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // Get Position Feedback on axes X and Y
        CustomDiagnostics customDiagnostics = new CustomDiagnostics(myController);
        customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionFeedback, "X");
        customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionFeedback, "Y");
        CustomDiagnosticsResults results = customDiagnostics.Retrieve();
        // Convert the results to be in secondary units per minute
        results = results.ConvertUnits(new UnitInformation(DistanceUnit.Secondary, TimeUnit.Minutes));
        Console.WriteLine("Position Feedback for axis X: {0}", results.Axis[AxisStatusSignal.PositionFeedback, "X"].Value);
        Console.WriteLine("Position Feedback for axis Y: {0}", results.Axis[AxisStatusSignal.PositionFeedback, "Y"].Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' Get Position Feedback on axes X and Y
        Dim customDiagnostics As New CustomDiagnostics(myController)
        customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionFeedback, "X")
        customDiagnostics.Configuration.Axis.Add(AxisStatusSignal.PositionFeedback, "Y")
        Dim results As CustomDiagnosticsResults = customDiagnostics.Retrieve
        ' Convert the results to be in secondary units per minute
        results = results.ConvertUnits(New UnitInformation(DistanceUnit.Secondary, TimeUnit.Minutes))
        Console.WriteLine("Position Feedback for axis X: {0}", results.Axis(AxisStatusSignal.PositionFeedback, "X").Value)
        Console.WriteLine("Position Feedback for axis Y: {0}", results.Axis(AxisStatusSignal.PositionFeedback, "Y").Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsResults.Units">
            <summary>Contains information about what units the data is in</summary>
            <remarks>
            	<para>By default the units are <see cref="F:Aerotech.A3200.Units.DistanceUnit.Primary"/> per <see cref="F:Aerotech.A3200.Units.TimeUnit.Seconds"/></para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsResults.System">
            <summary>Contains system signals retrieved</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsResults.Axis">
            <summary>Contains axis signals retrieved</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsResults.Task">
            <summary>Contains task signals retrieved</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.CustomDiagnosticsResults.Variable">
            <summary>Contains variable signals retrieved</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedCategoryResults`4">
            <summary>Base class for different categories of retrieved signals.</summary>
            <typeparam name="TSignal">The kind of signal.</typeparam>
            <typeparam name="TIndexName">The kind of the name of the index used.</typeparam>
            <typeparam name="TIndex">The kind of index used.</typeparam>
            <typeparam name="TEntry">The kind of data container entries contained.</typeparam>
        </member>
        <member name="F:Aerotech.A3200.Status.Custom.RetrievedCategoryResults`4.results">
            <summary>The results of the data retrieval</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedCategoryResults`4.System#Collections#IEnumerable#GetEnumerator">
            <summary>Gets an untyped enumerator for this collection</summary>
            <returns>An untyped enumerator to use with <c>foreach</c></returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedCategoryResults`4.GetEnumerator">
            <summary>Gets the enumerator for this collection</summary>
            <returns>The enumerator to use with <c>foreach</c></returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedCategoryResults`4.Item(Aerotech.A3200.Status.Custom.SignalEntry{`0,`1,`2})">
            <summary>Gets data that corresponds to a given </summary>
            <param name="entry">The configuration entry</param>
            <returns>The data corresponding to the <paramref name="entry"/>.</returns>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedSystemResults">
            <summary>Contains all retrieved system signals</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedSystemResults.Item(Aerotech.A3200.Status.SystemStatusSignal)">
            <summary>Gets the given retrieved signal</summary>
            <param name="signal">The signal to get</param>
            <returns>The retrieved <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedSystemResults.Item(Aerotech.A3200.Status.SystemStatusSignal,System.Int32)">
            <summary>Gets the given retrieved signal</summary>
            <param name="signal">The signal to get</param>
            <param name="argument">Optional argument for the signal</param>
            <returns>The retrieved <paramref name="signal"/></returns>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedAxisResults">
            <summary>Contains all retrieved axis signals</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedAxisResults.Item(Aerotech.A3200.Status.AxisStatusSignal,System.Int32)">
            <summary>Gets the given retrieved signal</summary>
            <param name="signal">The signal to get</param>
            <param name="axisIndex">The axis the signal was retrieved on</param>
            <returns>The retrieved <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedAxisResults.Item(Aerotech.A3200.Status.AxisStatusSignal,System.String)">
            <summary>Gets the given collected signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="axisName">The name of the axis the signal was collected on.</param>
            <returns>The collected <paramref name="signal"/>.</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedAxisResults.Item(Aerotech.A3200.Status.AxisStatusSignal,System.Int32,System.Int32)">
            <summary>Gets the given retrieved signal</summary>
            <param name="signal">The signal to get</param>
            <param name="axisIndex">The axis the signal was retrieved on</param>
            <param name="argument">Optional argument for the signal</param>
            <returns>The retrieved <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedAxisResults.Item(Aerotech.A3200.Status.AxisStatusSignal,System.String,System.Int32)">
            <summary>Gets the given collected signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="axisName">The name of the axis the signal was collected on.</param>
            <param name="argument">Option argument for the signal.</param>
            <returns>The collected <paramref name="signal"/></returns>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedTaskResults">
            <summary>Contains all collected task signals</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedTaskResults.Item(Aerotech.A3200.Status.TaskStatusSignal,Aerotech.A3200.TaskId)">
            <summary>Gets the given retrieved signal</summary>
            <param name="signal">The signal to get</param>
            <param name="taskId">The task the signal was retrieved on</param>
            <returns>The retrieved <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedTaskResults.Item(Aerotech.A3200.Status.TaskStatusSignal,System.Int32)">
            <summary>Gets the given retrieved signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="taskIndex">The number of the task the signal was retrieved on.</param>
            <returns>The retrieved <paramref name="signal"/>.</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedTaskResults.Item(Aerotech.A3200.Status.TaskStatusSignal,Aerotech.A3200.TaskId,System.Int32)">
            <summary>Gets the given retrieved signal</summary>
            <param name="signal">The signal to get</param>
            <param name="taskId">The task the signal was retrieved on</param>
            <param name="argument">Optional argument for the signal</param>
            <returns>The retrieved <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedTaskResults.Item(Aerotech.A3200.Status.TaskStatusSignal,System.Int32,System.Int32)">
            <summary>Gets the given retrieved signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="taskIndex">The number of the task the signal was retrieved on.</param>
            <param name="argument">Optional argument for the signal.</param>
            <returns>The retrieved <paramref name="signal"/>.</returns>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedVariableResults">
            <summary>Contains all retrieved variable signals</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedVariableResults.Item(System.String)">
            <summary>Gets the given retrieved signal</summary>
            <param name="signal">The signal to get</param>
            <returns>The retrieved <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedVariableResults.Item(System.String,Aerotech.A3200.TaskId)">
            <summary>Gets the given retrieved signal</summary>
            <param name="signal">The signal to get</param>
            <param name="taskId">The index the signal was retrieved on</param>
            <returns>The retrieved <paramref name="signal"/></returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedVariableResults.Item(System.String,System.Int32)">
            <summary>Gets the given retrieved signal.</summary>
            <param name="signal">The signal to get.</param>
            <param name="taskIndex">The number of the index the signal was retrieved on.</param>
            <returns>The retrieved <paramref name="signal"/>.</returns>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3">
            <summary>Base class for a retrieved signal.</summary>
            <typeparam name="TSignal">The kind of signal.</typeparam>
            <typeparam name="TIndexName">The kind of the name of the index.</typeparam>
            <typeparam name="TIndex">The kind of index.</typeparam>
        </member>
        <member name="F:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.value_">
            <summary>The value retrieved</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.unitName_">
            <summary>The name of the unit</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValueInt32">
            <summary>Converts <paramref name="Value"/> to value of <see cref="T:System.Int32"/></summary>
            <returns>The date in a new type</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValueSingle">
            <summary>Converts <paramref name="Value"/> to value of <see cref="T:System.Single"/></summary>
            <returns>The data in a new type</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValue``1">
            <summary>Converts <paramref name="Value"/> to value of provided type</summary>
            <returns>The value in given type</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValueAxisStatus">
            <summary>Converts <paramref name="Value"/> to <see cref="T:Aerotech.A3200.Status.AxisStatus"/> type</summary>
            <returns>The value in the requested type</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValueAxisFault">
            <summary>Converts <paramref name="Value"/> to <see cref="T:Aerotech.A3200.Status.AxisFault"/> type</summary>
            <returns>The value in the requested type</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValueDriveStatus">
            <summary>Converts <paramref name="Value"/> to <see cref="T:Aerotech.A3200.Status.DriveStatus"/> type</summary>
            <returns>The value in the requested type</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValueTaskStatus0">
            <summary>Converts <paramref name="Value"/> to <see cref="T:Aerotech.A3200.Tasks.TaskStatus0"/> type</summary>
            <returns>The value in the requested type</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValueTaskStatus1">
            <summary>Converts <paramref name="Value"/> to <see cref="T:Aerotech.A3200.Tasks.TaskStatus1"/> type</summary>
            <returns>The value in the requested type</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValueTaskStatus2">
            <summary>Converts <paramref name="Value"/> to <see cref="T:Aerotech.A3200.Tasks.TaskStatus2"/> type</summary>
            <returns>The value in the requested type</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.Value">
            <summary>The value retrieved</summary>
            <remarks>
            	<para>If one needs the value as other types, see <see cref="M:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.ConvertValue``1"/>.</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.Custom.RetrievedSignalEntry`3.UnitName">
            <summary>The name of the unit</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedSystemSignalEntry">
            <summary>Represents a retrieved system signal</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedAxisSignalEntry">
            <summary>Represents a retrieved axis signal</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedTaskSignalEntry">
            <summary>Represents a retrieved task signal</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Custom.RetrievedVariableSignalEntry">
            <summary>Represents a retrieved variable signal</summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.LoadedProgramCollection">
            <summary>Exposes programs that are in memory on the controller.</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Tasks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // We can stop a program by name
        myController->LoadedPrograms["program.pgm"]->Unload();
        // Or stop and unload all programs
        for each (LoadedProgram^ loadedProgram in myController->LoadedPrograms)
        {
            for each (Task^ associatedTask in loadedProgram->AssociatedTasks)
            {
                associatedTask->Program->Stop();
            }
            loadedProgram->Unload();
        }
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occured: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // We can stop a program by name
        myController.LoadedPrograms["program.pgm"].Unload();
        // Or stop and unload all programs
        foreach (LoadedProgram loadedProgram in myController.LoadedPrograms)
        {
            foreach (Task associatedTask in loadedProgram.AssociatedTasks)
            {
                associatedTask.Program.Stop();
            }
            loadedProgram.Unload();
        }
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occured: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' We can stop a program by name
        myController.LoadedPrograms.Item("program.pgm").Unload
        ' Or stop and unload all programs
        Dim loadedProgram As LoadedProgram
        For Each loadedProgram In myController.LoadedPrograms
            Dim associatedTask As Task
            For Each associatedTask In loadedProgram.AssociatedTasks
                associatedTask.Program.Stop
            Next
            loadedProgram.Unload
        Next
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occured: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Tasks.LoadedProgramCollection.Load(System.String)">
            <summary>Loads a program to the controller memory.</summary>
            <param name="filePath">The path to a source (.PGM) or object (.OGM) file to load.</param>
            <remarks>
            	<para>The program will be compiled if necessary.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.LoadedProgramCollection.GetEnumerator">
            <summary>Allows to iterate over all the programs on the controller.</summary>
            <returns>An enumerator to go over all the PGM programs on the controller.</returns>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Tasks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // We can stop a program by name
        myController->LoadedPrograms["program.pgm"]->Unload();
        // Or stop and unload all programs
        for each (LoadedProgram^ loadedProgram in myController->LoadedPrograms)
        {
            for each (Task^ associatedTask in loadedProgram->AssociatedTasks)
            {
                associatedTask->Program->Stop();
            }
            loadedProgram->Unload();
        }
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occured: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // We can stop a program by name
        myController.LoadedPrograms["program.pgm"].Unload();
        // Or stop and unload all programs
        foreach (LoadedProgram loadedProgram in myController.LoadedPrograms)
        {
            foreach (Task associatedTask in loadedProgram.AssociatedTasks)
            {
                associatedTask.Program.Stop();
            }
            loadedProgram.Unload();
        }
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occured: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' We can stop a program by name
        myController.LoadedPrograms.Item("program.pgm").Unload
        ' Or stop and unload all programs
        Dim loadedProgram As LoadedProgram
        For Each loadedProgram In myController.LoadedPrograms
            Dim associatedTask As Task
            For Each associatedTask In loadedProgram.AssociatedTasks
                associatedTask.Program.Stop
            Next
            loadedProgram.Unload
        Next
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occured: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Tasks.LoadedProgramCollection.Item(System.String)">
            <summary>Returns a loaded program by name.</summary>
            <param name="name">The name of the PGM program to get from the controller.</param>
            <returns>The program loaded on controller.</returns>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Tasks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // We can stop a program by name
        myController->LoadedPrograms["program.pgm"]->Unload();
        // Or stop and unload all programs
        for each (LoadedProgram^ loadedProgram in myController->LoadedPrograms)
        {
            for each (Task^ associatedTask in loadedProgram->AssociatedTasks)
            {
                associatedTask->Program->Stop();
            }
            loadedProgram->Unload();
        }
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occured: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // We can stop a program by name
        myController.LoadedPrograms["program.pgm"].Unload();
        // Or stop and unload all programs
        foreach (LoadedProgram loadedProgram in myController.LoadedPrograms)
        {
            foreach (Task associatedTask in loadedProgram.AssociatedTasks)
            {
                associatedTask.Program.Stop();
            }
            loadedProgram.Unload();
        }
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occured: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' We can stop a program by name
        myController.LoadedPrograms.Item("program.pgm").Unload
        ' Or stop and unload all programs
        Dim loadedProgram As LoadedProgram
        For Each loadedProgram In myController.LoadedPrograms
            Dim associatedTask As Task
            For Each associatedTask In loadedProgram.AssociatedTasks
                associatedTask.Program.Stop
            Next
            loadedProgram.Unload
        Next
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occured: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.Tasks.LoadedProgram">
            <summary>Represents a loaded program on the controller.</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Tasks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // We can stop a program by name
        myController->LoadedPrograms["program.pgm"]->Unload();
        // Or stop and unload all programs
        for each (LoadedProgram^ loadedProgram in myController->LoadedPrograms)
        {
            for each (Task^ associatedTask in loadedProgram->AssociatedTasks)
            {
                associatedTask->Program->Stop();
            }
            loadedProgram->Unload();
        }
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occured: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // We can stop a program by name
        myController.LoadedPrograms["program.pgm"].Unload();
        // Or stop and unload all programs
        foreach (LoadedProgram loadedProgram in myController.LoadedPrograms)
        {
            foreach (Task associatedTask in loadedProgram.AssociatedTasks)
            {
                associatedTask.Program.Stop();
            }
            loadedProgram.Unload();
        }
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occured: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' We can stop a program by name
        myController.LoadedPrograms.Item("program.pgm").Unload
        ' Or stop and unload all programs
        Dim loadedProgram As LoadedProgram
        For Each loadedProgram In myController.LoadedPrograms
            Dim associatedTask As Task
            For Each associatedTask In loadedProgram.AssociatedTasks
                associatedTask.Program.Stop
            Next
            loadedProgram.Unload
        Next
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occured: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Tasks.LoadedProgram.Associate(Aerotech.A3200.TaskId)">
            <summary>Associates the program with a task.</summary>
            <param name="taskId">The task to associate with.</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.LoadedProgram.Unload">
            <summary>Unloads the program from the controller memory.</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Tasks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // We can stop a program by name
        myController->LoadedPrograms["program.pgm"]->Unload();
        // Or stop and unload all programs
        for each (LoadedProgram^ loadedProgram in myController->LoadedPrograms)
        {
            for each (Task^ associatedTask in loadedProgram->AssociatedTasks)
            {
                associatedTask->Program->Stop();
            }
            loadedProgram->Unload();
        }
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occured: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // We can stop a program by name
        myController.LoadedPrograms["program.pgm"].Unload();
        // Or stop and unload all programs
        foreach (LoadedProgram loadedProgram in myController.LoadedPrograms)
        {
            foreach (Task associatedTask in loadedProgram.AssociatedTasks)
            {
                associatedTask.Program.Stop();
            }
            loadedProgram.Unload();
        }
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occured: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' We can stop a program by name
        myController.LoadedPrograms.Item("program.pgm").Unload
        ' Or stop and unload all programs
        Dim loadedProgram As LoadedProgram
        For Each loadedProgram In myController.LoadedPrograms
            Dim associatedTask As Task
            For Each associatedTask In loadedProgram.AssociatedTasks
                associatedTask.Program.Stop
            Next
            loadedProgram.Unload
        Next
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occured: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Tasks.LoadedProgram.Name">
            <summary>The name of the PGM program on the controller.</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.LoadedProgram.AssociatedTasks">
            <summary>The tasks the program is associated with.</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Tasks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // We can stop a program by name
        myController->LoadedPrograms["program.pgm"]->Unload();
        // Or stop and unload all programs
        for each (LoadedProgram^ loadedProgram in myController->LoadedPrograms)
        {
            for each (Task^ associatedTask in loadedProgram->AssociatedTasks)
            {
                associatedTask->Program->Stop();
            }
            loadedProgram->Unload();
        }
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occured: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // We can stop a program by name
        myController.LoadedPrograms["program.pgm"].Unload();
        // Or stop and unload all programs
        foreach (LoadedProgram loadedProgram in myController.LoadedPrograms)
        {
            foreach (Task associatedTask in loadedProgram.AssociatedTasks)
            {
                associatedTask.Program.Stop();
            }
            loadedProgram.Unload();
        }
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occured: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' We can stop a program by name
        myController.LoadedPrograms.Item("program.pgm").Unload
        ' Or stop and unload all programs
        Dim loadedProgram As LoadedProgram
        For Each loadedProgram In myController.LoadedPrograms
            Dim associatedTask As Task
            For Each associatedTask In loadedProgram.AssociatedTasks
                associatedTask.Program.Stop
            Next
            loadedProgram.Unload
        Next
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occured: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.Tasks.ProgramFilePoint">
            <summary>
            Represents a position in a source or binary program file.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.ProgramFilePoint.#ctor(System.String,System.Int32,Aerotech.A3200.Tasks.PathKind)">
            <summary>
            Creates a new instance of <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/>.
            </summary>
            <param name="path">The file path.</param>
            <param name="line">The line number.</param>
            <param name="programPathKind">The type of program file.</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.ProgramFilePoint.Clone">
            <summary>
            Clones the current object.
            </summary>
            <returns>A deep copy of the current instance of <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/>.</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.ProgramFilePoint.Equals(System.Object)">
            <summary>
            Compares the current instance of <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/> to another instance for equality.
            </summary>
            <param name="obj">The other <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/> to compare against the current instance for equality.</param>
            <returns>true if the two <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/> objects are equivalent, false if otherwise.</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.ProgramFilePoint.GetHashCode">
            <summary>
            Generates a hash code of the current instance of <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/>.
            </summary>
            <returns>The hash code of the current instance of <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/></returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.ProgramFilePoint.ToString">
            <summary>
            Returns the current instance of <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/> to a string representation.
            </summary>
            <returns>The string representation of the current instance of <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/>.</returns>
        </member>
        <member name="P:Aerotech.A3200.Tasks.ProgramFilePoint.ProgramPathKind">
            <summary>
            Returns the type of file referenced by the <b>Path</b> property.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Units.DistanceUnit">
            <summary>Specifies the distance units</summary>
            <remarks>
            	<para>The <see cref="F:Aerotech.A3200.Units.DistanceUnit.Primary"/> is the default</para>
            </remarks>
        </member>
        <member name="F:Aerotech.A3200.Units.DistanceUnit.Primary">
            <summary>The distance units are in primary units (usually SI)</summary>
        </member>
        <member name="F:Aerotech.A3200.Units.DistanceUnit.Secondary">
            <summary>The distance units are in secondary units (usually customary system of units)</summary>
        </member>
        <member name="F:Aerotech.A3200.Units.DistanceUnit.Counts">
            <summary>The distance units are in counts (applies to some axis signals only)</summary>
        </member>
        <member name="T:Aerotech.A3200.Units.UnitInformation">
            <summary>Information about the sets of units</summary>
        </member>
        <member name="M:Aerotech.A3200.Units.UnitInformation.#ctor">
            <summary>Instantiates a new default instance</summary>
        </member>
        <member name="M:Aerotech.A3200.Units.UnitInformation.#ctor(Aerotech.A3200.Units.DistanceUnit)">
            <summary>Instantiates a new instance given distance units</summary>
            <param name="distance">The distance units to use</param>
        </member>
        <member name="M:Aerotech.A3200.Units.UnitInformation.#ctor(Aerotech.A3200.Units.DistanceUnit,Aerotech.A3200.Units.TimeUnit)">
            <summary>Intantiates a new instance given distance and time units</summary>
            <param name="distance">The distance units to use</param>
            <param name="time">The time units to use</param>
        </member>
        <member name="M:Aerotech.A3200.Units.UnitInformation.#ctor(Aerotech.A3200.Tasks.TaskMode)">
            <summary>Instantiates a new instance based on condition of a task</summary>
            <param name="taskMode">The task mode from which to extract the unit information</param>
        </member>
        <member name="P:Aerotech.A3200.Units.UnitInformation.Distance">
            <summary>Specifies the distance units</summary>
            <remarks>
            	<para>See <see cref="T:Aerotech.A3200.Units.DistanceUnit"/> for the default</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Units.UnitInformation.Time">
            <summary>Specifies the time units</summary>
            <remarks>
            	<para>See <see cref="T:Aerotech.A3200.Units.TimeUnit"/> for the default</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Variables.ControllerVariableContainer">
            <summary>
            The top-level class that contains all controller variable types (such as global variables, PLC shared tags, etc.)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.ControllerVariableContainer.Item(System.String)">
            <summary>
            Retrieves a <see cref="T:Aerotech.A3200.Variables.Variable"/> instance that represents the controller variable with the specified name.
            </summary>
            <param name="name">The name of the variable</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> instance that represents the controller variable with the specified name</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.ControllerVariableContainer.VirtualIO">
            <summary>
            Provides access to the controller virtual I/O (binary and register).
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.ControllerVariableContainer.Plc">
            <summary>
            Provides access to the PLC shared tags.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.ControllerVariableContainer.Global">
            <summary>
            Provides access to the global double and string variables.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.ControllerVariableContainer.Tasks">
            <summary>
            Provides access to the task-based variables (task doubles and strings, as well as program variables).
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.ControllerVariableContainer.Fieldbus">
            <summary>
            Provides access to the fieldbus variables configured on the controller.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.TaskVariableContainer">
            <summary>
            The top-level class that contains all variables for a particular task.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.DoubleStringVariableContainer">
            <summary>Contains a collection of <see cref="T:System.Double"/> and <see cref="T:System.String"/> variables</summary>
            <remarks>
            	<para>For use, see <see cref="P:Aerotech.A3200.Controller.Variables"/></para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Variables.DoubleStringVariableContainer.Doubles">
            <summary><see cref="T:System.Double"/> variables</summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.DoubleStringVariableContainer.Strings">
            <summary><see cref="T:System.String"/> variables</summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.DoubleStringVariableContainer.Item(System.String)">
            <summary>Get a variable of the given name</summary>
            <param name="name">The name of the variable</param>
            <returns>The variable with given <paramref name="name"/></returns>
            <exception cref="T:System.ArgumentNullException">If given <paramref name="name"/> is <c>null</c></exception>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskVariableContainer.Item(System.String)">
            <summary>
            Retrieves a <see cref="T:Aerotech.A3200.Variables.Variable"/> instance that represents the task variable with the specified name.
            </summary>
            <param name="name">The name of the variable</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> instance that represents the task variable with the specified name</returns>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskVariableContainer.Info0">
            <summary>
            Provides access to $info0 for the current task.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskVariableContainer.Info1">
            <summary>
            Provides access to $info1 for the current task.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskVariableContainer.Return">
            <summary>
             Provides access to $return for the current task.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskVariableContainer.Program">
            <summary>
            Provides access to the variables defined in a currently executing program.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableContainer">
            <summary>
            Top-level container for all fieldbus variables defined on the controller.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableContainer.Item(System.String)">
            <summary>
            Retrieves a fieldbus <see cref="T:Aerotech.A3200.Variables.Variable"/> with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Aerotech.A3200.Variables.Variable"/>.</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> object representing the fieldbus variable with the specified name.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableContainer.PCModbusSlave">
            <summary>
            Contains all PC modbus slave variables defined on the controller.
            </summary>
            <remarks>
            This property will be <code>null</code> if no PC modbus slave connection has been configured on the controller.
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableContainer.PCModbusMaster">
            <summary>
            Contains all PC modbus master variables defined on the controller.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableContainer.DriveModbusMaster">
            <summary>
            Contains all drive modbus master variables defined on the controller.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableContainer.Hilscher">
            <summary>
            Contains all Hilscher fieldbus variables defined on the controller.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.Fieldbus.FieldbusConnectionVariableContainer`1">
            <summary>
            The base class of the container classes for fieldbus variables.
            </summary>
            <typeparam name="TConnInfo">The type that contains information about a specific fieldbus connection.</typeparam>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusConnectionVariableContainer`1.Name">
            <summary>
            Information describing the current connection.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.Fieldbus.HilscherConnectionVariableContainer">
            <summary>
            Contains variables specific to a Hilscher fieldbus connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Variables.Fieldbus.HilscherConnectionVariableContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through a collection.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.HilscherConnectionVariableContainer.Item(System.String)">
            <summary>
            Retrieves a <see cref="T:Aerotech.A3200.Variables.Variable"/> defined for the current fieldbus connection.
            </summary>
            <param name="name">The name of the <see cref="T:Aerotech.A3200.Variables.Variable"/>.</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> object representing the fieldbus variable with the specified name.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.HilscherConnectionVariableContainer.Inputs">
            <summary>
            The Hilscher input variables defined for the connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.HilscherConnectionVariableContainer.Outputs">
            <summary>
            The Hilscher output variables defined for the connection.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.Fieldbus.DriveModbusMasterConnectionVariableContainer">
            <summary>
            Contains variables specific to a drive modbus master fieldbus connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Variables.Fieldbus.DriveModbusMasterConnectionVariableContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through a collection.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.DriveModbusMasterConnectionVariableContainer.Item(System.String)">
            <summary>
            Retrieves a <see cref="T:Aerotech.A3200.Variables.Variable"/> defined for the current fieldbus connection.
            </summary>
            <param name="name">The name of the <see cref="T:Aerotech.A3200.Variables.Variable"/>.</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> object representing the fieldbus variable with the specified name.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.DriveModbusMasterConnectionVariableContainer.InputBits">
            <summary>
            The modbus input bit variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.DriveModbusMasterConnectionVariableContainer.InputWords">
            <summary>
            The modbus input word variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.DriveModbusMasterConnectionVariableContainer.OutputBits">
            <summary>
            The modbus output bit variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.DriveModbusMasterConnectionVariableContainer.OutputBitsStatus">
            <summary>
            The modbus output status bit variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.DriveModbusMasterConnectionVariableContainer.OutputWords">
            <summary>
            The modbus output word variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.DriveModbusMasterConnectionVariableContainer.OutputWordsStatus">
            <summary>
            The modbus output status word variables defined for this connection.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.Fieldbus.PCModbusSlaveConnectionVariableContainer">
            <summary>
            Contains variables specific to a PC modbus slave fieldbus connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Variables.Fieldbus.PCModbusSlaveConnectionVariableContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through a collection.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusSlaveConnectionVariableContainer.Item(System.String)">
            <summary>
            Retrieves a <see cref="T:Aerotech.A3200.Variables.Variable"/> defined for the current fieldbus connection.
            </summary>
            <param name="name">The name of the <see cref="T:Aerotech.A3200.Variables.Variable"/>.</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> object representing the fieldbus variable with the specified name.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusSlaveConnectionVariableContainer.InputBits">
            <summary>
            The modbus input bit variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusSlaveConnectionVariableContainer.InputWords">
            <summary>
            The modbus input word variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusSlaveConnectionVariableContainer.OutputBits">
            <summary>
            The modbus output bit variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusSlaveConnectionVariableContainer.OutputWords">
            <summary>
            The modbus output word variables defined for this connection.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.Fieldbus.PCModbusMasterConnectionVariableContainer">
            <summary>
            Contains variables specific to a PC modbus master fieldbus connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Variables.Fieldbus.PCModbusMasterConnectionVariableContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through a collection.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusMasterConnectionVariableContainer.Item(System.String)">
            <summary>
            Retrieves a <see cref="T:Aerotech.A3200.Variables.Variable"/> defined for the current fieldbus connection.
            </summary>
            <param name="name">The name of the <see cref="T:Aerotech.A3200.Variables.Variable"/>.</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> object representing the fieldbus variable with the specified name.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusMasterConnectionVariableContainer.InputBits">
            <summary>
            The modbus input bit variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusMasterConnectionVariableContainer.InputWords">
            <summary>
            The modbus input word variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusMasterConnectionVariableContainer.OutputBits">
            <summary>
            The modbus output bit variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusMasterConnectionVariableContainer.OutputBitsStatus">
            <summary>
            The modbus output status bit variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusMasterConnectionVariableContainer.OutputWords">
            <summary>
            The modbus output word variables defined for this connection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.PCModbusMasterConnectionVariableContainer.OutputWordsStatus">
            <summary>
            The modbus output status word variables defined for this connection.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableCollection">
            <summary>
            Contains fieldbus variables for a particular variable/register set for a particular fieldbus connection.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableCollection.GetEnumerator">
            <summary>
            Provides the enumerator for the current collection.
            </summary>
            <returns>An enumerator for this collection.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableCollection.Item(System.String)">
            <summary>
            Retrieves a <see cref="T:Aerotech.A3200.Variables.Variable"/> defined for the current fieldbus connection.
            </summary>
            <param name="name">The name of the <see cref="T:Aerotech.A3200.Variables.Variable"/>.</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> object representing the fieldbus variable with the specified name.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableCollection.Item(System.Int32)">
            <summary>
            Retrieves a <see cref="T:Aerotech.A3200.Variables.Variable"/> at the specified index in the current collection.
            </summary>
            <param name="index">The index of the <see cref="T:Aerotech.A3200.Variables.Variable"/> object in this collection.</param>
            <returns>A <see cref="T:Aerotech.A3200.Variables.Variable"/> object representing the fieldbus variable with the specified index.</returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableCollection.Count">
            <summary>
            The number of variables contained in this collection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.Fieldbus.FieldbusVariableCollection.Capacity">
            <summary>
            The maximum number of elements that can be stored in this collection.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.VirtualIO">
            <summary>
            Top-level class for accesssing virtual I/O (binary and register).
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.VirtualIO.Item(System.String)">
            <summary>Get virtual I/O of the given name</summary>
            <param name="name">The name of the virtual I/O</param>
            <returns>The virtual I/O with the given <paramref name="name"/></returns>
            <exception cref="T:System.ArgumentNullException">If given <paramref name="name"/> is <c>null</c></exception>
        </member>
        <member name="P:Aerotech.A3200.Variables.VirtualIO.Binary">
            <summary>
            Provides access to the virtual binary I/O on the controller.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.VirtualIO.Register">
            <summary>
            Provides access to the virtual register I/O on the controller.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.InputOutputContainer`1">
            <summary>
            Provides access to a particular type of I/O (such as virtual binary I/O, virtual register I/O, etc.)
            </summary>
            <typeparam name="TType">The data type of the I/O</typeparam>
        </member>
        <member name="P:Aerotech.A3200.Variables.InputOutputContainer`1.Item(System.String)">
            <summary>Get I/O of the given name</summary>
            <param name="name">The name of the I/O</param>
            <returns>The I/O with the given <paramref name="name"/></returns>
            <exception cref="T:System.ArgumentNullException">If given <paramref name="name"/> is <c>null</c></exception>
        </member>
        <member name="P:Aerotech.A3200.Variables.InputOutputContainer`1.Inputs">
            <summary>
            Provides access to the Input set of I/O for this collection
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.InputOutputContainer`1.Outputs">
            <summary>
            Provides access to the Output set of I/O for this collection
            </summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ErrorCode">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NoError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FileAccessDenied">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidParameterFileFormat">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CalibrationFileError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CamFileError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ParameterNotFound">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ParameterTypeInvalid">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ParameterFileNotFound">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.EndOfFileFound">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidIOArgument">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.TooManyIO">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DriveOutputCommandDelayError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FireWireConfiguration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FireWireCardConfiguration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PCICardError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AxisMismatch">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.TaskMismatch">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidCommandLine">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MachineConfiguration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ResetTimeout">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CommunicationLost">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.EthernetCommunicationLost">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ServiceCommunicationLost">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FireWireCommunicationsFailure">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.LibraryCommunicationsError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ControllerStarvation">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DriveCommandLost">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DriveCommandResponse">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FireWireIsochronousError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FireWireAsynchronousError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PCModbusError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NetworkSocketError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FiberCommunicationError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ParameterValueOutOfRange">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.GantryConfiguration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.TrajectoryFilterConfiguration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DataCollection">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DataCollectionConfiguration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.TooManyStatusItems">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ProgramError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.StringOverflow">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DivideByZero">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ProgramTimeout">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ProfileQueueError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidArgument">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ParameterNotPassed">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.QueueBufferFull">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NullProgramLine">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ProgramNumberOutOfBounds">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CannedFunctionError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ZeroSpeed">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.StackError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.SliceError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.LookaheadError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.RetraceError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.QueueNotInitialized">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MathError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ProgramControlRestricted">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.BarcodeError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ProgramQueueNotActive">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ProgramLoadingError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CallbackTimeout">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CallbackError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.LibraryCallbackError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.LibraryEventError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CallbackArgumentError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CallbackException">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.UnknownError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CannotAbortCallingTask">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ScopeTimeout">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ReturnValue">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FileError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DataCollectError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidCallbackArgument">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AxisInFault">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AxisNotEnabled">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MotionError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.GantryMotionError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CutterCompensationError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CircularMotionError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CircularRadiusError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NormalcyError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MotionTypeMismatch">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.SpindleNumberNotAssigned">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.EllipticalMotionError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MotionActive">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AxisNotDependent">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AxisNotDominant">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NoJoystickGroups">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.TransformationError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CalibrationTableError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CamTableError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MxhProgramming">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CNCFiveError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AxisFaultError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.JoystickInterlockOpen">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NoAxesSpecified">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MasterSlaveConfiguration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.SubmillisecondTimeInterval">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PTInterpolationMode">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.EnableAlignmentMove">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MoveTargetViolatesSoftwareLimit">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FiberError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.SafeZoneConfigurationError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ImmediateCommandCannotExecuteWhileProfiling">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CutterOvercutNoArcIntersection">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CannotChangeAnalogAxes">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ControllerNotReset">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.IFOVError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MoveDelayMotionRate">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AutofocusNotEnabled">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.OscillateCommandArgumentIncorrect">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MonitorError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.OnGoSubError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CannotUseTimeRamp">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidNumberOfLines">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.RunningSynchronousMotion">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.VersionMismatch">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FeatureLocked">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.UnsupportedHardware">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AllocationFailed">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NotConnected">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidAxisIndex">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ToolTableError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CamRolloverJerk">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CalRolloverJerk">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.UnexpectedFailure">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ResetInProgress">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AnalogOutputLocked">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.SignalLogError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidPassword">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ResetFailed">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AuxiliaryDeviceError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DistanceLoggingError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PiezoError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.LicensingError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FlashConfigNotSupported">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FlashConfigReadFailed">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FlashConfigWriteFailed">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.RequiredStageSerialMismatch">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CompilerError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.AntlrError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.BuildResult">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.QueueModeCompilerError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ServiceNotImplemented">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ServiceInvalidAxisIndex">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ServiceTransmissionError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ServiceCallbackError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ServiceInitializationError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ServiceInitializationExitCode">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CommunicationServiceError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.EclrInitializationExitCode">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.INtimeNode">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.SmcRunning">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FirmwareLoadError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.OutOfMemory">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.EventHandleError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidLibraryArgument">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ConsoleError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.GalvoConfiguration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.GalvoCalibration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.RegistryError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidProductID">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidOperation">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.VmeError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.WindowsError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.WinsockError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CutterRadiusTooLargeForShape">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.TooManySubIntervalMoves">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.QueueBlendFail">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.QueueEmpty">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ErrorInLookAhead">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NoFireWireCard">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NoSelfIDSeen">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.NoLinkLayer">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.MaxLookaheadMovesExceeded">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.IncompatibleParameterFileVersion">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CutterRadiusTooLargeForCurve">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ParameterSettingHasNoEffect">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DrvCommTestFailed">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CannotOpenShutdownHandler">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidOpcode">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.TaskInternalError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InvalidInternalArgument">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.SmcInternalError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.InitializationError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.GetStatusBad">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.UnlockFeaturesFailed">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ProfileError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.RestartLogicException">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.DrvCommandNotComplete">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CommandNotComplete">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ProfileQueueFull">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.CommandNotStarted">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ResourceError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.ControllerShuttingDown">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.BezierInternalError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.BezierCompilationError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PLCCommunicationError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PLCRestricted">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PLCReservedTasks">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PLCRuntimeError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PLCInitializationError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.PLCFunctionBlockError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FieldbusDriverError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FieldbusError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FieldbusProcessConnectError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FieldbusProcessCommandError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FieldbusSmcError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FieldbusVariablesError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.FieldbusMap">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.UserDefinedError">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ErrorCode.UserDefinedWarning">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Root">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.SoftwareEnvironment">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.IO">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.FileIO">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.AccessFailure">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.InvalidFormat">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Controller">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Configuration">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.ConfigCommunication">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Communication">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.LostCommunications">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Parameter">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.InvalidValue">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.DataCollection">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Program">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Callbacks">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Motion">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Task">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.AeroBasic">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.CommunicationService">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.CoreLibrary">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.FirmwareLoader">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Console">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Miscellaneous">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Galvo">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Warning">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Internal">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.PLC">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.Fieldbus">
            <exclude/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ExceptionCategory.UserDefined">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FileAccessDeniedErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.InvalidParameterFileFormatErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CalibrationFileErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CamFileErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.InvalidIOArgumentErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.DriveOutputCommandDelayErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FireWireConfigurationErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FireWireCardConfigurationErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PCICardErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.AxisMismatchErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MachineConfigurationErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.EthernetCommunicationLostErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ServiceCommunicationLostErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FireWireCommunicationsFailureErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.LibraryCommunicationsErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.DriveCommandResponseErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FireWireIsochronousErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FireWireAsynchronousErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PCModbusErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.NetworkSocketErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FiberCommunicationErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.GantryConfigurationErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.TrajectoryFilterConfigurationErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.DataCollectionErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.DataCollectionConfigurationErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ProgramErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ProgramTimeoutErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ProfileQueueErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.InvalidArgumentErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CannedFunctionErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ZeroSpeedErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.StackErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.SliceErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.LookaheadErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.RetraceErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MathErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.BarcodeErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ProgramLoadingErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CallbackErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.LibraryCallbackErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.LibraryEventErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CallbackArgumentErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CallbackExceptionErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ScopeTimeoutErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ReturnValueErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FileErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.DataCollectErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MotionErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.GantryMotionErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CutterCompensationErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CircularMotionErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CircularRadiusErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.NormalcyErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.EllipticalMotionErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MotionActiveErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.TransformationErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CalibrationTableErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CamTableErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MasterSlaveConfigurationErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MoveTargetViolatesSoftwareLimitErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FiberErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.SafeZoneConfigurationErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.IFOVErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.OscillateCommandArgumentIncorrectErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MonitorErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.OnGoSubErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.VersionMismatchErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FeatureLockedErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.UnsupportedHardwareErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.AllocationFailedErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.NotConnectedErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ToolTableErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.UnexpectedFailureErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.SignalLogErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.AuxiliaryDeviceErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.DistanceLoggingErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PiezoErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.LicensingErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FlashConfigReadFailedErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FlashConfigWriteFailedErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CompilerErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.AntlrErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ServiceTransmissionErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ServiceCallbackErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ServiceInitializationErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CommunicationServiceErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.INtimeNodeErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FirmwareLoadErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.EventHandleErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.InvalidLibraryArgumentErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ConsoleErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.GalvoConfigurationErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.GalvoCalibrationErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.RegistryErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.VmeErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.IncompatibleParameterFileVersionErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.TaskInternalErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.InvalidInternalArgumentErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.SmcInternalErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.InitializationErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ProfileErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ResourceErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PLCCommunicationErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PLCRestrictedErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PLCReservedTasksErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PLCRuntimeErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PLCInitializationErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PLCFunctionBlockErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FieldbusErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FieldbusVariablesErrorErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.FieldbusMapErrorLocation">
            <exclude/>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.Criticality">
            <summary>
			The criticality of an exception
		</summary><remarks>
			<para>
				This can be used to determine the gravity of an exception.
			</para>
		</remarks>
        </member>
        <member name="F:Aerotech.A3200.Exceptions.Criticality.Error">
            <summary>
			The exception was caused by an error, the process failed
		</summary>
        </member>
        <member name="F:Aerotech.A3200.Exceptions.Criticality.FatalError">
            <summary>
			Error grave enough that the system cannot carry on operations
		</summary><remarks>
			<para>
				An error of this sort usually means that the installation is corrupted, or
				the process is corrupted beyond repair.  The application should be restarted
				or if the problem persists, reinstalled.
			</para>
		</remarks>
        </member>
        <member name="F:Aerotech.A3200.Exceptions.Criticality.Warning">
            <summary>
			The exception was caused by a warning, the process succeeded but not fully
		</summary>
        </member>
        <member name="P:Aerotech.A3200.Exceptions.ExceptionResolver.RootCategoryStorage.ErrorCodeSpecific">
            <summary>Contains mapping for specific error codes.</summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.A3200Exception">
            <summary>
            Represents software library errors
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Exceptions.A3200Exception.Parse(System.Int32,System.Int32)">
            <summary>Parses raw error information into an exception</summary>
            <param name="errorCode">The error code</param>
            <param name="errorLocation">The error location</param>
            <returns>The <see cref="T:Aerotech.A3200.Exceptions.A3200Exception"/> that corresponds to given arguments or <c>null</c> if no error</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="errorCode"/> is not valid.</exception>
        </member>
        <member name="M:Aerotech.A3200.Exceptions.A3200Exception.Parse(Aerotech.A3200.Controller,System.Int32,System.Int32)">
            <summary>Parses raw error information into an exception</summary>
            <param name="controller">The controller to use for the exception</param>
            <param name="errorCode">The error code</param>
            <param name="errorLocation">The error location</param>
            <returns>The <see cref="T:Aerotech.A3200.Exceptions.A3200Exception"/> that corresponds to given arguments or <c>null</c> if no error</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="errorCode"/> is not valid.</exception>
        </member>
        <member name="P:Aerotech.A3200.Exceptions.A3200Exception.Criticality">
            <summary>
            Specifies how severe the exception is
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Exceptions.A3200Exception.HelpKey">
            <summary>
            Specifies the key to look for in the help file for more detailed description
            </summary>
            <remarks>
            	<para>
            		This property provides a key to look for in the index page of the help file
            		for a more detailed description of the error, and possibly solutions.
            	</para>
            	<note>
            		The value of this key for a given error can change from version to version, and should
            		<strong>not</strong> be used to uniquely identify an error.
            	</note>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.SoftwareEnvironmentException">
            <summary>
            Represents errors that occur due to an invalid Software environment
            </summary>
            <remarks>
            	<para>
            		This does not only happen when accessing the <see cref="T:Aerotech.A3200.SoftwareEnvironment"/> class, but can
            		happen in other situations when the software is run in an invalid software environment.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.IOException">
            <summary>
            Represents errors that occur during I/O operations
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.FileIOException">
            <summary>
            Represents errors that occur during file I/O operations
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.FileAccessFailureException">
            <summary>
            Represents errors that occur due to file access failure errors
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.InvalidFileFormatException">
            <summary>
            Represents errors that occur due to invalid file format
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Exceptions.InvalidFileFormatException.Upgradable">
            <summary>Whether the file is upgradable using current software</summary>
            <remarks>
            	<para>The upgrade might have to be done using Aerotech applications.</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.ControllerException">
            <summary>
            Represents errors that occur when operating on a specific controller
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Exceptions.ControllerException.Controller">
            <summary>
            The controller that generated the exception
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.CommunicationException">
            <summary>
            Represents errors that occur due to communication errors
            </summary>
            <remarks>
            	<para>
            		This exception happens when there are problems communicating to a controller.
            	</para>
            	<para>
            		If this exception is thrown, the <see cref="T:Aerotech.A3200.Controller"/> is disconnected.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.LostCommunicationException">
            <summary>
            Represents errors that occur due to loss of communication
            </summary>
            <remarks>
            	<para>
            		If this error occurs, the <see cref="T:Aerotech.A3200.Controller"/> object becomes disconnected.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.ParameterException">
            <summary>
            Represents errors that occur due to operations on parameters
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.InvalidParameterValueException">
            <summary>
            Represents errors that occur due to parameter values being invalid
            </summary>
            <remarks>
            	<para>
            		For example, this can happen if the value is set outside of the range of acceptable values for the parameter.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.TaskException">
            <summary>
            Represents errors that occur due to operations on a task
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.DataCollectionException">
            <summary>
            Represents errors that occur during operations of data collection
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.CallbacksException">
            <summary>
            Represents errors that occur due to callbacks on a controller
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.AeroBasicException">
            <summary>
            Represents errors that occur due to operations with AeroBasic
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.ProgramException">
            <summary>
            Represents errors that are related to program execution
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.QueueBufferFullException">
            <summary>
            Represents the error when the queue buffer is full.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.MotionException">
            <summary>
            Represents errors that are due to motion on an axis (or axes)
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.CommunicationServiceException">
            <summary>
            Represents errors that are due to the Communication Service
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.CoreLibraryException">
            <summary>
            Represents errors that are generated from the System library
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.FirmwareLoaderException">
            <summary>
            Represents errors due to the firmware load/commit process
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.UserDefinedException">
            <summary>Represents a user defined error</summary>
        </member>
        <member name="P:Aerotech.A3200.Exceptions.UserDefinedException.LocationCode">
            <summary>The custom location code given for this error</summary>
        </member>
        <member name="T:Aerotech.A3200.Exceptions.FieldbusException">
            <summary>
            Represents errors that are related to Fieldbus
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Global.GetEnumNamesValues``1(System.Type)">
            <summary>
            Gets the names->values of an enum
            </summary>
            <typeparam name="TRet">The return type (usually int)</typeparam>
            <param name="enum">The enumeration type</param>
            <returns>Names->values</returns>
        </member>
        <member name="M:Aerotech.A3200.Global.GetEnumActiveBits``1(System.Type,``0)">
            <summary>Gets the name of the active bits of a flags enum</summary>
            <typeparam name="TValue">The underlying type of the flag enum</typeparam>
            <param name="enum">The enum type</param>
            <param name="value">The current value</param>
            <returns>The list of active bits</returns>
        </member>
        <member name="T:Aerotech.A3200.Information.ControllerInformation">
            <summary>Provides information about the controller</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.ControllerInformation.Name">
            <summary>"A3200"</summary>
            <remarks>
            	<para>This property is for compatibility with other libraries</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Information.ControllerInformation.Axes">
            <summary>Provides information about axes</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.ControllerInformation.AllDrives">
            <summary>
            Provides information about all the connected drives
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Information.ControllerInformation.MotionDrives">
            <summary>
            Provides information about connected drives that can do motion
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Information.ControllerInformation.Version">
            <summary>The version information of the controller</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.ControllerInformation.Initialization">
            <summary>Provides information about initialization</summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.ControllerResettingPre">
            <summary>Raised right before <see cref="E:Aerotech.A3200.Information.ControllerInformation.ControllerResetting"/></summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.ControllerResetting">
            <summary>Event that is raised when the controller is about to be reset</summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.ControllerResettingPost">
            <summary>Raised right after <see cref="E:Aerotech.A3200.Information.ControllerInformation.ControllerResetting"/></summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.ControllerResetPre">
            <summary>Raised right before <see cref="E:Aerotech.A3200.Information.ControllerInformation.ControllerReset"/></summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.ControllerReset">
            <summary>Event that is raised when the controller is finished being reset</summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.ControllerResetPost">
            <summary>Raised right after <see cref="E:Aerotech.A3200.Information.ControllerInformation.ControllerReset"/></summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.PlcResetting">
            <summary>Event that is raised when the PLC portion of the controller is about to be reset</summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.PlcReset">
            <summary>Event that is raised when the PLC portion of the controller is finished being reset</summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.SmcResetting">
            <summary>Event that is raised when the motion control portion of the controller is about to be reset</summary>
        </member>
        <member name="E:Aerotech.A3200.Information.ControllerInformation.SmcReset">
            <summary>Event that is raised when the motion control portion of the controller is finished being reset</summary>
        </member>
        <member name="T:Aerotech.A3200.Information.ControllerVersion">
            <summary>The version information about the controller</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.ControllerVersion.SMCVersion">
            <summary>The version of the SMC</summary>
        </member>
        <member name="T:Aerotech.A3200.Information.InitializationInformation">
            <summary>Provides information about initialization</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.InitializationInformation.Error">
            <summary>Any errors that happened during initialization</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.InitializationInformation.Warning">
            <summary>Any warnings that happened during initialization</summary>
        </member>
        <member name="T:Aerotech.A3200.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ArgumentArraysMustBeSameSize">
            <summary>
              Looks up a localized string similar to All argument arrays must be the same length.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ArgumentGreaterThanPointsAllocated">
            <summary>
              Looks up a localized string similar to {0} is greater than number of points allocated.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ArgumentMustBePositive">
            <summary>
              Looks up a localized string similar to {0} must be greater than 0.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ArgumentMustBeUnique">
            <summary>
              Looks up a localized string similar to {0} given has to be unique.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ArgumentOutOfBounds">
            <summary>
              Looks up a localized string similar to {0} argument has to be between {1} and {2}.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ArraySizeMustMatchNumberOfAxes">
            <summary>
              Looks up a localized string similar to The parameter has to have the same size as the number of axes being operated on.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.AtLeastOneAxisMustBeSelected">
            <summary>
              Looks up a localized string similar to At least one axis must be selected.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.AxesLimitedToController">
            <summary>
              Looks up a localized string similar to Only axes present on controller can be specified.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.CannotWaitForRepeatingPlayback">
            <summary>
              Looks up a localized string similar to Cannot wait for the completion of a repeating playback session..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ConfigurationNotComplete">
            <summary>
              Looks up a localized string similar to Configuration not complete.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ControllerNotConnectedException">
            <summary>
              Looks up a localized string similar to The controller is not connected..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.DataRecordingSessionNotStarted">
            <summary>
              Looks up a localized string similar to A data recording session has not been started.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.DriveModbusMasterAxisNumberAlreadyExists">
            <summary>
              Looks up a localized string similar to A drive modbus master connection with axis number {0} already exists..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorCannotConvert">
            <summary>
              Looks up a localized string similar to Cannot convert {0} to {1} or {2}.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorInvalidAxisName">
            <summary>
              Looks up a localized string similar to The value for {0} is invalid; use only alphanumeric characters or underscores. The first two characters cannot be numbers..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorInvalidUpgradableXMLFormat">
            <summary>
              Looks up a localized string similar to File is in an old format that must be upgraded..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorInvalidXMLFormat">
            <summary>
              Looks up a localized string similar to Invalid XML file format.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorNotAbsolutePath">
            <summary>
              Looks up a localized string similar to The path &quot;{0}&quot; is not an absolute path..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorProductXMLMismatch">
            <summary>
              Looks up a localized string similar to Cannot use {0} parameter files for {1} controllers.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorProgramNotAssociated">
            <summary>
              Looks up a localized string similar to No program is currently associated with task {0}..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorProgramNotLoaded">
            <summary>
              Looks up a localized string similar to A program with the name &quot;{0}&quot; is not currently loaded on the SMC..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorSourceFileNotAvailable">
            <summary>
              Looks up a localized string similar to The source code file for the associated program is not available..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorText">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ErrorVariableNameNotFound">
            <summary>
              Looks up a localized string similar to The variable name &quot;{0}&quot; is not declared..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ExactlyOneAxisMustBeSelected">
            <summary>
              Looks up a localized string similar to The parameter must have one axis selected.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.FieldbusMappingNameInvalid">
            <summary>
              Looks up a localized string similar to The specified fieldbus mapping name &quot;{0}&quot; is not valid or is already in use..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.FirmwareFileNotFoundException">
            <summary>
              Looks up a localized string similar to The given firmware file path does not exist..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.FirmwareLoadAlreadyCalledException">
            <summary>
              Looks up a localized string similar to The drives to load and commit firmware have already been selected in a previous call to Load. To specify a new set of drives to load and commit firmware, create another instance of FirmwareLoader..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.FirmwareNotLoadedException">
            <summary>
              Looks up a localized string similar to The firmware has not yet been loaded on the drives. Call the Load method before calling this method..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.HilscherIdAlreadyExists">
            <summary>
              Looks up a localized string similar to A Hilscher connection with ID {0} already exists..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.InvalidCallbackReturnTypeException">
            <summary>
              Looks up a localized string similar to Invalid callback return value type of {0} given (acceptable types are double, string, and null).
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.InvalidErrorInformation">
            <summary>
              Looks up a localized string similar to The given error information is not valid..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.InvalidParameterInformation_ContextContextKey">
            <summary>
              Looks up a localized string similar to context of {0}, contextKey of {1}.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.InvalidVariableName">
            <summary>
              Looks up a localized string similar to The variable name &quot;{0}&quot; is not a valid AeroBasic variable name..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.IPv6NotSupported">
            <summary>
              Looks up a localized string similar to IPv6 IP addresses are not supported..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.KeyPropertyOfItemCannotBeNull">
            <summary>
              Looks up a localized string similar to The Key property of item argument must be non-null..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.MappingMaximumAddressTooHigh">
            <summary>
              Looks up a localized string similar to The maximum address of the mapping exceeds the maximum address for the protocol..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.MappingNotByteAligned">
            <summary>
              Looks up a localized string similar to This mapping is not byte-aligned..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.MappingTooBig">
            <summary>
              Looks up a localized string similar to The mapping size ({0} bytes) exceeds the maximum size of {1} bytes..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.NodeHasAlreadyBeenAdded">
            <summary>
              Looks up a localized string similar to The value node has already been added..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ParameterCategoryName_UserDefined">
            <summary>
              Looks up a localized string similar to UserDefined.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.PlaybackUpdateCountMismatch">
            <summary>
              Looks up a localized string similar to The specified number of updates does not match the number of updates provided for the other signals in this configuration..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.RequiredAttributeMissing">
            <summary>
              Looks up a localized string similar to A required attribute ({0}) is not present..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.structsInfo">
            <summary>
              Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;data&gt;&lt;enum dotnet=&quot;TaskState&quot; namespace=&quot;Aerotech.A3200.Tasks&quot;&gt;&lt;names&gt;
            				&lt;id&gt;taskstate&lt;/id&gt;
            				&lt;short&gt;TaskState&lt;/short&gt;
            				&lt;full&gt;Task State&lt;/full&gt;
            				&lt;display culture=&quot;en&quot;&gt;Task State&lt;/display&gt;
            				
            				
            				
            				
            			&lt;/names&gt;&lt;value value=&quot;0&quot;&gt;&lt;names&gt;
            						&lt;short&gt;Unavailable&lt;/short&gt;
            						&lt;full&gt;Unavailable&lt;/full&gt;
            						&lt;display culture=&quot;en&quot;&gt;Unavailable&lt;/display&gt;
            						
            						
            						
            						
            					&lt;/names&gt;&lt;/value&gt;&lt;value value=&quot;1&quot;&gt;&lt;name [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.UnexpectedNuberOfVariableNames">
            <summary>
              Looks up a localized string similar to Unexpected number of variable names retrieved. Expected: {0}  Actual: {1}.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.UnknownAxisName">
            <summary>
              Looks up a localized string similar to Unknown axis name {0}.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.UnknownPlatform">
            <summary>
              Looks up a localized string similar to Unknown IntPtr size ({0} bytes), cannot determine correct P/Invoke to call.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.UnknownValueOfEnumeration">
            <summary>
              Looks up a localized string similar to Unkown {0} value {1}.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.UnsupportedEnumeration">
            <summary>
              Looks up a localized string similar to The given enumeration is not supported..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ValueNameMustMatchKey">
            <summary>
              Looks up a localized string similar to The key must match the Name of the value XmlNode..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.ValuePropertyOfItemCannotBeNull">
            <summary>
              Looks up a localized string similar to The Value property of item argument must be non-null..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.VariableIndexOutOfRange">
            <summary>
              Looks up a localized string similar to The specified variable index {0} is out of range..
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Properties.Resources.WrongFirmwareFileExtensionException">
            <summary>
              Looks up a localized string similar to The given firmware file does not have the correct file extension..
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Controller">
            <summary>Represents a controller</summary>
            <summary>Allows configuring and connecting to a controller</summary>
        </member>
        <member name="M:Aerotech.A3200.Controller.Finalize">
            <summary>Destruts the current class</summary>
        </member>
        <member name="M:Aerotech.A3200.Controller.Reset">
            <summary>Resets the controller using new configuration</summary>
        </member>
        <member name="M:Aerotech.A3200.Controller.Reset(System.Boolean,System.Boolean)">
            <summary>Resets the controller using new configuration</summary>
            <param name="resetSmc">Whether to reset the SMC</param>
            <param name="resetPlc">Whether to reset the PLC</param>
            <remarks>
            	<para>Generally <see cref="M:Aerotech.A3200.Controller.Reset"/> should be used.</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Controller.Dispose">
            <summary>Releases any resources used by this class</summary>
        </member>
        <member name="M:Aerotech.A3200.Controller.ChangePassword(System.String,System.String)">
            <summary>
            Changes the password on all drives connected to the controller
            </summary>
            <param name="oldPassword">The old password</param>
            <param name="newPassword">The new password</param>
            <remarks>
            <para>
            	The password is used with the <c>CHECKPASSWORD</c> command.
            </para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Controller.Dispose(System.Boolean)">
            <summary>Releases any resources used by this class</summary>
            <param name="disposing">Whether we are being called from <see cref="M:Aerotech.A3200.Controller.Dispose"/></param>
        </member>
        <member name="M:Aerotech.A3200.Controller.Connect">
            <summary>Connects to a controller, initializes if necessary</summary>
            <returns>The newly connected controller</returns>
            <remarks>
            	<para>
            		If the SMC is not running when this is called, it will be initialized automatically.
            		Initialization involves sending parameters, calibration files, program automation,
            		and other things.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Controller.Disconnect">
            <summary>Disconnects from the controller</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.Aerotech#Common#INamed{System#String}#Name">
            <summary>The name of the controller, always 'A3200'</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.DataCollection">
            <summary>Provides access to data collection and status</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Controller.Information">
            <summary>Provides information about the components of the controller</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.Parameters">
            <summary>Allows access to active parameters on controller</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.Tasks">
            <summary>Allows access to tasks and running programs</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.ControlCenter">
            <summary>Provides access to polling of data</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.Commands">
            <summary>Allows access to execute AeroBasic commands</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.Variables">
            <summary>
            Provides access to the various variable types on the controller (such as global variables, PLC shared tags, etc.)
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Set the value of $global[0] to PI
    myController->Variables->Global->Doubles[0]->Value = 3.14159265358979;
    // Read back the value that was set in $global[0]
    Console::WriteLine("Value of $global[0] : {0}", myController->Variables->Global->Doubles[0]->Value);
    // One can also access variables by name
    Console::WriteLine("Value of $global[0] : {0}", myController->Variables->Global["$global[0]"]->Value);
    // Print out the value of $task[0] for Task 1
    Console::WriteLine("Value of $task[0] on task 1 : {0}", myController->Variables->Tasks[1]["$task[0]"]->Value);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Set the value of $global[0] to PI
    myController.Variables.Global.Doubles[0].Value = 3.1415926535897931;
    // Read back the value that was set in $global[0]
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global.Doubles[0].Value);
    // One can also access variables by name
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global["$global[0]"].Value);
    // Print out the value of $task[0] for Task 1
    Console.WriteLine("Value of $task[0] on task 1 : {0}", myController.Variables.Tasks[1]["$task[0]"].Value);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Set the value of $global[0] to PI
    myController.Variables.Global.Doubles.Item(0).Value = 3.1415926535897931
    ' Read back the value that was set in $global[0]
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global.Doubles.Item(0).Value)
    ' One can also access variables by name
    Console.WriteLine("Value of $global[0] : {0}", myController.Variables.Global.Item("$global[0]").Value)
    ' Print out the value of $task[0] for Task 1
    Console.WriteLine("Value of $task[0] on task 1 : {0}", myController.Variables.Tasks.Item(1).Item("$task[0]").Value)

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Controller.LoadedPrograms">
            <summary>Exposes programs that are in memory on the controller.</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Tasks</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // We can stop a program by name
        myController->LoadedPrograms["program.pgm"]->Unload();
        // Or stop and unload all programs
        for each (LoadedProgram^ loadedProgram in myController->LoadedPrograms)
        {
            for each (Task^ associatedTask in loadedProgram->AssociatedTasks)
            {
                associatedTask->Program->Stop();
            }
            loadedProgram->Unload();
        }
        // Disconnect from the network of controllers.
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occured: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // We can stop a program by name
        myController.LoadedPrograms["program.pgm"].Unload();
        // Or stop and unload all programs
        foreach (LoadedProgram loadedProgram in myController.LoadedPrograms)
        {
            foreach (Task associatedTask in loadedProgram.AssociatedTasks)
            {
                associatedTask.Program.Stop();
            }
            loadedProgram.Unload();
        }
        // Disconnect from the network of controllers.
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occured: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' We can stop a program by name
        myController.LoadedPrograms.Item("program.pgm").Unload
        ' Or stop and unload all programs
        Dim loadedProgram As LoadedProgram
        For Each loadedProgram In myController.LoadedPrograms
            Dim associatedTask As Task
            For Each associatedTask In loadedProgram.AssociatedTasks
                associatedTask.Program.Stop
            Next
            loadedProgram.Unload
        Next
        ' Disconnect from the network of controllers.
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occured: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Controller.Number">
            <summary>This is for compatibility with standalones</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.ConnectedController">
            <summary>Provides access to the currently connected controller object</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.Configuration">
            <summary>Contains the configuration for the whole system</summary>
        </member>
        <member name="P:Aerotech.A3200.Controller.IsRunning">
            <summary>Specifies whether the controller is currently running</summary>
            <remarks>
            	<para>This is useful before calling <see cref="M:Aerotech.A3200.Controller.Connect"/> to find out if initialization will be required.</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.Data">
            <summary>Provides access to the data collection and diagnostics</summary>
            <remarks>
            	<para>For status see <see cref="M:Aerotech.A3200.DataCollection.Data.RetrieveDiagnostics"/>.</para>
            	<para>
            		There are two ways of getting information on the state of the controller:
            	</para>
            	<list type="bullet">
            		<item>
            			<term>Diagnostics</term>
            			<description>
            				<para>
            					The diagnostics method is simpler, but not deterministic.  To retrieve diagnostic information call 
            					the <see cref="M:Aerotech.A3200.DataCollection.Data.RetrieveDiagnostics"/> method. The method will return a snapshot of information 
            					about the controller at the time you called the method.  You can then call this 
            					method again to retrieve information at a different point in time.  The time between the different 
            					sets of diagnostic information is not fixed, as it depends entirely on when you make the calls to 
            					<see cref="M:Aerotech.A3200.DataCollection.Data.RetrieveDiagnostics"/>.
            				</para>
            				<para>
            					Diagnostic retrievel can be done automatically in a background thread by using the
            					<see cref="T:Aerotech.A3200.Status.ControlCenter"/>.  A custom diagnostic packet can be done by using the
            					<see cref="T:Aerotech.A3200.Status.Custom.CustomDiagnostics"/>.
            				</para>
            			</description>
            		</item>
            		<item>
            			<term>Data collection</term>
            			<description>
            				<para>
            					This method is more involved, but it is deterministic.  First you need to configure the data collection. 
            					Use the <see cref="P:Aerotech.A3200.DataCollection.Data.Configuration"/> property to select what you want to collect, the collection rate, 
            					and the number of points.  Start data collection by calling <see cref="M:Aerotech.A3200.DataCollection.Data.Start"/>.  This will tell the
            					controller to start collecting data at the specified rate.  You will then need to wait for a specific 
            					set of points to be collected by looking at the <see cref="P:Aerotech.A3200.DataCollection.Data.Status"/> property.  Call <see cref="M:Aerotech.A3200.DataCollection.Data.GetData"/>
            					to retrieve the collected data.  Note that <see cref="M:Aerotech.A3200.DataCollection.Data.GetData"/> will wait for the data collection
            					to be done if you call it too early.
            				</para>
            			</description>
            		</item>
            	</list>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.RetrieveDiagnostics">
            <summary>Retrieves the diagnostic information</summary>
            <returns>The current diagnostic information</returns>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController->DataCollection->RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information for Axis 0");
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0]->AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0]->AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0]->AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0]->AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[0]->AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[0]->AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[0]->AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[0]->CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[0]->CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[0]->CurrentFeedback);
        Console::WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0]->DigitalInputs);
        Console::WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0]->DigitalOutputs);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[0]->PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[0]->PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[0]->PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[0]->PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[0]->ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[0]->ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0]->ProgramPositionFeedback);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0");
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[0].CurrentFeedback);
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0].DigitalInputs);
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0].DigitalOutputs);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0].ProgramPositionFeedback);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0")
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(0).CurrentFeedback)
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket.Item(0).DigitalInputs)
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket.Item(0).DigitalOutputs)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(0).ProgramPositionFeedback)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.RetrieveDiagnostics(Aerotech.A3200.Units.UnitInformation)">
            <summary>Retrieves the diagnostic information</summary>
            <param name="units">The units to get the data items in</param>
            <returns>The current diagnostic information</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="units"/> is null</exception>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.ApplyConfiguration">
            <summary>Applies the provided <see cref="P:Aerotech.A3200.DataCollection.Data.Configuration"/> to the SMC.</summary>
            <remarks>
            	<para>
            		This is useful when one wants to configure the data collection from the PC,
            		but start it from a real time program.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.ApplyConfiguration(Aerotech.A3200.DataCollection.DataCollectionConfiguration)">
            <summary>Applies the <param name="configuration"/> to the SMC.</summary>
            <remarks>
            	<para>
            		This is useful when one wants to configure the data collection from the PC,
            		but start it from a real time program.
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="configuration"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.GetData">
            <summary>Waits for data to be available and retrieves all configured data</summary>
            <returns>The configured data</returns>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
             <remarks>
            	<para>
            		This call blocks until all configured points have been collected,
            		then retrieves all the points.
            	</para>
            	<para>
            		The data can be converted to a different set of units, see 
            		<see cref="M:Aerotech.A3200.DataCollection.DataCollectionResults.ConvertUnits(Aerotech.A3200.Units.UnitInformation)"/> for more details.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.GetData(System.ComponentModel.ProgressChangedEventHandler)">
            <summary>Waits for data to be available and then retrieves all configured data</summary>
            <returns>The configured data</returns>
            <param name="progressChangedEventHandler">The delegate to call to provide progress</param>
            <remarks>
            	<para>
            		The progress provided by the <paramref name="progressChangedEventHandler"/>, the progress is provided
            		for retrieval of the data, <strong>not</strong> for collection of data.
            	</para>
            	<para>
            		This call blocks until all configured points have been collected,
            		then retrieves all the points.
            	</para>
            	<para>
            		The data can be converted to a different set of units, see 
            		<see cref="M:Aerotech.A3200.DataCollection.DataCollectionResults.ConvertUnits(Aerotech.A3200.Units.UnitInformation)"/> for more details.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.GetData(System.Int32)">
            <summary>Waits for data to be available and then retrieves all configured data</summary>
            <param name="pointsToRetrieve">The number of points to retrieve</param>
            <returns>The data collected</returns>
            <remarks>
                <para>
            		This call blocks until the number of specified points have been collected,
            		then retrieves all the points.
                </para>
                <para>
            		The data can be converted to a different set of units, see 
            		<see cref="M:Aerotech.A3200.DataCollection.DataCollectionResults.ConvertUnits(Aerotech.A3200.Units.UnitInformation)"/> for more details.
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="pointsToRetrieve"/> is not valid</exception>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.GetData(System.Int32,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>Waits for data to be available and then retrieves all configured data while providing progress of retrieval</summary>
            <param name="pointsToRetrieve">The number of points to retrieve</param>
            <param name="progressChangedEventHandler">The delegate to call to provide progress</param>
            <returns>The collection results</returns>
            <remarks>
            	<para>
            		The progress provided by the <paramref name="progressChangedEventHandler"/>, the progress is provided
            		for retrieval of the data, <strong>not</strong> for collection of data.
            	</para>
            	<para>
            		This call blocks until the number of specified points have been collected,
            		then retrieves all the points.
                </para>
                <para>
            		The data can be converted to a different set of units, see 
            		<see cref="M:Aerotech.A3200.DataCollection.DataCollectionResults.ConvertUnits(Aerotech.A3200.Units.UnitInformation)"/> for more details.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.Start">
            <summary>Starts collecting one set of data</summary>
            <remarks>
            	<para>
            		This is going to use the current <see cref="P:Aerotech.A3200.DataCollection.Data.Configuration"/>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.Start(Aerotech.A3200.DataCollection.DataCollectionConfiguration)">
            <summary>Starts collecting one set of data</summary>
            <param name="configuration">The configuration to use</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="configuration"/> is <c>null</c></exception>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.StartContinuous(System.Int32)">
            <summary>Starts continuous data collection</summary>
            <param name="numberOfPoints">The size of the chunks to retrieve</param>
            <remarks>
            	<para>
            		After an amount equal to <paramref name="numberOfPoints"/> has been retrieved,
            		the <see cref="E:Aerotech.A3200.DataCollection.Data.ContinuousDataSamplesRetrieved"/> event will be raised.
            	</para>
            	<para>
            		The data will be collected in a circular buffer.
            	</para>
            	<para>
            		Note that the <see cref="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.PointsToCollect"/>
            		should be larger than <paramref name="numberOfPoints"/> to not cause overflow.
            	</para>
            	<para>
            		If the event is not desired and you would rather retrieve the data yourself,
            		set <paramref name="numberOfPoints"/> to 0.
            	</para>
            </remarks>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.DataCollection</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class ContinuousDataCollection abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
        config->Axis->Add(AxisDataSignal::PositionCommand, 0);
        config->Axis->Add(AxisDataSignal::PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController->DataCollection->Configuration->SampleTrigger->Time = gcnew SampleTriggerTimeConfiguration(2.0, TimeUnit::Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController->DataCollection->ContinuousDataSamplesRetrieved += gcnew EventHandler<ContinuousDataSamplesRetrievedEventArgs^>(NewDataSamplesArrived);
        myController->DataCollection->StartContinuous(500);
        // Collect data until the user presses a key
        Console::ReadKey();
        // Stop continuous data collection
        myController->DataCollection->Stop();
    }
    private:
    static void NewDataSamplesArrived(Object^ sender, ContinuousDataSamplesRetrievedEventArgs^ e)
    {
        DataCollectionResults^ results = e->Results;
        // Print out the 0th point collected for position command and feedback
        Console::WriteLine(" Position Command: {0}", results->Axis[AxisDataSignal::PositionCommand, 0]);
        Console::WriteLine(" Position Feedback: {0}", results->Axis[AxisDataSignal::PositionFeedback, 0]);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class ContinuousDataCollection
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration config = myController.DataCollection.Configuration;
        config.Axis.Add(AxisDataSignal.PositionCommand, 0);
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController.DataCollection.ContinuousDataSamplesRetrieved += new EventHandler<ContinuousDataSamplesRetrievedEventArgs>(ContinuousDataCollection.NewDataSamplesArrived);
        myController.DataCollection.StartContinuous(500);
        // Collect data until the user presses a key
        Console.ReadKey();
        // Stop continuous data collection
        myController.DataCollection.Stop();
    }

    private static void NewDataSamplesArrived(object sender, ContinuousDataSamplesRetrievedEventArgs e)
    {
        DataCollectionResults results = e.Results;
        // Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis[AxisDataSignal.PositionCommand, 0]);
        Console.WriteLine(" Position Feedback: {0}", results.Axis[AxisDataSignal.PositionFeedback, 0]);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class ContinuousDataCollection
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Add position command and position feedback on axis 0 as signals to collect.
        Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
        config.Axis.Add(AxisDataSignal.PositionCommand, 0)
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0)
        ' Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds)
        ' After 500 points have been collected, raise an event so we receive the points
        AddHandler myController.DataCollection.ContinuousDataSamplesRetrieved, New EventHandler(Of ContinuousDataSamplesRetrievedEventArgs)(AddressOf ContinuousDataCollection.NewDataSamplesArrived)
        myController.DataCollection.StartContinuous(500)
        ' Collect data until the user presses a key
        Console.ReadKey
        ' Stop continuous data collection
        myController.DataCollection.Stop
    End Sub

    Private Shared Sub NewDataSamplesArrived(ByVal sender As Object, ByVal e As ContinuousDataSamplesRetrievedEventArgs)
        Dim results As DataCollectionResults = e.Results
        ' Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, 0))
        Console.WriteLine(" Position Feedback: {0}", results.Axis.Item(AxisDataSignal.PositionFeedback, 0))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.StartContinuous(Aerotech.A3200.DataCollection.DataCollectionConfiguration,System.Int32)">
            <summary>Starts continuous data collection</summary>
            <param name="configuration">The configuration to use</param>
            <param name="numberOfPoints">The size of the chunks to retrieve (0 to not retrieve automatically)</param>
            <remarks>
            	<para>
            		After an amount equal to <paramref name="numberOfPoints"/> has been retrieved,
            		the <see cref="E:Aerotech.A3200.DataCollection.Data.ContinuousDataSamplesRetrieved"/> event will be raised.
            	</para>
            	<para>
            		The data will be collected in a circular buffer.
            	</para>
            	<para>
            		Note that the <see cref="P:Aerotech.A3200.DataCollection.DataCollectionConfiguration.PointsToCollect"/>
            		should be larger than <paramref name="numberOfPoints"/> to not cause overflow.
            	</para>
            	<para>
            		If the event is not desired and you would rather retrieve the data yourself,
            		set <paramref name="numberOfPoints"/> to 0.
            	</para>
            </remarks>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.DataCollection</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class ContinuousDataCollection abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
        config->Axis->Add(AxisDataSignal::PositionCommand, 0);
        config->Axis->Add(AxisDataSignal::PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController->DataCollection->Configuration->SampleTrigger->Time = gcnew SampleTriggerTimeConfiguration(2.0, TimeUnit::Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController->DataCollection->ContinuousDataSamplesRetrieved += gcnew EventHandler<ContinuousDataSamplesRetrievedEventArgs^>(NewDataSamplesArrived);
        myController->DataCollection->StartContinuous(500);
        // Collect data until the user presses a key
        Console::ReadKey();
        // Stop continuous data collection
        myController->DataCollection->Stop();
    }
    private:
    static void NewDataSamplesArrived(Object^ sender, ContinuousDataSamplesRetrievedEventArgs^ e)
    {
        DataCollectionResults^ results = e->Results;
        // Print out the 0th point collected for position command and feedback
        Console::WriteLine(" Position Command: {0}", results->Axis[AxisDataSignal::PositionCommand, 0]);
        Console::WriteLine(" Position Feedback: {0}", results->Axis[AxisDataSignal::PositionFeedback, 0]);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class ContinuousDataCollection
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration config = myController.DataCollection.Configuration;
        config.Axis.Add(AxisDataSignal.PositionCommand, 0);
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController.DataCollection.ContinuousDataSamplesRetrieved += new EventHandler<ContinuousDataSamplesRetrievedEventArgs>(ContinuousDataCollection.NewDataSamplesArrived);
        myController.DataCollection.StartContinuous(500);
        // Collect data until the user presses a key
        Console.ReadKey();
        // Stop continuous data collection
        myController.DataCollection.Stop();
    }

    private static void NewDataSamplesArrived(object sender, ContinuousDataSamplesRetrievedEventArgs e)
    {
        DataCollectionResults results = e.Results;
        // Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis[AxisDataSignal.PositionCommand, 0]);
        Console.WriteLine(" Position Feedback: {0}", results.Axis[AxisDataSignal.PositionFeedback, 0]);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class ContinuousDataCollection
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Add position command and position feedback on axis 0 as signals to collect.
        Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
        config.Axis.Add(AxisDataSignal.PositionCommand, 0)
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0)
        ' Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds)
        ' After 500 points have been collected, raise an event so we receive the points
        AddHandler myController.DataCollection.ContinuousDataSamplesRetrieved, New EventHandler(Of ContinuousDataSamplesRetrievedEventArgs)(AddressOf ContinuousDataCollection.NewDataSamplesArrived)
        myController.DataCollection.StartContinuous(500)
        ' Collect data until the user presses a key
        Console.ReadKey
        ' Stop continuous data collection
        myController.DataCollection.Stop
    End Sub

    Private Shared Sub NewDataSamplesArrived(ByVal sender As Object, ByVal e As ContinuousDataSamplesRetrievedEventArgs)
        Dim results As DataCollectionResults = e.Results
        ' Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, 0))
        Console.WriteLine(" Position Feedback: {0}", results.Axis.Item(AxisDataSignal.PositionFeedback, 0))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.WaitForData(System.Int32)">
            <summary>
            Waits for a specific amount of data points to be available
            </summary>
            <param name="points">The number of points to wait for</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.WaitForData(System.Int32,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>
            Waits for a specific amount of data points to be available
            </summary>
            <param name="points">The number of points to wait for</param>
            <param name="waiter">The delegate that will be called with updates of the progress</param>
        </member>
        <member name="M:Aerotech.A3200.DataCollection.Data.Stop">
            <summary>Stops data collection</summary>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.DataCollection</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class ContinuousDataCollection abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
        config->Axis->Add(AxisDataSignal::PositionCommand, 0);
        config->Axis->Add(AxisDataSignal::PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController->DataCollection->Configuration->SampleTrigger->Time = gcnew SampleTriggerTimeConfiguration(2.0, TimeUnit::Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController->DataCollection->ContinuousDataSamplesRetrieved += gcnew EventHandler<ContinuousDataSamplesRetrievedEventArgs^>(NewDataSamplesArrived);
        myController->DataCollection->StartContinuous(500);
        // Collect data until the user presses a key
        Console::ReadKey();
        // Stop continuous data collection
        myController->DataCollection->Stop();
    }
    private:
    static void NewDataSamplesArrived(Object^ sender, ContinuousDataSamplesRetrievedEventArgs^ e)
    {
        DataCollectionResults^ results = e->Results;
        // Print out the 0th point collected for position command and feedback
        Console::WriteLine(" Position Command: {0}", results->Axis[AxisDataSignal::PositionCommand, 0]);
        Console::WriteLine(" Position Feedback: {0}", results->Axis[AxisDataSignal::PositionFeedback, 0]);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class ContinuousDataCollection
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration config = myController.DataCollection.Configuration;
        config.Axis.Add(AxisDataSignal.PositionCommand, 0);
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController.DataCollection.ContinuousDataSamplesRetrieved += new EventHandler<ContinuousDataSamplesRetrievedEventArgs>(ContinuousDataCollection.NewDataSamplesArrived);
        myController.DataCollection.StartContinuous(500);
        // Collect data until the user presses a key
        Console.ReadKey();
        // Stop continuous data collection
        myController.DataCollection.Stop();
    }

    private static void NewDataSamplesArrived(object sender, ContinuousDataSamplesRetrievedEventArgs e)
    {
        DataCollectionResults results = e.Results;
        // Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis[AxisDataSignal.PositionCommand, 0]);
        Console.WriteLine(" Position Feedback: {0}", results.Axis[AxisDataSignal.PositionFeedback, 0]);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class ContinuousDataCollection
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Add position command and position feedback on axis 0 as signals to collect.
        Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
        config.Axis.Add(AxisDataSignal.PositionCommand, 0)
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0)
        ' Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds)
        ' After 500 points have been collected, raise an event so we receive the points
        AddHandler myController.DataCollection.ContinuousDataSamplesRetrieved, New EventHandler(Of ContinuousDataSamplesRetrievedEventArgs)(AddressOf ContinuousDataCollection.NewDataSamplesArrived)
        myController.DataCollection.StartContinuous(500)
        ' Collect data until the user presses a key
        Console.ReadKey
        ' Stop continuous data collection
        myController.DataCollection.Stop
    End Sub

    Private Shared Sub NewDataSamplesArrived(ByVal sender As Object, ByVal e As ContinuousDataSamplesRetrievedEventArgs)
        Dim results As DataCollectionResults = e.Results
        ' Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, 0))
        Console.WriteLine(" Position Feedback: {0}", results.Axis.Item(AxisDataSignal.PositionFeedback, 0))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.Data.Status">
            <summary>Provides the current status of data collection</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.DataCollection.Data.Configuration">
            <summary>The configuration of data collection</summary>
            <remarks>
            	<para>Note that this is configuration in the current process, not on the SMC.</para>
            	<para>One can also instantiate their own configuration, see <see cref="T:Aerotech.A3200.DataCollection.DataCollectionConfiguration"/></para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.DataCollection</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    // Connect to the controller.
    Controller^ myController = Controller::Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
    config->Axis->Add(AxisDataSignal::PositionCommand, "X");
    config->Axis->Add(AxisDataSignal::PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController->DataCollection->Configuration->SampleTrigger->Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config->PointsToCollect = 1000;
    // Start the data collection
    myController->DataCollection->Start();
    // Retrieve the data points collected
    DataCollectionResults^ results = myController->DataCollection->GetData();
    // Print out the 75th position command point collected
    Console::WriteLine("Position Command for Axis X: {0}", results->Axis[AxisDataSignal::PositionCommand, "X"]->Points[74]);

]]>
</code>
<code language="C#">
<![CDATA[

    // Connect to the controller.
    Controller myController = Controller.Connect();
    // Add position command and position feedback on axis X as signals to collect.
    DataCollectionConfiguration config = myController.DataCollection.Configuration;
    config.Axis.Add(AxisDataSignal.PositionCommand, "X");
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X");
    // Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    // Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000;
    // Start the data collection
    myController.DataCollection.Start();
    // Retrieve the data points collected
    DataCollectionResults results = myController.DataCollection.GetData();
    // Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis[AxisDataSignal.PositionCommand, "X"].Points[0x4a]);

]]>
</code>
<code language="VB.NET">
<![CDATA[

    ' Connect to the controller.
    Dim myController As Controller = Controller.Connect
    ' Add position command and position feedback on axis X as signals to collect.
    Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
    config.Axis.Add(AxisDataSignal.PositionCommand, "X")
    config.Axis.Add(AxisDataSignal.PositionFeedback, "X")
    ' Collect 1 point of data for the signals every 2 msec
    myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
    ' Collect 1,000 points of data for each signal
    config.PointsToCollect = 1000
    ' Start the data collection
    myController.DataCollection.Start
    ' Retrieve the data points collected
    Dim results As DataCollectionResults = myController.DataCollection.GetData
    ' Print out the 75th position command point collected
    Console.WriteLine("Position Command for Axis X: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, "X").Points(&H4A))

]]>
</code>

</example>
        </member>
        <member name="E:Aerotech.A3200.DataCollection.Data.ContinuousDataSamplesRetrieved">
            <summary>Event that will be raised when enough data points have been collected in continuous mode</summary>
            <remarks>
            	<para>See <see cref="M:Aerotech.A3200.DataCollection.Data.StartContinuous(System.Int32)"/> for more information.</para>
            </remarks>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.DataCollection</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class ContinuousDataCollection abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration^ config = myController->DataCollection->Configuration;
        config->Axis->Add(AxisDataSignal::PositionCommand, 0);
        config->Axis->Add(AxisDataSignal::PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController->DataCollection->Configuration->SampleTrigger->Time = gcnew SampleTriggerTimeConfiguration(2.0, TimeUnit::Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController->DataCollection->ContinuousDataSamplesRetrieved += gcnew EventHandler<ContinuousDataSamplesRetrievedEventArgs^>(NewDataSamplesArrived);
        myController->DataCollection->StartContinuous(500);
        // Collect data until the user presses a key
        Console::ReadKey();
        // Stop continuous data collection
        myController->DataCollection->Stop();
    }
    private:
    static void NewDataSamplesArrived(Object^ sender, ContinuousDataSamplesRetrievedEventArgs^ e)
    {
        DataCollectionResults^ results = e->Results;
        // Print out the 0th point collected for position command and feedback
        Console::WriteLine(" Position Command: {0}", results->Axis[AxisDataSignal::PositionCommand, 0]);
        Console::WriteLine(" Position Feedback: {0}", results->Axis[AxisDataSignal::PositionFeedback, 0]);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class ContinuousDataCollection
{
    // Methods
    public static void Main(string[] args)
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Add position command and position feedback on axis 0 as signals to collect.
        DataCollectionConfiguration config = myController.DataCollection.Configuration;
        config.Axis.Add(AxisDataSignal.PositionCommand, 0);
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0);
        // Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = new SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds);
        // After 500 points have been collected, raise an event so we receive the points
        myController.DataCollection.ContinuousDataSamplesRetrieved += new EventHandler<ContinuousDataSamplesRetrievedEventArgs>(ContinuousDataCollection.NewDataSamplesArrived);
        myController.DataCollection.StartContinuous(500);
        // Collect data until the user presses a key
        Console.ReadKey();
        // Stop continuous data collection
        myController.DataCollection.Stop();
    }

    private static void NewDataSamplesArrived(object sender, ContinuousDataSamplesRetrievedEventArgs e)
    {
        DataCollectionResults results = e.Results;
        // Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis[AxisDataSignal.PositionCommand, 0]);
        Console.WriteLine(" Position Feedback: {0}", results.Axis[AxisDataSignal.PositionFeedback, 0]);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class ContinuousDataCollection
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Add position command and position feedback on axis 0 as signals to collect.
        Dim config As DataCollectionConfiguration = myController.DataCollection.Configuration
        config.Axis.Add(AxisDataSignal.PositionCommand, 0)
        config.Axis.Add(AxisDataSignal.PositionFeedback, 0)
        ' Collect 1 point of data for the signals every 2 msec
        myController.DataCollection.Configuration.SampleTrigger.Time = New SampleTriggerTimeConfiguration(2.0, TimeUnit.Milliseconds)
        ' After 500 points have been collected, raise an event so we receive the points
        AddHandler myController.DataCollection.ContinuousDataSamplesRetrieved, New EventHandler(Of ContinuousDataSamplesRetrievedEventArgs)(AddressOf ContinuousDataCollection.NewDataSamplesArrived)
        myController.DataCollection.StartContinuous(500)
        ' Collect data until the user presses a key
        Console.ReadKey
        ' Stop continuous data collection
        myController.DataCollection.Stop
    End Sub

    Private Shared Sub NewDataSamplesArrived(ByVal sender As Object, ByVal e As ContinuousDataSamplesRetrievedEventArgs)
        Dim results As DataCollectionResults = e.Results
        ' Print out the 0th point collected for position command and feedback
        Console.WriteLine(" Position Command: {0}", results.Axis.Item(AxisDataSignal.PositionCommand, 0))
        Console.WriteLine(" Position Feedback: {0}", results.Axis.Item(AxisDataSignal.PositionFeedback, 0))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.AxisMask">
            <summary>Represents a selection of axes</summary>
            <remarks>
            	<para>Multiple axes can be selected at once, or no axes can be selected</para>
            </remarks>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.None">
            <summary>No axes are selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A00">
            <summary>Axis #0 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A01">
            <summary>Axis #1 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A02">
            <summary>Axis #2 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A03">
            <summary>Axis #3 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A04">
            <summary>Axis #4 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A05">
            <summary>Axis #5 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A06">
            <summary>Axis #6 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A07">
            <summary>Axis #7 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A08">
            <summary>Axis #8 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A09">
            <summary>Axis #9 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A10">
            <summary>Axis #10 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A11">
            <summary>Axis #11 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A12">
            <summary>Axis #12 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A13">
            <summary>Axis #13 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A14">
            <summary>Axis #14 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A15">
            <summary>Axis #15 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A16">
            <summary>Axis #16 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A17">
            <summary>Axis #17 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A18">
            <summary>Axis #18 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A19">
            <summary>Axis #19 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A20">
            <summary>Axis #20 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A21">
            <summary>Axis #21 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A22">
            <summary>Axis #22 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A23">
            <summary>Axis #23 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A24">
            <summary>Axis #24 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A25">
            <summary>Axis #25 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A26">
            <summary>Axis #26 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A27">
            <summary>Axis #27 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A28">
            <summary>Axis #28 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A29">
            <summary>Axis #29 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A30">
            <summary>Axis #30 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.A31">
            <summary>Axis #31 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.AxisMask.All">
            <summary>All axes are selected</summary>
        </member>
        <member name="T:Aerotech.A3200.TaskMask">
            <summary>Represents a selection of tasks</summary>
            <remarks>
            	<para>Multiple tasks can be selected at once, or no tasks can be selected</para>
            </remarks>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.None">
            <summary>No tasks are selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.TLibrary">
            <summary>Library task is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T01">
            <summary>Task #1 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T02">
            <summary>Task #2 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T03">
            <summary>Task #3 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T04">
            <summary>Task #4 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T05">
            <summary>Task #5 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T06">
            <summary>Task #6 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T07">
            <summary>Task #7 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T08">
            <summary>Task #8 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T09">
            <summary>Task #9 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T10">
            <summary>Task #10 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T11">
            <summary>Task #11 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T12">
            <summary>Task #12 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T13">
            <summary>Task #13 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T14">
            <summary>Task #14 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T15">
            <summary>Task #15 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T16">
            <summary>Task #16 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T17">
            <summary>Task #17 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T18">
            <summary>Task #18 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T19">
            <summary>Task #19 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T20">
            <summary>Task #20 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T21">
            <summary>Task #21 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T22">
            <summary>Task #22 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T23">
            <summary>Task #23 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T24">
            <summary>Task #24 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T25">
            <summary>Task #25 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T26">
            <summary>Task #26 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T27">
            <summary>Task #27 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T28">
            <summary>Task #28 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T29">
            <summary>Task #29 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T30">
            <summary>Task #30 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.T31">
            <summary>Task #31 is selected</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskMask.All">
            <summary>All tasks are selected</summary>
        </member>
        <member name="T:Aerotech.A3200.Information.ComponentType">
            <summary>Specifies the hardware type of an axis or drive</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.Virtual">
            <summary>Virtual, emulated on the PC</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.Unknown">
            <summary>Unknown to this version of software</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveHPHL">
            <summary>Ndrive HP/HL</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.Npaq">
            <summary>Npaq</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveCP">
            <summary>Ndrive CP</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveCL">
            <summary>Ndrive CL</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.Nservo">
            <summary>Nservo</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveMP">
            <summary>Ndrive MP</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.Nstep">
            <summary>Nstep</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveHPe">
            <summary>Ndrive HPe</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveHLe">
            <summary>Ndrive HLe</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NmarkSSaM">
            <summary>Nmark SSaM</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveML">
            <summary>Ndrive ML</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdrivePMT">
            <summary>Ndrive PMT</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.SensorFusion">
            <summary>Sensor Fusion</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NmarkCLS">
            <summary>Nmark CLS</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveFLS">
            <summary>Ndrive FLS</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveQL">
            <summary>Ndrive QL</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NdriveQLe">
            <summary>Ndrive QLe</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.ComponentType.NmarkGCL">
            <summary>Nmark GCL</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.PrimitiveType">
            <summary>
            Represents a primitive type in AeroBasic
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PrimitiveType.Integer">
            <summary>
            32-bit integer
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PrimitiveType.Double">
            <summary>
            64-bit floating point, ANSI/IEEE Standard 754-1985
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PrimitiveType.Single">
            <summary>
            32-bit floating point, ANSI/IEEE Standard 754-1985
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PrimitiveType.Long">
            <summary>
            64-bit integer
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PrimitiveType.String">
            <summary>
            ASCII null-terminated string
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.FileDialogKind">
            <summary>Specifies the dialog kind for <see cref="T:Aerotech.A3200.Callbacks.FileSelectCallbackOccurredEventArgs"/></summary>
        </member>
        <member name="F:Aerotech.A3200.Callbacks.FileDialogKind.Open">
            <summary>Select a file to open</summary>
        </member>
        <member name="F:Aerotech.A3200.Callbacks.FileDialogKind.Save">
            <summary>Select the file name to save to</summary>
        </member>
        <member name="T:Aerotech.A3200.Firmware.FirmwareLoader">
            <summary>Allows to update the firmware on the drives</summary>
            <remarks>
            	<para>Caution should be taken when using this class, it is possible to make drives unusable.</para>
            	<para>The proper order of operations is:</para>
            	<list type="bullet">
            		<item><description>Call <see cref="M:Aerotech.A3200.Firmware.FirmwareLoader.IdentifyDrives"/> to find out which drives can be loaded</description></item>
            		<item><description>Call <see cref="M:Aerotech.A3200.Firmware.FirmwareLoader.Load(System.Collections.Generic.IEnumerable{Aerotech.A3200.Firmware.DriveInformation},System.String)"/> to load new firmware on the drives</description></item>
            		<item><description>Call <see cref="M:Aerotech.A3200.Firmware.FirmwareLoader.Commit"/> to commit the firmware to non-volatile memory</description></item>
            	</list>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Firmware.FirmwareLoader.#ctor">
            <summary>Constructs a new object</summary>
            <remarks>
            	<para>Note that the system might be stopped when this is called</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Firmware.FirmwareLoader.Finalize">
            <summary>Releases any resources that were used for loading firmware</summary>
            <remarks>
            	<para>Note that the system might be stopped when this is called</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Firmware.FirmwareLoader.Dispose">
            <summary>Disposes of any resources that were used for loading firmware</summary>
            <remarks>
            	<para>Note that the system might be stopped when this is called</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Firmware.FirmwareLoader.IdentifyDrives">
            <summary>Identifies drives connected over firewire</summary>
            <returns>The drives that can be loaded</returns>
            <remarks>
            	<para>When this is called the system will be stopped</para>
            </remarks>
            <seealso cref="P:Aerotech.A3200.Firmware.FirmwareLoader.Drives"/>
        </member>
        <member name="M:Aerotech.A3200.Firmware.FirmwareLoader.Load(System.Collections.Generic.IEnumerable{Aerotech.A3200.Firmware.DriveInformation},System.String)">
            <summary>Updates firmware on the given drives</summary>
            <param name="drivesToCommit">The drives to update firmware on</param>
            <param name="firmwareFilePath">The path to the firmware file</param>
            <seealso cref="M:Aerotech.A3200.Firmware.FirmwareLoader.Commit"/>
        </member>
        <member name="M:Aerotech.A3200.Firmware.FirmwareLoader.Load(System.Collections.Generic.IEnumerable{Aerotech.A3200.Firmware.DriveInformation},System.String,System.ComponentModel.ProgressChangedEventHandler)">
            <summary>Updates firmware on the given drives</summary>
            <param name="drivesToCommit">The drives to update the firmware on</param>
            <param name="firmwareFilePath">The path to the firmware file</param>
            <param name="eventHandler">Is called to report progress of the firmware loading</param>
            <seealso cref="M:Aerotech.A3200.Firmware.FirmwareLoader.Commit(System.ComponentModel.ProgressChangedEventHandler)"/>
        </member>
        <member name="M:Aerotech.A3200.Firmware.FirmwareLoader.Commit">
            <summary>Commits the firmware on the drives to non-volatile memory</summary>
            <seealso cref="M:Aerotech.A3200.Firmware.FirmwareLoader.Load(System.Collections.Generic.IEnumerable{Aerotech.A3200.Firmware.DriveInformation},System.String)"/>
        </member>
        <member name="M:Aerotech.A3200.Firmware.FirmwareLoader.Commit(System.ComponentModel.ProgressChangedEventHandler)">
            <summary>Commits the firmware on the drives to non-volatile memory</summary>
            <param name="eventHandler">Is called to report progress of the firmware commiting</param>
            <seealso cref="M:Aerotech.A3200.Firmware.FirmwareLoader.Load(System.Collections.Generic.IEnumerable{Aerotech.A3200.Firmware.DriveInformation},System.String,System.ComponentModel.ProgressChangedEventHandler)"/>
        </member>
        <member name="P:Aerotech.A3200.Firmware.FirmwareLoader.Drives">
            <summary>The drives currently connected</summary>
            <remarks>
            	<para>Call <see cref="M:Aerotech.A3200.Firmware.FirmwareLoader.IdentifyDrives"/> to have this property return valid information</para>
            </remarks>
            <seealso cref="M:Aerotech.A3200.Firmware.FirmwareLoader.IdentifyDrives"/>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Parameter">
            <summary>
            Represents a generic parameter
            </summary>
            <remarks>
            	<para>
            		This class will be used when a generic parameter is returned.  See
            		the indexer of <see cref="T:Aerotech.A3200.Parameters.ParametersAllCollection"/>.  Most of the time a parameter
            		of type <see cref="T:Aerotech.A3200.Parameters.TypedParameter`1"/> will be returned.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Parameter.getBounds">
            <summary>
            The method that does the work to get the bounds
            </summary>
            <returns>The bounds of the parameters</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Parameter.setValue(System.Object)">
            <summary>
            [Internal] The method that does the work to set the value
            </summary>
            <param name="value">The value to set</param>
            <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Parameter.getValue">
            <summary>
            [Internal] The method that does the work to get the value
            </summary>
            <returns>The value of the parameter</returns>
            <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Parameters.Parameter.WithinBounds(System.Object)">
            <summary>
            Tests whether a value is within the parameter's range of acceptable values
            </summary>
            <param name="value">The value to test</param>
            <returns>
            <list type="table">
            	<listheader>
            		<item>
            			<term>Value</term>
            			<description>Description</description>
            		</item>
            	</listheader>
            	<item>
            		<term>-1</term>
            		<description><paramref name="value"/> is too small</description>
            	</item>
            	<item>
            		<term>0</term>
            		<description><paramref name="value"/> is within bounds</description>
            	</item>
            	<item>
            		<term>1</term>
            		<description><paramref name="value"/> is too large</description>
            	</item>
            </list>
            </returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Parameter.Name">
            <summary>
            The parameter name
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Parameter.Bounds">
            <summary>
            Contains the bounds of this parameter
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Parameter.Value">
            <summary>
            The parameter value
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController->Parameters->SaveToFile("controllerParametersBackup.prma");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prma");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prma")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Parameter.ValueDouble">
            <summary>The parameter value as a double, can have precision loss.</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Parameter.Default">
            <summary>
            The parameter default value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Parameter.ValueType">
            <summary>
            The type of the parameter
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Parameter.Context">
            <summary>The context of the parameter</summary>
            <remarks>
                <para>This property is used to determine the context of the parameter (whether it is a system, axis, or task parameter)</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.Parameter.ContextKey">
            <summary>The Task ID or axis index of the parameter</summary>
            <remarks>
            	<para>To determine whether this value represents a Task ID or an axis index, read the value of the Context property</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.ParameterRetrievalErrorEventArgs">
            <summary>
            Provides data for parameter retrieval errors
            </summary>
            <remarks>
            	<para>
            		This class provides data for the error handling in the 
            		<see cref="M:Aerotech.A3200.Parameters.ControllerParameters.RetrieveFromController(System.ComponentModel.ProgressChangedEventHandler,System.EventHandler{Aerotech.A3200.Parameters.ParameterRetrievalErrorEventArgs})"/>.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.ErrorEventArgs">
            <summary>
            Provides data for the error events
            </summary>
            <remarks>
            	<para>
            		This class provides data for the error handling events in the <see cref="T:Aerotech.A3200.Status.ControlCenter"/>;
            		an example is <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.ErrorOccurred"/>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.ErrorEventArgs.#ctor(Aerotech.A3200.Controller,System.Exception)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.A3200.Status.ErrorEventArgs"/>
            </summary>
            <param name="controller">The controller associated with the error</param>
            <param name="exception">The exception that occured</param>
        </member>
        <member name="P:Aerotech.A3200.Status.ErrorEventArgs.Exception">
            <summary>
            The exception that caused the error to happen
            </summary>
            <remarks>
            	<para>
            		To figure out the exact error inspect the specific type of the exception.
            	</para>
            </remarks>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/DiagPacketPoller/Example[@name=&quot;DiagPktPoller&quot;]/*"/>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterRetrievalErrorEventArgs.#ctor(Aerotech.A3200.Controller,System.Exception,System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.A3200.Parameters.ParameterRetrievalErrorEventArgs"/>
            </summary>
            <param name="controller">The controller associated with the error</param>
            <param name="exception">The exception that occured</param>
            <param name="parameter">The parameter during whose retrieval the error occured</param>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterRetrievalErrorEventArgs.Continue">
            <summary>
            Whether to continue the parameter retrieval
            </summary>
            <remarks>
            	<para>
            		The default is <c>false</c>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterRetrievalErrorEventArgs.Parameter">
            <summary>
            The name of parameter whose retrieval failed
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.ControllerParameters">
            <summary>Allows access to active parameters on the controller</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Access the controller parameter values.
        ControllerParameters^ controllerParameters = myController->Parameters;
        // Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters->Axes[0]->Motion->AbortDecelRate->Value);
        Console::WriteLine("Parameter CountsPerRev is: {0}", controllerParameters->Axes["Z"]->Motor->CountsPerRev->Value);
        Console::WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters->Axes[AxisMask::A02]->Units->CountsPerUnit->Value);
        Console::WriteLine("Parameter UserDouble1 is: {0}", controllerParameters->System->User->UserDouble1->Value);
        Console::WriteLine("Parameter GlobalDoubles is: {0}", controllerParameters->System->MemoryAllocation->GlobalDoubles->Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Access the controller parameter values.
        ControllerParameters controllerParameters = myController.Parameters;
        // Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Parameter CountsPerRev is: {0}", controllerParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters.Axes[AxisMask.A02].Units.CountsPerUnit.Value);
        Console.WriteLine("Parameter UserDouble1 is: {0}", controllerParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Parameter GlobalDoubles is: {0}", controllerParameters.System.MemoryAllocation.GlobalDoubles.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Access the controller parameter values.
        Dim controllerParameters As ControllerParameters = myController.Parameters
        ' Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Parameter CountsPerRev is: {0}", controllerParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters.Axes.Item(AxisMask.A02).Units.CountsPerUnit.Value)
        Console.WriteLine("Parameter UserDouble1 is: {0}", controllerParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Parameter GlobalDoubles is: {0}", controllerParameters.System.MemoryAllocation.GlobalDoubles.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ControllerParameters.SaveToFile(System.String)">
            <summary>
            Retrieves the current parameters from the controller, and then saves the parameters to the specifed file
            </summary>
            <param name="fileName">The file name to save the parameters to</param>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController->Parameters->SaveToFile("controllerParametersBackup.prma");
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prma");
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve and save the parameters to a file on the local disk so we have a backup copy.
        myController.Parameters.SaveToFile("controllerParametersBackup.prma")
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ControllerParameters.RetrieveFromController">
            <summary>Retrieves all active parameters from controller</summary>
            <returns>An object that stores all the parameters locally</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ControllerParameters.RetrieveFromController(System.ComponentModel.ProgressChangedEventHandler)">
            <summary>Retrieves all active parameters from controller</summary>
            <param name="progressChangedEventHandler">Delegate that will be called to provide progress information</param>
            <returns>An object that stores all the parameters locally</returns>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ControllerParameters.RetrieveFromController(System.ComponentModel.ProgressChangedEventHandler,System.EventHandler{Aerotech.A3200.Parameters.ParameterRetrievalErrorEventArgs})">
            <summary>Retrieves all active parameters from controller</summary>
            <param name="progressChangedEventHandler">Delegate that will be called to provide progress information</param>
            <param name="retrievalErrorEventHandler">Delegate that will be called in case of an error, set <see cref="P:Aerotech.A3200.Parameters.ParameterRetrievalErrorEventArgs.Continue"/> to continue retrieval</param>
            <returns>An object that stores all the parameters locally</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ControllerParameters.Axes">
            <summary>Axis parameters</summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Parameters</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Access the controller parameter values.
        ControllerParameters^ controllerParameters = myController->Parameters;
        // Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console::WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters->Axes[0]->Motion->AbortDecelRate->Value);
        Console::WriteLine("Parameter CountsPerRev is: {0}", controllerParameters->Axes["Z"]->Motor->CountsPerRev->Value);
        Console::WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters->Axes[AxisMask::A02]->Units->CountsPerUnit->Value);
        Console::WriteLine("Parameter UserDouble1 is: {0}", controllerParameters->System->User->UserDouble1->Value);
        Console::WriteLine("Parameter GlobalDoubles is: {0}", controllerParameters->System->MemoryAllocation->GlobalDoubles->Value);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Access the controller parameter values.
        ControllerParameters controllerParameters = myController.Parameters;
        // Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters.Axes[0].Motion.AbortDecelRate.Value);
        Console.WriteLine("Parameter CountsPerRev is: {0}", controllerParameters.Axes["Z"].Motor.CountsPerRev.Value);
        Console.WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters.Axes[AxisMask.A02].Units.CountsPerUnit.Value);
        Console.WriteLine("Parameter UserDouble1 is: {0}", controllerParameters.System.User.UserDouble1.Value);
        Console.WriteLine("Parameter GlobalDoubles is: {0}", controllerParameters.System.MemoryAllocation.GlobalDoubles.Value);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Access the controller parameter values.
        Dim controllerParameters As ControllerParameters = myController.Parameters
        ' Print out the values for some parameters, using the various axis indexing techniques for each category.
        Console.WriteLine("Parameter AbortDecelRate is: {0}", controllerParameters.Axes.Item(0).Motion.AbortDecelRate.Value)
        Console.WriteLine("Parameter CountsPerRev is: {0}", controllerParameters.Axes.Item("Z").Motor.CountsPerRev.Value)
        Console.WriteLine("Parameter CountsPerUnit is: {0}", controllerParameters.Axes.Item(AxisMask.A02).Units.CountsPerUnit.Value)
        Console.WriteLine("Parameter UserDouble1 is: {0}", controllerParameters.System.User.UserDouble1.Value)
        Console.WriteLine("Parameter GlobalDoubles is: {0}", controllerParameters.System.MemoryAllocation.GlobalDoubles.Value)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.Parameters.ControllerAxisParameterCategoryCollection">
            <summary>Provides access to parameters on axes</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ControllerAxisParameterCategoryCollection.Item(System.String)">
            <summary>Gets object to access parameters by axis name</summary>
            <param name="name">The name of the axis</param>
            <returns>The object to edit parameters on <paramref name="name"/> axis</returns>
        </member>
        <member name="T:Aerotech.A3200.Parameters.ControllerAxisParameterCategory">
            <summary>
            The root category of parameters for a given controller axis
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisParameterCategory">
            <summary>
            The root category of parameters for a given axis
            </summary>
            <remarks>
            	<para>
            		This is a generic class for parameters.  The specialized class that inherits from it is
            		<see cref="T:Aerotech.A3200.Parameters.ControllerAxisParameterCategory"/>.  It can be accessed from <see cref="T:Aerotech.A3200.Parameters.BaseParameters"/>.
            	</para>
            </remarks>
            <summary>Contains the Axis Parameters</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.ParameterCategory">
            <summary>
            The base type for categories containing parameters
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterCategory.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a user defined category
            </summary>
            <typeparam name="TType">A type derived from <see cref="T:Aerotech.A3200.Parameters.Parameter"/></typeparam>
            <param name="parameters">The parameters to create the category from</param>
            <returns>
            	<para>
            		A <see cref="T:Aerotech.A3200.Parameters.ParameterCategory"/> that contains only the parameters given.
            	</para>
            </returns>
            <remarks>
            	<note>
            		If you give a <see cref="T:Aerotech.A3200.Parameters.ParameterCategory"/> to this method, it will <b>NOT</b> go recursively and get all
            		the parameters.
            	</note>
            	<note>
				If you give a <see cref="T:Aerotech.A3200.Parameters.BaseParameters"/> to this method, it will <b>NOT</b> go and get the
				<see cref="P:Aerotech.A3200.Parameters.BaseParameters.Axes"/> parameters.
			</note>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterCategory.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterCategory.All">
            <summary>
            Contains all the parameters in this category and its child categories
            </summary>
            <remarks>
            	<para>
            		This provides access to the parameters inside of this category by name.
            	</para>
            	<para>
            		In specific categories, you will be able to get the specific parameters.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterCategory.Objects">
            <summary>
            Provides access to the parameters
            </summary>
            <exclude/>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterCategory.Categories">
            <summary>
            Gets the subcategories of this category.
            </summary>
            <remarks>
            	<para>
            		This prvoides access to the subcategories inside of this category by name.
            	</para>
            	<para>
            		In specific categories,  you will be able to get the specific categories.
            		See <see cref="T:Aerotech.A3200.Parameters.BaseParameters"/> for an example.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.AxisName">
            <summary>
            The axis name
            </summary>
        </member>
        <member name="E:Aerotech.A3200.Parameters.AxisParameterCategory.AxisNameChanged">
            <summary>
            Raised when <see cref="P:Aerotech.A3200.Parameters.AxisParameterCategory.AxisName"/> property changes
            </summary>
            <remarks>
            <note>
			The events are fired only if the properties are changed by using this instance of the .NET library.
			If the value is changed on the controller from another instance of the .NET library, from another PC, or
			using AeroBasic, the event will not be fired.
		</note>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.AxisNumber">
            <summary>
            The axis number
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.AutofocusLoop">
            <summary>Contains the Autofocus Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.Communication">
            <summary>Contains the Communication Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.CurrentLoop">
            <summary>Contains the Current Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.DynamicControlsToolbox">
            <summary>Contains the Dynamic Controls Toolbox Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.EnhancedThroughputModule">
            <summary>Contains the Enhanced Throughput Module Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.EnhancedTrackingControl">
            <summary>Contains the Enhanced Tracking Control Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.Fault">
            <summary>Contains the Fault Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.Feedback">
            <summary>Contains the Feedback Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.IO">
            <summary>Contains the I/O Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.Limits">
            <summary>Contains the Limits Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.Motion">
            <summary>Contains the Motion Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.Motor">
            <summary>Contains the Motor Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.ServoLoop">
            <summary>Contains the Servo Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.Units">
            <summary>Contains the Units Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.AxisType">
            <summary>Allows access to the AxisType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AxisType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AxisType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AxisType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AxisType.html&#xA;							">AxisType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.RolloverCounts">
            <summary>Allows access to the RolloverCounts Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].RolloverCounts;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").RolloverCounts

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;RolloverCounts;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/RolloverCounts.html&#xA;							">RolloverCounts</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.GantryMasterAxis">
            <summary>Allows access to the GantryMasterAxis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].GantryMasterAxis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").GantryMasterAxis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;GantryMasterAxis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GantryMasterAxis.html&#xA;							">GantryMasterAxis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.BacklashDistance">
            <summary>Allows access to the BacklashDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].BacklashDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").BacklashDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;BacklashDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/BacklashDistance.html&#xA;							">BacklashDistance</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.GantrySetup">
            <summary>Allows access to the GantrySetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].GantrySetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").GantrySetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;GantrySetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GantrySetup.html&#xA;							">GantrySetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.RolloverMode">
            <summary>Allows access to the RolloverMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].RolloverMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").RolloverMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;RolloverMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/RolloverMode.html&#xA;							">RolloverMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisParameterCategory.RequiredStageSerialNumber">
            <summary>Allows access to the RequiredStageSerialNumber Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;string&gt; parameter = myController.Parameters.Axes["X"].RequiredStageSerialNumber;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of String) = myController.Parameters.Axes("X").RequiredStageSerialNumber

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;RequiredStageSerialNumber;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/RequiredStageSerialNumber.html&#xA;							">RequiredStageSerialNumber</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TypedParameter`1">
            <summary>
            Represents a typed parameter
            </summary>
            <typeparam name="TType">The type of parameter</typeparam>
            <remarks>
            	<para>
            		This class will be used when a parameter of a specific type is returned.  See
            		<see cref="T:Aerotech.A3200.Parameters.BaseParameters"/>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Parameters.TypedParameter`1.getBounds">
            <summary>
            The method that does the work to get the bounds
            </summary>
            <returns>The bounds of the parameters</returns>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TypedParameter`1.Value">
            <summary>
            The parameter value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TypedParameter`1.Bounds">
            <summary>
            Specifies the parameter bounds
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TypedParameter`1.Default">
            <summary>
            The parameter's default value
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.FileParameterCreator.defaultFileParametersCreator">
            <summary>
            DO NOT USE, use <see cref="P:Aerotech.A3200.Parameters.FileParameterCreator.DefaultFileParametersCreator"/> instead
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.NamedXmlSections">
            <summary>Provides name based access to <see cref="P:Aerotech.A3200.Parameters.ParameterFile.UserDataSections"/>.</summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.NamedXmlSections.Get(System.String)">
            <summary>Gets a section by name.</summary>
            <param name="sectionName">The name of the section to get.</param>
            <returns>The section with <paramref name="sectionName"/> name or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.A3200.Parameters.NamedXmlSections.GetOrCreate(System.String)">
            <summary>Gets a section by name or creates one if one does not exist.</summary>
            <param name="sectionName">The name of the section to get or create.</param>
            <returns>The section with <paramref name="sectionName"/> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.A3200.Parameters.NamedXmlSections.GetOrCreate(System.String,System.String)">
            <summary>Gets a section by name or creates one if one does not exist.</summary>
            <param name="sectionName">The name of the section to get or create.</param>
            <param name="sectionNamespace">The namespace to use if the node needs to be create.</param>
            <returns>The section with <paramref name="sectionName"/> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"/> or <paramref name="sectionNamespace"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.A3200.Parameters.NamedXmlSections.Create(System.String)">
            <summary>Creates a section.</summary>
            <param name="sectionName">The name of the section to create.</param>
            <returns>The section with <paramref name="sectionName"/> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="sectionName"/> already exists.</exception>
        </member>
        <member name="M:Aerotech.A3200.Parameters.NamedXmlSections.Create(System.String,System.String)">
            <summary>Creates a section.</summary>
            <param name="sectionName">The name of the section to create.</param>
            <param name="sectionNamespace">The namespace to use to create the node.</param>
            <returns>The section with <paramref name="sectionName"/> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"/> or <paramref name="sectionNamespace"/> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="sectionName"/> already exists.</exception>
        </member>
        <member name="M:Aerotech.A3200.Parameters.NamedXmlSections.Remove(System.String)">
            <summary>Removes a section by name.</summary>
            <param name="sectionName">The name of the section to remove.</param>
            <returns>Whether the section was removed or not.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Aerotech.A3200.Parameters.NamedXmlSections.Clear">
            <summary>Removes all the sections.</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.NamedXmlSections.OwnerDocument">
            <summary>Returns the document to which all the inner sections belong.</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.NamedXmlSections.ParameterNamespace">
            <summary>The namespace of the parameter file, can be used as the namespace when creating nodes.</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.NamedXmlSections.SectionNames">
            <summary>All of the section names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.NamedXmlSections.Sections">
            <summary>All of the sections.</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.NamedXmlSections.Item(System.String)">
            <summary>Gets or sets sections by name.</summary>
            <param name="sectionName">The name of the section to get or set.</param>
            <returns>The section with <paramref name="sectionName"/> name.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="sectionName"/> or <paramref name="value"/> are <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="sectionName"/> name does not match data in <paramref name="value"/>.</exception>
        </member>
        <member name="P:Aerotech.A3200.Parameters.NamedXmlSections.Count">
            <summary>The number of sections.</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TypedParameterBounds`1">
            <summary>
            Represents bounds of a typed parameter
            </summary>
            <typeparam name="TType">The type of parameter</typeparam>
            <remarks>
            	<para>
            		This class is used as the parameter <see cref="T:Aerotech.A3200.Parameters.TypedParameter`1"/>.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.ParameterBounds">
            <summary>
            Represents the bounds of a generic parameter
            </summary>
            <remarks>
            	<para>
            		This class is used as part of <see cref="T:Aerotech.A3200.Parameters.Parameter"/>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterBounds.Exists">
            <summary>
            Whether the parameter has bounds
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterBounds.Max">
            <summary>
            The parameter maximum value, if any
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.ParameterBounds.Min">
            <summary>
            The parameter minimum value, if any
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TypedParameterBounds`1.Max">
            <summary>
            Parameter maximum value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TypedParameterBounds`1.Min">
            <summary>
            Parameter minimum value
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.ParameterConstants.DataVersionSectionName">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;dataversion_sectionname&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.ParameterConstants.OldestCompatibleParameterFileVersionSectionName">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;oldestcompatibleparameterfileversion_sectionname&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.ParameterConstants.OldestCompatibleParameterFileVersionMajor">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;oldestcompatibleparameterfileversion_major&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.ParameterConstants.OldestCompatibleParameterFileVersionMinor">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;oldestcompatibleparameterfileversion_minor&quot;]/*"/>
        </member>
        <member name="T:Aerotech.A3200.Parameters.ParametersAllCollection">
            <summary>
            Represents a category that contains parameters in a non-nested fashion
            </summary>
            <remarks>
            	<para>
            		This is used to provide a collection of parameters accessible by name.  See
            		the indexer of <see cref="T:Aerotech.A3200.Parameters.ParameterCategory"/>.  This collection does not have
            		information about the specific type of parameters.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemParameterCategory">
            <summary>Contains the System Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.Communication">
            <summary>Contains the Communication Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.MemoryAllocation">
            <summary>Contains the Memory Allocation Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.User">
            <summary>Contains the User Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.AlternateUnits">
            <summary>Contains the Alternate Units Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.PLC">
            <summary>Contains the PLC Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.Logging">
            <summary>Contains the Logging Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.RequiredAxes">
            <summary>Allows access to the RequiredAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.RequiredAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.RequiredAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;RequiredAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/RequiredAxes.html&#xA;							">RequiredAxes</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.SystemCompatibility">
            <summary>Allows access to the SystemCompatibility Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.SystemCompatibility;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.SystemCompatibility

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;SystemCompatibility;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SystemCompatibility.html&#xA;							">SystemCompatibility</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.CallbackTimeout">
            <summary>Allows access to the CallbackTimeout Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.CallbackTimeout;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.CallbackTimeout

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;CallbackTimeout;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CallbackTimeout.html&#xA;							">CallbackTimeout</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.DisplayAxes">
            <summary>Allows access to the DisplayAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.DisplayAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.DisplayAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;DisplayAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DisplayAxes.html&#xA;							">DisplayAxes</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.EnabledTasks">
            <summary>Allows access to the EnabledTasks Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.EnabledTasks;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.EnabledTasks

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;EnabledTasks;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EnabledTasks.html&#xA;							">EnabledTasks</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.FaultAckMoveOutOfLimit">
            <summary>Allows access to the FaultAckMoveOutOfLimit Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.FaultAckMoveOutOfLimit;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.FaultAckMoveOutOfLimit

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;FaultAckMoveOutOfLimit;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultAckMoveOutOfLimit.html&#xA;							">FaultAckMoveOutOfLimit</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.SoftwareExternalFaultInput">
            <summary>Allows access to the SoftwareExternalFaultInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.SoftwareExternalFaultInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.SoftwareExternalFaultInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;SoftwareExternalFaultInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SoftwareExternalFaultInput.html&#xA;							">SoftwareExternalFaultInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemParameterCategory.MasterClockCorrectionFactor">
            <summary>Allows access to the MasterClockCorrectionFactor Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.MasterClockCorrectionFactor;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.MasterClockCorrectionFactor

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MasterClockCorrectionFactor;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MasterClockCorrectionFactor.html&#xA;							">MasterClockCorrectionFactor</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemCommunicationParameterCategory">
            <summary>Contains the Communication Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationParameterCategory.Ascii">
            <summary>Contains the ASCII Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationParameterCategory.WebServer">
            <summary>Contains the Web Server Parameters</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemCommunicationAsciiParameterCategory">
            <summary>Contains the ASCII Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationAsciiParameterCategory.CommandPort">
            <summary>Allows access to the CommandPort Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandPort;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandPort

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandPort;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CommandPort.html&#xA;							">CommandPort</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationAsciiParameterCategory.CommandSetup">
            <summary>Allows access to the CommandSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CommandSetup.html&#xA;							">CommandSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationAsciiParameterCategory.CommandTerminatingCharacter">
            <summary>Allows access to the CommandTerminatingCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandTerminatingCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandTerminatingCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandTerminatingCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CommandTerminatingCharacter.html&#xA;							">CommandTerminatingCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationAsciiParameterCategory.CommandSuccessCharacter">
            <summary>Allows access to the CommandSuccessCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandSuccessCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandSuccessCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandSuccessCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CommandSuccessCharacter.html&#xA;							">CommandSuccessCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationAsciiParameterCategory.CommandInvalidCharacter">
            <summary>Allows access to the CommandInvalidCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandInvalidCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandInvalidCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandInvalidCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CommandInvalidCharacter.html&#xA;							">CommandInvalidCharacter</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationAsciiParameterCategory.CommandFaultCharacter">
            <summary>Allows access to the CommandFaultCharacter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.Ascii.CommandFaultCharacter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.Ascii.CommandFaultCharacter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;Ascii-&gt;CommandFaultCharacter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CommandFaultCharacter.html&#xA;							">CommandFaultCharacter</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemCommunicationWebServerParameterCategory">
            <summary>Contains the Web Server Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationWebServerParameterCategory.WebServerSetup">
            <summary>Allows access to the WebServerSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.WebServer.WebServerSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.WebServer.WebServerSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;WebServer-&gt;WebServerSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/WebServerSetup.html&#xA;							">WebServerSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemCommunicationWebServerParameterCategory.WebServerPort">
            <summary>Allows access to the WebServerPort Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Communication.WebServer.WebServerPort;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Communication.WebServer.WebServerPort

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Communication-&gt;WebServer-&gt;WebServerPort;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/WebServerPort.html&#xA;							">WebServerPort</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemMemoryAllocationParameterCategory">
            <summary>Contains the Memory Allocation Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemMemoryAllocationParameterCategory.DataCollectionPoints">
            <summary>Allows access to the DataCollectionPoints Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.DataCollectionPoints;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.DataCollectionPoints

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;DataCollectionPoints;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DataCollectionPoints.html&#xA;							">DataCollectionPoints</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemMemoryAllocationParameterCategory.DataCollectionItems">
            <summary>Allows access to the DataCollectionItems Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.DataCollectionItems;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.DataCollectionItems

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;DataCollectionItems;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DataCollectionItems.html&#xA;							">DataCollectionItems</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemMemoryAllocationParameterCategory.GlobalDoubles">
            <summary>Allows access to the GlobalDoubles Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.GlobalDoubles;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.GlobalDoubles

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;GlobalDoubles;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GlobalDoubles.html&#xA;							">GlobalDoubles</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemMemoryAllocationParameterCategory.GlobalStrings">
            <summary>Allows access to the GlobalStrings Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.GlobalStrings;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.GlobalStrings

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;GlobalStrings;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GlobalStrings.html&#xA;							">GlobalStrings</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemMemoryAllocationParameterCategory.GlobalAxisPoints">
            <summary>Allows access to the GlobalAxisPoints Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.GlobalAxisPoints;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.GlobalAxisPoints

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;GlobalAxisPoints;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GlobalAxisPoints.html&#xA;							">GlobalAxisPoints</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemMemoryAllocationParameterCategory.CannedFunctions">
            <summary>Allows access to the CannedFunctions Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.CannedFunctions;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.CannedFunctions

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;CannedFunctions;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CannedFunctions.html&#xA;							">CannedFunctions</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemMemoryAllocationParameterCategory.IFOVConfigurations">
            <summary>Allows access to the IFOVConfigurations Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.IFOVConfigurations;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.IFOVConfigurations

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;IFOVConfigurations;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/IFOVConfigurations.html&#xA;							">IFOVConfigurations</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemMemoryAllocationParameterCategory.IFOVMaximumTime">
            <summary>Allows access to the IFOVMaximumTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.MemoryAllocation.IFOVMaximumTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.MemoryAllocation.IFOVMaximumTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;MemoryAllocation-&gt;IFOVMaximumTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/IFOVMaximumTime.html&#xA;							">IFOVMaximumTime</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemUserParameterCategory">
            <summary>Contains the User Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemUserParameterCategory.UserDouble0">
            <summary>Allows access to the UserDouble0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.User.UserDouble0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.User.UserDouble0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserDouble0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/UserDouble0.html&#xA;							">UserDouble0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemUserParameterCategory.UserDouble1">
            <summary>Allows access to the UserDouble1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.User.UserDouble1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.User.UserDouble1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserDouble1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/UserDouble1.html&#xA;							">UserDouble1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemUserParameterCategory.UserString0">
            <summary>Allows access to the UserString0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;string&gt; parameter = myController.Parameters.System.User.UserString0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of String) = myController.Parameters.System.User.UserString0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserString0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/UserString0.html&#xA;							">UserString0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemUserParameterCategory.UserString1">
            <summary>Allows access to the UserString1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;string&gt; parameter = myController.Parameters.System.User.UserString1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of String) = myController.Parameters.System.User.UserString1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserString1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/UserString1.html&#xA;							">UserString1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemUserParameterCategory.UserDouble2">
            <summary>Allows access to the UserDouble2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.User.UserDouble2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.User.UserDouble2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserDouble2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/UserDouble2.html&#xA;							">UserDouble2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemUserParameterCategory.UserDouble3">
            <summary>Allows access to the UserDouble3 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.User.UserDouble3;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.User.UserDouble3

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserDouble3;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/UserDouble3.html&#xA;							">UserDouble3</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemUserParameterCategory.UserString2">
            <summary>Allows access to the UserString2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;string&gt; parameter = myController.Parameters.System.User.UserString2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of String) = myController.Parameters.System.User.UserString2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserString2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/UserString2.html&#xA;							">UserString2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemUserParameterCategory.UserString3">
            <summary>Allows access to the UserString3 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;string&gt; parameter = myController.Parameters.System.User.UserString3;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of String) = myController.Parameters.System.User.UserString3

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;User-&gt;UserString3;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/UserString3.html&#xA;							">UserString3</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemAlternateUnitsParameterCategory">
            <summary>Contains the Alternate Units Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemAlternateUnitsParameterCategory.DependentSpeedScaleFactor">
            <summary>Allows access to the DependentSpeedScaleFactor Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.AlternateUnits.DependentSpeedScaleFactor;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.AlternateUnits.DependentSpeedScaleFactor

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;AlternateUnits-&gt;DependentSpeedScaleFactor;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DependentSpeedScaleFactor.html&#xA;							">DependentSpeedScaleFactor</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemAlternateUnitsParameterCategory.SecondaryUnitsScaleFactor">
            <summary>Allows access to the SecondaryUnitsScaleFactor Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.System.AlternateUnits.SecondaryUnitsScaleFactor;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.System.AlternateUnits.SecondaryUnitsScaleFactor

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;AlternateUnits-&gt;SecondaryUnitsScaleFactor;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SecondaryUnitsScaleFactor.html&#xA;							">SecondaryUnitsScaleFactor</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemAlternateUnitsParameterCategory.PrimaryUnitsMapping">
            <summary>Allows access to the PrimaryUnitsMapping Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.AlternateUnits.PrimaryUnitsMapping;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.AlternateUnits.PrimaryUnitsMapping

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;AlternateUnits-&gt;PrimaryUnitsMapping;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PrimaryUnitsMapping.html&#xA;							">PrimaryUnitsMapping</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemAlternateUnitsParameterCategory.SecondaryUnitsName">
            <summary>Allows access to the SecondaryUnitsName Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;string&gt; parameter = myController.Parameters.System.AlternateUnits.SecondaryUnitsName;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of String) = myController.Parameters.System.AlternateUnits.SecondaryUnitsName

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;AlternateUnits-&gt;SecondaryUnitsName;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SecondaryUnitsName.html&#xA;							">SecondaryUnitsName</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemPLCParameterCategory">
            <summary>Contains the PLC Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemPLCParameterCategory.PLCReservedTasks">
            <summary>Allows access to the PLCReservedTasks Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.PLC.PLCReservedTasks;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.PLC.PLCReservedTasks

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;PLC-&gt;PLCReservedTasks;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PLCReservedTasks.html&#xA;							">PLCReservedTasks</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemLoggingParameterCategory">
            <summary>Contains the Logging Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemLoggingParameterCategory.SignalLog">
            <summary>Contains the Signal Log Parameters</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.SystemLoggingSignalLogParameterCategory">
            <summary>Contains the Signal Log Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemLoggingSignalLogParameterCategory.SignalLogSetup">
            <summary>Allows access to the SignalLogSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Logging.SignalLog.SignalLogSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Logging.SignalLog.SignalLogSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Logging-&gt;SignalLog-&gt;SignalLogSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SignalLogSetup.html&#xA;							">SignalLogSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemLoggingSignalLogParameterCategory.SignalLogAxes">
            <summary>Allows access to the SignalLogAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Logging.SignalLog.SignalLogAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Logging.SignalLog.SignalLogAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Logging-&gt;SignalLog-&gt;SignalLogAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SignalLogAxes.html&#xA;							">SignalLogAxes</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemLoggingSignalLogParameterCategory.SignalLogTasks">
            <summary>Allows access to the SignalLogTasks Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Logging.SignalLog.SignalLogTasks;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Logging.SignalLog.SignalLogTasks

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Logging-&gt;SignalLog-&gt;SignalLogTasks;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SignalLogTasks.html&#xA;							">SignalLogTasks</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemLoggingSignalLogParameterCategory.SignalLogFaultMaskTrigger">
            <summary>Allows access to the SignalLogFaultMaskTrigger Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Logging.SignalLog.SignalLogFaultMaskTrigger;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Logging.SignalLog.SignalLogFaultMaskTrigger

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Logging-&gt;SignalLog-&gt;SignalLogFaultMaskTrigger;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SignalLogFaultMaskTrigger.html&#xA;							">SignalLogFaultMaskTrigger</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemLoggingSignalLogParameterCategory.SignalLogSamplePeriod">
            <summary>Allows access to the SignalLogSamplePeriod Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Logging.SignalLog.SignalLogSamplePeriod;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Logging.SignalLog.SignalLogSamplePeriod

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Logging-&gt;SignalLog-&gt;SignalLogSamplePeriod;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SignalLogSamplePeriod.html&#xA;							">SignalLogSamplePeriod</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemLoggingSignalLogParameterCategory.SignalLogPointsBeforeTrigger">
            <summary>Allows access to the SignalLogPointsBeforeTrigger Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Logging.SignalLog.SignalLogPointsBeforeTrigger;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Logging.SignalLog.SignalLogPointsBeforeTrigger

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Logging-&gt;SignalLog-&gt;SignalLogPointsBeforeTrigger;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SignalLogPointsBeforeTrigger.html&#xA;							">SignalLogPointsBeforeTrigger</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemLoggingSignalLogParameterCategory.SignalLogPointsAfterTrigger">
            <summary>Allows access to the SignalLogPointsAfterTrigger Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Logging.SignalLog.SignalLogPointsAfterTrigger;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Logging.SignalLog.SignalLogPointsAfterTrigger

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Logging-&gt;SignalLog-&gt;SignalLogPointsAfterTrigger;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SignalLogPointsAfterTrigger.html&#xA;							">SignalLogPointsAfterTrigger</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.SystemLoggingSignalLogParameterCategory.SignalLogItems">
            <summary>Allows access to the SignalLogItems Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.System.Logging.SignalLog.SignalLogItems;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.System.Logging.SignalLog.SignalLogItems

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;System-&gt;Logging-&gt;SignalLog-&gt;SignalLogItems;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SignalLogItems.html&#xA;							">SignalLogItems</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory">
            <summary>Contains the Autofocus Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusInput">
            <summary>Allows access to the AutofocusInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusInput.html&#xA;							">AutofocusInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusTarget">
            <summary>Allows access to the AutofocusTarget Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusTarget;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusTarget

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusTarget;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusTarget.html&#xA;							">AutofocusTarget</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusDeadband">
            <summary>Allows access to the AutofocusDeadband Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusDeadband;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusDeadband

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusDeadband;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusDeadband.html&#xA;							">AutofocusDeadband</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusGainKi">
            <summary>Allows access to the AutofocusGainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusGainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusGainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusGainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusGainKi.html&#xA;							">AutofocusGainKi</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusGainKp">
            <summary>Allows access to the AutofocusGainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusGainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusGainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusGainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusGainKp.html&#xA;							">AutofocusGainKp</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusLimitLow">
            <summary>Allows access to the AutofocusLimitLow Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusLimitLow;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusLimitLow

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusLimitLow;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusLimitLow.html&#xA;							">AutofocusLimitLow</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusLimitHigh">
            <summary>Allows access to the AutofocusLimitHigh Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusLimitHigh;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusLimitHigh

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusLimitHigh;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusLimitHigh.html&#xA;							">AutofocusLimitHigh</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusSpeedClamp">
            <summary>Allows access to the AutofocusSpeedClamp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusSpeedClamp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusSpeedClamp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusSpeedClamp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusSpeedClamp.html&#xA;							">AutofocusSpeedClamp</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusHoldInput">
            <summary>Allows access to the AutofocusHoldInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusHoldInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusHoldInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusHoldInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusHoldInput.html&#xA;							">AutofocusHoldInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusSetup">
            <summary>Allows access to the AutofocusSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusSetup.html&#xA;							">AutofocusSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusInitialRampTime">
            <summary>Allows access to the AutofocusInitialRampTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusInitialRampTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusInitialRampTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusInitialRampTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusInitialRampTime.html&#xA;							">AutofocusInitialRampTime</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisAutofocusLoopParameterCategory.AutofocusGainKi2">
            <summary>Allows access to the AutofocusGainKi2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].AutofocusLoop.AutofocusGainKi2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").AutofocusLoop.AutofocusGainKi2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;AutofocusLoop-&gt;AutofocusGainKi2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutofocusGainKi2.html&#xA;							">AutofocusGainKi2</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisCommunicationParameterCategory">
            <summary>Contains the Communication Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisCommunicationParameterCategory.DriveIPAddress">
            <summary>Allows access to the DriveIPAddress Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Communication.DriveIPAddress;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Communication.DriveIPAddress

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Communication-&gt;DriveIPAddress;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DriveIPAddress.html&#xA;							">DriveIPAddress</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisCommunicationParameterCategory.DriveSubnetMask">
            <summary>Allows access to the DriveSubnetMask Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Communication.DriveSubnetMask;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Communication.DriveSubnetMask

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Communication-&gt;DriveSubnetMask;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DriveSubnetMask.html&#xA;							">DriveSubnetMask</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisCommunicationParameterCategory.DriveDefaultGateway">
            <summary>Allows access to the DriveDefaultGateway Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Communication.DriveDefaultGateway;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Communication.DriveDefaultGateway

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Communication-&gt;DriveDefaultGateway;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DriveDefaultGateway.html&#xA;							">DriveDefaultGateway</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisCurrentLoopParameterCategory">
            <summary>Contains the Current Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisCurrentLoopParameterCategory.AmplifierDeadtime">
            <summary>Allows access to the AmplifierDeadtime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.AmplifierDeadtime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.AmplifierDeadtime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;AmplifierDeadtime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AmplifierDeadtime.html&#xA;							">AmplifierDeadtime</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisCurrentLoopParameterCategory.CurrentGainKi">
            <summary>Allows access to the CurrentGainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.CurrentGainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.CurrentGainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CurrentGainKi.html&#xA;							">CurrentGainKi</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisCurrentLoopParameterCategory.CurrentGainKp">
            <summary>Allows access to the CurrentGainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.CurrentGainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.CurrentGainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentGainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CurrentGainKp.html&#xA;							">CurrentGainKp</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisCurrentLoopParameterCategory.CurrentOffsetA">
            <summary>Allows access to the CurrentOffsetA Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.CurrentOffsetA;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.CurrentOffsetA

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentOffsetA;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CurrentOffsetA.html&#xA;							">CurrentOffsetA</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisCurrentLoopParameterCategory.CurrentOffsetB">
            <summary>Allows access to the CurrentOffsetB Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.CurrentOffsetB;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").CurrentLoop.CurrentOffsetB

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentOffsetB;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CurrentOffsetB.html&#xA;							">CurrentOffsetB</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisCurrentLoopParameterCategory.CurrentLoopSetup">
            <summary>Allows access to the CurrentLoopSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].CurrentLoop.CurrentLoopSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").CurrentLoop.CurrentLoopSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;CurrentLoop-&gt;CurrentLoopSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CurrentLoopSetup.html&#xA;							">CurrentLoopSetup</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxParameterCategory">
            <summary>Contains the Dynamic Controls Toolbox Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxParameterCategory.ThresholdGainScheduling">
            <summary>Contains the Threshold Gain Scheduling Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxParameterCategory.DynamicGainScheduling">
            <summary>Contains the Dynamic Gain Scheduling Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxParameterCategory.HarmonicCancellation">
            <summary>Contains the Harmonic Cancellation Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxParameterCategory.CommandShaping">
            <summary>Contains the Command Shaping Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxParameterCategory.CrossAxisFeedforward">
            <summary>Contains the Cross-Axis Feedforward Parameters</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory">
            <summary>Contains the Threshold Gain Scheduling Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdScheduleSetup">
            <summary>Allows access to the ThresholdScheduleSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdScheduleSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdScheduleSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdScheduleSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdScheduleSetup.html&#xA;							">ThresholdScheduleSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion2High">
            <summary>Allows access to the ThresholdRegion2High Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion2High;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion2High

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion2High;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion2High.html&#xA;							">ThresholdRegion2High</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion2Low">
            <summary>Allows access to the ThresholdRegion2Low Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion2Low;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion2Low

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion2Low;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion2Low.html&#xA;							">ThresholdRegion2Low</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion3GainKpos">
            <summary>Allows access to the ThresholdRegion3GainKpos Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKpos;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKpos

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion3GainKpos;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion3GainKpos.html&#xA;							">ThresholdRegion3GainKpos</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion3GainKp">
            <summary>Allows access to the ThresholdRegion3GainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion3GainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion3GainKp.html&#xA;							">ThresholdRegion3GainKp</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion3GainKi">
            <summary>Allows access to the ThresholdRegion3GainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion3GainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion3GainKi.html&#xA;							">ThresholdRegion3GainKi</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion3GainKpi">
            <summary>Allows access to the ThresholdRegion3GainKpi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKpi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion3GainKpi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion3GainKpi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion3GainKpi.html&#xA;							">ThresholdRegion3GainKpi</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion4High">
            <summary>Allows access to the ThresholdRegion4High Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion4High;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion4High

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion4High;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion4High.html&#xA;							">ThresholdRegion4High</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion4Low">
            <summary>Allows access to the ThresholdRegion4Low Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion4Low;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion4Low

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion4Low;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion4Low.html&#xA;							">ThresholdRegion4Low</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion5GainKpos">
            <summary>Allows access to the ThresholdRegion5GainKpos Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKpos;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKpos

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion5GainKpos;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion5GainKpos.html&#xA;							">ThresholdRegion5GainKpos</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion5GainKp">
            <summary>Allows access to the ThresholdRegion5GainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion5GainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion5GainKp.html&#xA;							">ThresholdRegion5GainKp</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion5GainKi">
            <summary>Allows access to the ThresholdRegion5GainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion5GainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion5GainKi.html&#xA;							">ThresholdRegion5GainKi</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxThresholdGainSchedulingParameterCategory.ThresholdRegion5GainKpi">
            <summary>Allows access to the ThresholdRegion5GainKpi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKpi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.ThresholdGainScheduling.ThresholdRegion5GainKpi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;ThresholdGainScheduling-&gt;ThresholdRegion5GainKpi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/ThresholdRegion5GainKpi.html&#xA;							">ThresholdRegion5GainKpi</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory">
            <summary>Contains the Dynamic Gain Scheduling Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory.DynamicScheduleSetup">
            <summary>Allows access to the DynamicScheduleSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.DynamicGainScheduling.DynamicScheduleSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.DynamicGainScheduling.DynamicScheduleSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;DynamicGainScheduling-&gt;DynamicScheduleSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/DynamicScheduleSetup.html&#xA;							">DynamicScheduleSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory.DynamicGainKposScale">
            <summary>Allows access to the DynamicGainKposScale Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKposScale;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKposScale

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;DynamicGainScheduling-&gt;DynamicGainKposScale;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/DynamicGainKposScale.html&#xA;							">DynamicGainKposScale</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory.DynamicGainKpScale">
            <summary>Allows access to the DynamicGainKpScale Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKpScale;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKpScale

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;DynamicGainScheduling-&gt;DynamicGainKpScale;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/DynamicGainKpScale.html&#xA;							">DynamicGainKpScale</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxDynamicGainSchedulingParameterCategory.DynamicGainKiScale">
            <summary>Allows access to the DynamicGainKiScale Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKiScale;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.DynamicGainScheduling.DynamicGainKiScale

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;DynamicGainScheduling-&gt;DynamicGainKiScale;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/DynamicGainKiScale.html&#xA;							">DynamicGainKiScale</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory">
            <summary>Contains the Harmonic Cancellation Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation0Type">
            <summary>Allows access to the HarmonicCancellation0Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation0Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation0Type.html&#xA;							">HarmonicCancellation0Type</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation0Period">
            <summary>Allows access to the HarmonicCancellation0Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation0Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation0Period.html&#xA;							">HarmonicCancellation0Period</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation0Channel">
            <summary>Allows access to the HarmonicCancellation0Channel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Channel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Channel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation0Channel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation0Channel.html&#xA;							">HarmonicCancellation0Channel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation0Gain">
            <summary>Allows access to the HarmonicCancellation0Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation0Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation0Gain.html&#xA;							">HarmonicCancellation0Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation0Phase">
            <summary>Allows access to the HarmonicCancellation0Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation0Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation0Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation0Phase.html&#xA;							">HarmonicCancellation0Phase</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation1Type">
            <summary>Allows access to the HarmonicCancellation1Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation1Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation1Type.html&#xA;							">HarmonicCancellation1Type</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation1Period">
            <summary>Allows access to the HarmonicCancellation1Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation1Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation1Period.html&#xA;							">HarmonicCancellation1Period</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation1Channel">
            <summary>Allows access to the HarmonicCancellation1Channel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Channel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Channel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation1Channel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation1Channel.html&#xA;							">HarmonicCancellation1Channel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation1Gain">
            <summary>Allows access to the HarmonicCancellation1Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation1Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation1Gain.html&#xA;							">HarmonicCancellation1Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation1Phase">
            <summary>Allows access to the HarmonicCancellation1Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation1Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation1Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation1Phase.html&#xA;							">HarmonicCancellation1Phase</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation2Type">
            <summary>Allows access to the HarmonicCancellation2Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation2Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation2Type.html&#xA;							">HarmonicCancellation2Type</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation2Period">
            <summary>Allows access to the HarmonicCancellation2Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation2Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation2Period.html&#xA;							">HarmonicCancellation2Period</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation2Channel">
            <summary>Allows access to the HarmonicCancellation2Channel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Channel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Channel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation2Channel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation2Channel.html&#xA;							">HarmonicCancellation2Channel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation2Gain">
            <summary>Allows access to the HarmonicCancellation2Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation2Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation2Gain.html&#xA;							">HarmonicCancellation2Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation2Phase">
            <summary>Allows access to the HarmonicCancellation2Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation2Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation2Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation2Phase.html&#xA;							">HarmonicCancellation2Phase</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation3Type">
            <summary>Allows access to the HarmonicCancellation3Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation3Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation3Type.html&#xA;							">HarmonicCancellation3Type</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation3Period">
            <summary>Allows access to the HarmonicCancellation3Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation3Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation3Period.html&#xA;							">HarmonicCancellation3Period</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation3Channel">
            <summary>Allows access to the HarmonicCancellation3Channel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Channel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Channel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation3Channel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation3Channel.html&#xA;							">HarmonicCancellation3Channel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation3Gain">
            <summary>Allows access to the HarmonicCancellation3Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation3Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation3Gain.html&#xA;							">HarmonicCancellation3Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation3Phase">
            <summary>Allows access to the HarmonicCancellation3Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation3Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation3Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation3Phase.html&#xA;							">HarmonicCancellation3Phase</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation4Type">
            <summary>Allows access to the HarmonicCancellation4Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation4Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation4Type.html&#xA;							">HarmonicCancellation4Type</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation4Period">
            <summary>Allows access to the HarmonicCancellation4Period Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Period;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Period

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation4Period;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation4Period.html&#xA;							">HarmonicCancellation4Period</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation4Channel">
            <summary>Allows access to the HarmonicCancellation4Channel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Channel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Channel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation4Channel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation4Channel.html&#xA;							">HarmonicCancellation4Channel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation4Gain">
            <summary>Allows access to the HarmonicCancellation4Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation4Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation4Gain.html&#xA;							">HarmonicCancellation4Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellation4Phase">
            <summary>Allows access to the HarmonicCancellation4Phase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Phase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellation4Phase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellation4Phase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellation4Phase.html&#xA;							">HarmonicCancellation4Phase</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxHarmonicCancellationParameterCategory.HarmonicCancellationSetup">
            <summary>Allows access to the HarmonicCancellationSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellationSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.HarmonicCancellation.HarmonicCancellationSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;HarmonicCancellation-&gt;HarmonicCancellationSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/HarmonicCancellationSetup.html&#xA;							">HarmonicCancellationSetup</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory">
            <summary>Contains the Command Shaping Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperSetup">
            <summary>Allows access to the CommandShaperSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperSetup.html&#xA;							">CommandShaperSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime00">
            <summary>Allows access to the CommandShaperTime00 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime00;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime00

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime00;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime00.html&#xA;							">CommandShaperTime00</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime01">
            <summary>Allows access to the CommandShaperTime01 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime01;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime01

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime01;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime01.html&#xA;							">CommandShaperTime01</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime02">
            <summary>Allows access to the CommandShaperTime02 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime02;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime02

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime02;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime02.html&#xA;							">CommandShaperTime02</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime03">
            <summary>Allows access to the CommandShaperTime03 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime03;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime03

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime03;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime03.html&#xA;							">CommandShaperTime03</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime04">
            <summary>Allows access to the CommandShaperTime04 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime04;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime04

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime04;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime04.html&#xA;							">CommandShaperTime04</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime05">
            <summary>Allows access to the CommandShaperTime05 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime05;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime05

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime05;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime05.html&#xA;							">CommandShaperTime05</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime06">
            <summary>Allows access to the CommandShaperTime06 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime06;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime06

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime06;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime06.html&#xA;							">CommandShaperTime06</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime07">
            <summary>Allows access to the CommandShaperTime07 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime07;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime07

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime07;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime07.html&#xA;							">CommandShaperTime07</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime08">
            <summary>Allows access to the CommandShaperTime08 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime08;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime08

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime08;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime08.html&#xA;							">CommandShaperTime08</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime09">
            <summary>Allows access to the CommandShaperTime09 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime09;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime09

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime09;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime09.html&#xA;							">CommandShaperTime09</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime10">
            <summary>Allows access to the CommandShaperTime10 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime10;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime10

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime10;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime10.html&#xA;							">CommandShaperTime10</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime11">
            <summary>Allows access to the CommandShaperTime11 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime11;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime11

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime11;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime11.html&#xA;							">CommandShaperTime11</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime12">
            <summary>Allows access to the CommandShaperTime12 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime12;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime12

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime12;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime12.html&#xA;							">CommandShaperTime12</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime13">
            <summary>Allows access to the CommandShaperTime13 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime13;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime13

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime13;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime13.html&#xA;							">CommandShaperTime13</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime14">
            <summary>Allows access to the CommandShaperTime14 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime14;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime14

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime14;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime14.html&#xA;							">CommandShaperTime14</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperTime15">
            <summary>Allows access to the CommandShaperTime15 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperTime15;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperTime15

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperTime15;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperTime15.html&#xA;							">CommandShaperTime15</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff00">
            <summary>Allows access to the CommandShaperCoeff00 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff00;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff00

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff00;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff00.html&#xA;							">CommandShaperCoeff00</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff01">
            <summary>Allows access to the CommandShaperCoeff01 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff01;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff01

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff01;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff01.html&#xA;							">CommandShaperCoeff01</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff02">
            <summary>Allows access to the CommandShaperCoeff02 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff02;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff02

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff02;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff02.html&#xA;							">CommandShaperCoeff02</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff03">
            <summary>Allows access to the CommandShaperCoeff03 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff03;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff03

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff03;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff03.html&#xA;							">CommandShaperCoeff03</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff04">
            <summary>Allows access to the CommandShaperCoeff04 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff04;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff04

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff04;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff04.html&#xA;							">CommandShaperCoeff04</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff05">
            <summary>Allows access to the CommandShaperCoeff05 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff05;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff05

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff05;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff05.html&#xA;							">CommandShaperCoeff05</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff06">
            <summary>Allows access to the CommandShaperCoeff06 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff06;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff06

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff06;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff06.html&#xA;							">CommandShaperCoeff06</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff07">
            <summary>Allows access to the CommandShaperCoeff07 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff07;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff07

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff07;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff07.html&#xA;							">CommandShaperCoeff07</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff08">
            <summary>Allows access to the CommandShaperCoeff08 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff08;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff08

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff08;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff08.html&#xA;							">CommandShaperCoeff08</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff09">
            <summary>Allows access to the CommandShaperCoeff09 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff09;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff09

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff09;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff09.html&#xA;							">CommandShaperCoeff09</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff10">
            <summary>Allows access to the CommandShaperCoeff10 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff10;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff10

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff10;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff10.html&#xA;							">CommandShaperCoeff10</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff11">
            <summary>Allows access to the CommandShaperCoeff11 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff11;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff11

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff11;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff11.html&#xA;							">CommandShaperCoeff11</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff12">
            <summary>Allows access to the CommandShaperCoeff12 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff12;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff12

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff12;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff12.html&#xA;							">CommandShaperCoeff12</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff13">
            <summary>Allows access to the CommandShaperCoeff13 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff13;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff13

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff13;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff13.html&#xA;							">CommandShaperCoeff13</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff14">
            <summary>Allows access to the CommandShaperCoeff14 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff14;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff14

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff14;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff14.html&#xA;							">CommandShaperCoeff14</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaperCoeff15">
            <summary>Allows access to the CommandShaperCoeff15 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaperCoeff15;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaperCoeff15

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaperCoeff15;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaperCoeff15.html&#xA;							">CommandShaperCoeff15</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper0Type">
            <summary>Allows access to the CommandShaper0Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper0Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper0Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper0Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaper0Type.html&#xA;							">CommandShaper0Type</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper0Frequency">
            <summary>Allows access to the CommandShaper0Frequency Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper0Frequency;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper0Frequency

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper0Frequency;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaper0Frequency.html&#xA;							">CommandShaper0Frequency</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper0Damping">
            <summary>Allows access to the CommandShaper0Damping Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper0Damping;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper0Damping

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper0Damping;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaper0Damping.html&#xA;							">CommandShaper0Damping</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper1Type">
            <summary>Allows access to the CommandShaper1Type Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper1Type;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper1Type

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper1Type;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaper1Type.html&#xA;							">CommandShaper1Type</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper1Frequency">
            <summary>Allows access to the CommandShaper1Frequency Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper1Frequency;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper1Frequency

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper1Frequency;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaper1Frequency.html&#xA;							">CommandShaper1Frequency</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCommandShapingParameterCategory.CommandShaper1Damping">
            <summary>Allows access to the CommandShaper1Damping Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CommandShaping.CommandShaper1Damping;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").DynamicControlsToolbox.CommandShaping.CommandShaper1Damping

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CommandShaping-&gt;CommandShaper1Damping;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CommandShaper1Damping.html&#xA;							">CommandShaper1Damping</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory">
            <summary>Contains the Cross-Axis Feedforward Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward00Axis">
            <summary>Allows access to the CrossAxisFeedforward00Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward00Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward00Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward00Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward00Axis.html&#xA;							">CrossAxisFeedforward00Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward01Axis">
            <summary>Allows access to the CrossAxisFeedforward01Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward01Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward01Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward01Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward01Axis.html&#xA;							">CrossAxisFeedforward01Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward02Axis">
            <summary>Allows access to the CrossAxisFeedforward02Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward02Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward02Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward02Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward02Axis.html&#xA;							">CrossAxisFeedforward02Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward03Axis">
            <summary>Allows access to the CrossAxisFeedforward03Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward03Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward03Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward03Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward03Axis.html&#xA;							">CrossAxisFeedforward03Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward04Axis">
            <summary>Allows access to the CrossAxisFeedforward04Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward04Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward04Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward04Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward04Axis.html&#xA;							">CrossAxisFeedforward04Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward05Axis">
            <summary>Allows access to the CrossAxisFeedforward05Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward05Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward05Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward05Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward05Axis.html&#xA;							">CrossAxisFeedforward05Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward00Gain">
            <summary>Allows access to the CrossAxisFeedforward00Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward00Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward00Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward00Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward00Gain.html&#xA;							">CrossAxisFeedforward00Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward01Gain">
            <summary>Allows access to the CrossAxisFeedforward01Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward01Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward01Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward01Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward01Gain.html&#xA;							">CrossAxisFeedforward01Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward02Gain">
            <summary>Allows access to the CrossAxisFeedforward02Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward02Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward02Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward02Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward02Gain.html&#xA;							">CrossAxisFeedforward02Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward03Gain">
            <summary>Allows access to the CrossAxisFeedforward03Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward03Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward03Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward03Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward03Gain.html&#xA;							">CrossAxisFeedforward03Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward04Gain">
            <summary>Allows access to the CrossAxisFeedforward04Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward04Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward04Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward04Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward04Gain.html&#xA;							">CrossAxisFeedforward04Gain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisDynamicControlsToolboxCrossAxisFeedforwardParameterCategory.CrossAxisFeedforward05Gain">
            <summary>Allows access to the CrossAxisFeedforward05Gain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward05Gain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").DynamicControlsToolbox.CrossAxisFeedforward.CrossAxisFeedforward05Gain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;DynamicControlsToolbox-&gt;CrossAxisFeedforward-&gt;CrossAxisFeedforward05Gain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								DCToolbox.chm::/Parameters/CrossAxisFeedforward05Gain.html&#xA;							">CrossAxisFeedforward05Gain</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisEnhancedThroughputModuleParameterCategory">
            <summary>Contains the Enhanced Throughput Module Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisEnhancedThroughputModuleParameterCategory.EnhancedThroughputChannel">
            <summary>Allows access to the EnhancedThroughputChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].EnhancedThroughputModule.EnhancedThroughputChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").EnhancedThroughputModule.EnhancedThroughputChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedThroughputModule-&gt;EnhancedThroughputChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								ETModule.chm::/Parameters/EnhancedThroughputChannel.html&#xA;							">EnhancedThroughputChannel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisEnhancedThroughputModuleParameterCategory.EnhancedThroughputGain">
            <summary>Allows access to the EnhancedThroughputGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].EnhancedThroughputModule.EnhancedThroughputGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").EnhancedThroughputModule.EnhancedThroughputGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedThroughputModule-&gt;EnhancedThroughputGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								ETModule.chm::/Parameters/EnhancedThroughputGain.html&#xA;							">EnhancedThroughputGain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisEnhancedThroughputModuleParameterCategory.EnhancedThroughputCurrentClamp">
            <summary>Allows access to the EnhancedThroughputCurrentClamp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].EnhancedThroughputModule.EnhancedThroughputCurrentClamp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").EnhancedThroughputModule.EnhancedThroughputCurrentClamp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedThroughputModule-&gt;EnhancedThroughputCurrentClamp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								ETModule.chm::/Parameters/EnhancedThroughputCurrentClamp.html&#xA;							">EnhancedThroughputCurrentClamp</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisEnhancedTrackingControlParameterCategory">
            <summary>Contains the Enhanced Tracking Control Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisEnhancedTrackingControlParameterCategory.EnhancedTrackingScale">
            <summary>Allows access to the EnhancedTrackingScale Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].EnhancedTrackingControl.EnhancedTrackingScale;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").EnhancedTrackingControl.EnhancedTrackingScale

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedTrackingControl-&gt;EnhancedTrackingScale;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								ETControl_.chm::/Parameters/EnhancedTrackingScale.html&#xA;							">EnhancedTrackingScale</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisEnhancedTrackingControlParameterCategory.EnhancedTrackingBandwidth">
            <summary>Allows access to the EnhancedTrackingBandwidth Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].EnhancedTrackingControl.EnhancedTrackingBandwidth;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").EnhancedTrackingControl.EnhancedTrackingBandwidth

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedTrackingControl-&gt;EnhancedTrackingBandwidth;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								ETControl_.chm::/Parameters/EnhancedTrackingBandwidth.html&#xA;							">EnhancedTrackingBandwidth</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisEnhancedTrackingControlParameterCategory.EnhancedTrackingSetup">
            <summary>Allows access to the EnhancedTrackingSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].EnhancedTrackingControl.EnhancedTrackingSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").EnhancedTrackingControl.EnhancedTrackingSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;EnhancedTrackingControl-&gt;EnhancedTrackingSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								ETControl_.chm::/Parameters/EnhancedTrackingSetup.html&#xA;							">EnhancedTrackingSetup</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFaultParameterCategory">
            <summary>Contains the Fault Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultParameterCategory.Inputs">
            <summary>Contains the Inputs Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultParameterCategory.Outputs">
            <summary>Contains the Outputs Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultParameterCategory.Thresholds">
            <summary>Contains the Thresholds Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultParameterCategory.FaultMask">
            <summary>Allows access to the FaultMask Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultMask;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultMask

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultMask;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultMask.html&#xA;							">FaultMask</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultParameterCategory.FaultMaskDisable">
            <summary>Allows access to the FaultMaskDisable Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultMaskDisable;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultMaskDisable

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultMaskDisable;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultMaskDisable.html&#xA;							">FaultMaskDisable</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultParameterCategory.FaultMaskDecel">
            <summary>Allows access to the FaultMaskDecel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultMaskDecel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultMaskDecel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultMaskDecel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultMaskDecel.html&#xA;							">FaultMaskDecel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultParameterCategory.FaultMaskDisableDelay">
            <summary>Allows access to the FaultMaskDisableDelay Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultMaskDisableDelay;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultMaskDisableDelay

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultMaskDisableDelay;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultMaskDisableDelay.html&#xA;							">FaultMaskDisableDelay</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultParameterCategory.FaultAbortAxes">
            <summary>Allows access to the FaultAbortAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultAbortAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultAbortAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultAbortAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultAbortAxes.html&#xA;							">FaultAbortAxes</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultParameterCategory.FaultSetup">
            <summary>Allows access to the FaultSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.FaultSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.FaultSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;FaultSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultSetup.html&#xA;							">FaultSetup</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFaultInputsParameterCategory">
            <summary>Contains the Inputs Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultInputsParameterCategory.ESTOPFaultInput">
            <summary>Allows access to the ESTOPFaultInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Inputs.ESTOPFaultInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Inputs.ESTOPFaultInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Inputs-&gt;ESTOPFaultInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ESTOPFaultInput.html&#xA;							">ESTOPFaultInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultInputsParameterCategory.ExternalFaultDigitalInput">
            <summary>Allows access to the ExternalFaultDigitalInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Inputs.ExternalFaultDigitalInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Inputs.ExternalFaultDigitalInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Inputs-&gt;ExternalFaultDigitalInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ExternalFaultDigitalInput.html&#xA;							">ExternalFaultDigitalInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultInputsParameterCategory.ExternalFaultAnalogInput">
            <summary>Allows access to the ExternalFaultAnalogInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Inputs.ExternalFaultAnalogInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Inputs.ExternalFaultAnalogInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Inputs-&gt;ExternalFaultAnalogInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ExternalFaultAnalogInput.html&#xA;							">ExternalFaultAnalogInput</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFaultOutputsParameterCategory">
            <summary>Contains the Outputs Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultOutputsParameterCategory.FaultMaskOutput">
            <summary>Allows access to the FaultMaskOutput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Outputs.FaultMaskOutput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Outputs.FaultMaskOutput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Outputs-&gt;FaultMaskOutput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultMaskOutput.html&#xA;							">FaultMaskOutput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultOutputsParameterCategory.FaultOutputSetup">
            <summary>Allows access to the FaultOutputSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Outputs.FaultOutputSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Outputs.FaultOutputSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Outputs-&gt;FaultOutputSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultOutputSetup.html&#xA;							">FaultOutputSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultOutputsParameterCategory.FaultOutputState">
            <summary>Allows access to the FaultOutputState Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Outputs.FaultOutputState;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Outputs.FaultOutputState

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Outputs-&gt;FaultOutputState;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FaultOutputState.html&#xA;							">FaultOutputState</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory">
            <summary>Contains the Thresholds Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory.PositionErrorThreshold">
            <summary>Allows access to the PositionErrorThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.PositionErrorThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.PositionErrorThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;PositionErrorThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PositionErrorThreshold.html&#xA;							">PositionErrorThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory.AverageCurrentThreshold">
            <summary>Allows access to the AverageCurrentThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.AverageCurrentThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Fault.Thresholds.AverageCurrentThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;AverageCurrentThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AverageCurrentThreshold.html&#xA;							">AverageCurrentThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory.AverageCurrentTime">
            <summary>Allows access to the AverageCurrentTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.AverageCurrentTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Fault.Thresholds.AverageCurrentTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;AverageCurrentTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AverageCurrentTime.html&#xA;							">AverageCurrentTime</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory.VelocityCommandThreshold">
            <summary>Allows access to the VelocityCommandThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.VelocityCommandThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.VelocityCommandThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;VelocityCommandThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/VelocityCommandThreshold.html&#xA;							">VelocityCommandThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory.VelocityErrorThreshold">
            <summary>Allows access to the VelocityErrorThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.VelocityErrorThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.VelocityErrorThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;VelocityErrorThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/VelocityErrorThreshold.html&#xA;							">VelocityErrorThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory.GantrySeparationThreshold">
            <summary>Allows access to the GantrySeparationThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.GantrySeparationThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Fault.Thresholds.GantrySeparationThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;GantrySeparationThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GantrySeparationThreshold.html&#xA;							">GantrySeparationThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory.ExternalFaultThreshold">
            <summary>Allows access to the ExternalFaultThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.ExternalFaultThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Fault.Thresholds.ExternalFaultThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;ExternalFaultThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ExternalFaultThreshold.html&#xA;							">ExternalFaultThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory.MarkerSearchThreshold">
            <summary>Allows access to the MarkerSearchThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.MarkerSearchThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.MarkerSearchThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;MarkerSearchThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MarkerSearchThreshold.html&#xA;							">MarkerSearchThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFaultThresholdsParameterCategory.VelocityCommandThresholdBeforeHome">
            <summary>Allows access to the VelocityCommandThresholdBeforeHome Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Fault.Thresholds.VelocityCommandThresholdBeforeHome;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Fault.Thresholds.VelocityCommandThresholdBeforeHome

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Fault-&gt;Thresholds-&gt;VelocityCommandThresholdBeforeHome;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/VelocityCommandThresholdBeforeHome.html&#xA;							">VelocityCommandThresholdBeforeHome</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory">
            <summary>Contains the Feedback Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.EnDatEncoder">
            <summary>Contains the EnDat Encoder Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.Multiplier">
            <summary>Contains the Multiplier Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.ResoluteEncoder">
            <summary>Contains the Resolute Encoder Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.Resolver">
            <summary>Contains the Resolver Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.CapSensor">
            <summary>Contains the Cap Sensor Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.PositionFeedbackType">
            <summary>Allows access to the PositionFeedbackType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.PositionFeedbackType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.PositionFeedbackType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PositionFeedbackType.html&#xA;							">PositionFeedbackType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.PositionFeedbackChannel">
            <summary>Allows access to the PositionFeedbackChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.PositionFeedbackChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.PositionFeedbackChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionFeedbackChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PositionFeedbackChannel.html&#xA;							">PositionFeedbackChannel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.VelocityFeedbackType">
            <summary>Allows access to the VelocityFeedbackType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.VelocityFeedbackType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.VelocityFeedbackType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;VelocityFeedbackType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/VelocityFeedbackType.html&#xA;							">VelocityFeedbackType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.VelocityFeedbackChannel">
            <summary>Allows access to the VelocityFeedbackChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.VelocityFeedbackChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.VelocityFeedbackChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;VelocityFeedbackChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/VelocityFeedbackChannel.html&#xA;							">VelocityFeedbackChannel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.FeedbackSetup">
            <summary>Allows access to the FeedbackSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.FeedbackSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.FeedbackSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;FeedbackSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FeedbackSetup.html&#xA;							">FeedbackSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.PositionAveragingChannel">
            <summary>Allows access to the PositionAveragingChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.PositionAveragingChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.PositionAveragingChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;PositionAveragingChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PositionAveragingChannel.html&#xA;							">PositionAveragingChannel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackParameterCategory.AbsoluteFeedbackOffset">
            <summary>Allows access to the AbsoluteFeedbackOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Feedback.AbsoluteFeedbackOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Feedback.AbsoluteFeedbackOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;AbsoluteFeedbackOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AbsoluteFeedbackOffset.html&#xA;							">AbsoluteFeedbackOffset</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFeedbackEnDatEncoderParameterCategory">
            <summary>Contains the EnDat Encoder Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackEnDatEncoderParameterCategory.EnDatEncoderSetup">
            <summary>Allows access to the EnDatEncoderSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.EnDatEncoder.EnDatEncoderSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.EnDatEncoder.EnDatEncoderSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;EnDatEncoder-&gt;EnDatEncoderSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EnDatEncoderSetup.html&#xA;							">EnDatEncoderSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackEnDatEncoderParameterCategory.EnDatEncoderResolution">
            <summary>Allows access to the EnDatEncoderResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.EnDatEncoder.EnDatEncoderResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.EnDatEncoder.EnDatEncoderResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;EnDatEncoder-&gt;EnDatEncoderResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EnDatEncoderResolution.html&#xA;							">EnDatEncoderResolution</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackEnDatEncoderParameterCategory.EnDatEncoderTurns">
            <summary>Allows access to the EnDatEncoderTurns Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.EnDatEncoder.EnDatEncoderTurns;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.EnDatEncoder.EnDatEncoderTurns

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;EnDatEncoder-&gt;EnDatEncoderTurns;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EnDatEncoderTurns.html&#xA;							">EnDatEncoderTurns</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackEnDatEncoderParameterCategory.EnDatEncoderIncrementalResolution">
            <summary>Allows access to the EnDatEncoderIncrementalResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.EnDatEncoder.EnDatEncoderIncrementalResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.EnDatEncoder.EnDatEncoderIncrementalResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;EnDatEncoder-&gt;EnDatEncoderIncrementalResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EnDatEncoderIncrementalResolution.html&#xA;							">EnDatEncoderIncrementalResolution</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory">
            <summary>Contains the Multiplier Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderMultiplicationFactor">
            <summary>Allows access to the EncoderMultiplicationFactor Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderMultiplicationFactor;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderMultiplicationFactor

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderMultiplicationFactor;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderMultiplicationFactor.html&#xA;							">EncoderMultiplicationFactor</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderSineGain">
            <summary>Allows access to the EncoderSineGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderSineGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderSineGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderSineGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderSineGain.html&#xA;							">EncoderSineGain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderSineOffset">
            <summary>Allows access to the EncoderSineOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderSineOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderSineOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderSineOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderSineOffset.html&#xA;							">EncoderSineOffset</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderCosineGain">
            <summary>Allows access to the EncoderCosineGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderCosineGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderCosineGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderCosineGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderCosineGain.html&#xA;							">EncoderCosineGain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderCosineOffset">
            <summary>Allows access to the EncoderCosineOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderCosineOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderCosineOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderCosineOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderCosineOffset.html&#xA;							">EncoderCosineOffset</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderPhase">
            <summary>Allows access to the EncoderPhase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderPhase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderPhase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderPhase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderPhase.html&#xA;							">EncoderPhase</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EmulatedQuadratureDivider">
            <summary>Allows access to the EmulatedQuadratureDivider Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EmulatedQuadratureDivider;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Feedback.Multiplier.EmulatedQuadratureDivider

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EmulatedQuadratureDivider;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EmulatedQuadratureDivider.html&#xA;							">EmulatedQuadratureDivider</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderMultiplierSetup">
            <summary>Allows access to the EncoderMultiplierSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderMultiplierSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderMultiplierSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderMultiplierSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderMultiplierSetup.html&#xA;							">EncoderMultiplierSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EmulatedQuadratureChannel">
            <summary>Allows access to the EmulatedQuadratureChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EmulatedQuadratureChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EmulatedQuadratureChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EmulatedQuadratureChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EmulatedQuadratureChannel.html&#xA;							">EmulatedQuadratureChannel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderTrackingSensitivity">
            <summary>Allows access to the EncoderTrackingSensitivity Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderTrackingSensitivity;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderTrackingSensitivity

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderTrackingSensitivity;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderTrackingSensitivity.html&#xA;							">EncoderTrackingSensitivity</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.SecondaryEncoderSineGain">
            <summary>Allows access to the SecondaryEncoderSineGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.SecondaryEncoderSineGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.SecondaryEncoderSineGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;SecondaryEncoderSineGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SecondaryEncoderSineGain.html&#xA;							">SecondaryEncoderSineGain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.SecondaryEncoderSineOffset">
            <summary>Allows access to the SecondaryEncoderSineOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.SecondaryEncoderSineOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.SecondaryEncoderSineOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;SecondaryEncoderSineOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SecondaryEncoderSineOffset.html&#xA;							">SecondaryEncoderSineOffset</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.SecondaryEncoderCosineGain">
            <summary>Allows access to the SecondaryEncoderCosineGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.SecondaryEncoderCosineGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.SecondaryEncoderCosineGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;SecondaryEncoderCosineGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SecondaryEncoderCosineGain.html&#xA;							">SecondaryEncoderCosineGain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.SecondaryEncoderCosineOffset">
            <summary>Allows access to the SecondaryEncoderCosineOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.SecondaryEncoderCosineOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.SecondaryEncoderCosineOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;SecondaryEncoderCosineOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SecondaryEncoderCosineOffset.html&#xA;							">SecondaryEncoderCosineOffset</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.SecondaryEncoderPhase">
            <summary>Allows access to the SecondaryEncoderPhase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.SecondaryEncoderPhase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.SecondaryEncoderPhase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;SecondaryEncoderPhase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SecondaryEncoderPhase.html&#xA;							">SecondaryEncoderPhase</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderMarkerAlignment">
            <summary>Allows access to the EncoderMarkerAlignment Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderMarkerAlignment;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderMarkerAlignment

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderMarkerAlignment;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderMarkerAlignment.html&#xA;							">EncoderMarkerAlignment</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderRadiusThresholdLow">
            <summary>Allows access to the EncoderRadiusThresholdLow Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderRadiusThresholdLow;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderRadiusThresholdLow

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderRadiusThresholdLow;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderRadiusThresholdLow.html&#xA;							">EncoderRadiusThresholdLow</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackMultiplierParameterCategory.EncoderRadiusThresholdHigh">
            <summary>Allows access to the EncoderRadiusThresholdHigh Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Multiplier.EncoderRadiusThresholdHigh;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Multiplier.EncoderRadiusThresholdHigh

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Multiplier-&gt;EncoderRadiusThresholdHigh;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderRadiusThresholdHigh.html&#xA;							">EncoderRadiusThresholdHigh</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFeedbackResoluteEncoderParameterCategory">
            <summary>Contains the Resolute Encoder Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackResoluteEncoderParameterCategory.ResoluteEncoderSetup">
            <summary>Allows access to the ResoluteEncoderSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.ResoluteEncoder.ResoluteEncoderSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.ResoluteEncoder.ResoluteEncoderSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;ResoluteEncoder-&gt;ResoluteEncoderSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ResoluteEncoderSetup.html&#xA;							">ResoluteEncoderSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackResoluteEncoderParameterCategory.ResoluteEncoderResolution">
            <summary>Allows access to the ResoluteEncoderResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.ResoluteEncoder.ResoluteEncoderResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.ResoluteEncoder.ResoluteEncoderResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;ResoluteEncoder-&gt;ResoluteEncoderResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ResoluteEncoderResolution.html&#xA;							">ResoluteEncoderResolution</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackResoluteEncoderParameterCategory.ResoluteEncoderUserResolution">
            <summary>Allows access to the ResoluteEncoderUserResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.ResoluteEncoder.ResoluteEncoderUserResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.ResoluteEncoder.ResoluteEncoderUserResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;ResoluteEncoder-&gt;ResoluteEncoderUserResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ResoluteEncoderUserResolution.html&#xA;							">ResoluteEncoderUserResolution</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFeedbackResolverParameterCategory">
            <summary>Contains the Resolver Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackResolverParameterCategory.ResolverReferenceGain">
            <summary>Allows access to the ResolverReferenceGain Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverReferenceGain;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverReferenceGain

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverReferenceGain;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ResolverReferenceGain.html&#xA;							">ResolverReferenceGain</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackResolverParameterCategory.ResolverSetup">
            <summary>Allows access to the ResolverSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ResolverSetup.html&#xA;							">ResolverSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackResolverParameterCategory.ResolverReferencePhase">
            <summary>Allows access to the ResolverReferencePhase Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverReferencePhase;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverReferencePhase

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverReferencePhase;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ResolverReferencePhase.html&#xA;							">ResolverReferencePhase</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackResolverParameterCategory.ResolverCoarseChannel">
            <summary>Allows access to the ResolverCoarseChannel Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverCoarseChannel;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverCoarseChannel

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverCoarseChannel;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ResolverCoarseChannel.html&#xA;							">ResolverCoarseChannel</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackResolverParameterCategory.ResolverFeedbackRatio">
            <summary>Allows access to the ResolverFeedbackRatio Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverFeedbackRatio;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverFeedbackRatio

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverFeedbackRatio;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ResolverFeedbackRatio.html&#xA;							">ResolverFeedbackRatio</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackResolverParameterCategory.ResolverFeedbackOffset">
            <summary>Allows access to the ResolverFeedbackOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.Resolver.ResolverFeedbackOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.Resolver.ResolverFeedbackOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;Resolver-&gt;ResolverFeedbackOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ResolverFeedbackOffset.html&#xA;							">ResolverFeedbackOffset</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisFeedbackCapSensorParameterCategory">
            <summary>Contains the Cap Sensor Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackCapSensorParameterCategory.CapSensorFilterLength">
            <summary>Allows access to the CapSensorFilterLength Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.CapSensor.CapSensorFilterLength;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.CapSensor.CapSensorFilterLength

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;CapSensor-&gt;CapSensorFilterLength;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CapSensorFilterLength.html&#xA;							">CapSensorFilterLength</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackCapSensorParameterCategory.CapSensorSetup">
            <summary>Allows access to the CapSensorSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Feedback.CapSensor.CapSensorSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Feedback.CapSensor.CapSensorSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;CapSensor-&gt;CapSensorSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CapSensorSetup.html&#xA;							">CapSensorSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackCapSensorParameterCategory.CapSensorThresholdLow">
            <summary>Allows access to the CapSensorThresholdLow Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Feedback.CapSensor.CapSensorThresholdLow;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Feedback.CapSensor.CapSensorThresholdLow

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;CapSensor-&gt;CapSensorThresholdLow;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CapSensorThresholdLow.html&#xA;							">CapSensorThresholdLow</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisFeedbackCapSensorParameterCategory.CapSensorThresholdHigh">
            <summary>Allows access to the CapSensorThresholdHigh Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Feedback.CapSensor.CapSensorThresholdHigh;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Feedback.CapSensor.CapSensorThresholdHigh

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Feedback-&gt;CapSensor-&gt;CapSensorThresholdHigh;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CapSensorThresholdHigh.html&#xA;							">CapSensorThresholdHigh</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisIOParameterCategory">
            <summary>Contains the I/O Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.AnalogFilters">
            <summary>Contains the Analog Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.Brake">
            <summary>Contains the Brake Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.IOSetup">
            <summary>Allows access to the IOSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.IOSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.IOSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;IOSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/IOSetup.html&#xA;							">IOSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.EncoderDivider">
            <summary>Allows access to the EncoderDivider Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.EncoderDivider;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.EncoderDivider

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;EncoderDivider;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EncoderDivider.html&#xA;							">EncoderDivider</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.SSINet1Setup">
            <summary>Allows access to the SSINet1Setup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.SSINet1Setup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.SSINet1Setup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;SSINet1Setup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SSINet1Setup.html&#xA;							">SSINet1Setup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.SSINet2Setup">
            <summary>Allows access to the SSINet2Setup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.SSINet2Setup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.SSINet2Setup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;SSINet2Setup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SSINet2Setup.html&#xA;							">SSINet2Setup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.DriveOutputCommandDelay">
            <summary>Allows access to the DriveOutputCommandDelay Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.DriveOutputCommandDelay;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.DriveOutputCommandDelay

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;DriveOutputCommandDelay;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DriveOutputCommandDelay.html&#xA;							">DriveOutputCommandDelay</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.Analog0InputOffset">
            <summary>Allows access to the Analog0InputOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.Analog0InputOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.Analog0InputOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Analog0InputOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0InputOffset.html&#xA;							">Analog0InputOffset</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.Analog1InputOffset">
            <summary>Allows access to the Analog1InputOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.Analog1InputOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.Analog1InputOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Analog1InputOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1InputOffset.html&#xA;							">Analog1InputOffset</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.Analog2InputOffset">
            <summary>Allows access to the Analog2InputOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.Analog2InputOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.Analog2InputOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Analog2InputOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog2InputOffset.html&#xA;							">Analog2InputOffset</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOParameterCategory.Analog3InputOffset">
            <summary>Allows access to the Analog3InputOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.Analog3InputOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.Analog3InputOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Analog3InputOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog3InputOffset.html&#xA;							">Analog3InputOffset</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory">
            <summary>Contains the Analog Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffN0">
            <summary>Allows access to the Analog0Filter0CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter0CoeffN0.html&#xA;							">Analog0Filter0CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffN1">
            <summary>Allows access to the Analog0Filter0CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter0CoeffN1.html&#xA;							">Analog0Filter0CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffN2">
            <summary>Allows access to the Analog0Filter0CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter0CoeffN2.html&#xA;							">Analog0Filter0CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffD1">
            <summary>Allows access to the Analog0Filter0CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter0CoeffD1.html&#xA;							">Analog0Filter0CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter0CoeffD2">
            <summary>Allows access to the Analog0Filter0CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter0CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter0CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter0CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter0CoeffD2.html&#xA;							">Analog0Filter0CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffN0">
            <summary>Allows access to the Analog0Filter1CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter1CoeffN0.html&#xA;							">Analog0Filter1CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffN1">
            <summary>Allows access to the Analog0Filter1CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter1CoeffN1.html&#xA;							">Analog0Filter1CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffN2">
            <summary>Allows access to the Analog0Filter1CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter1CoeffN2.html&#xA;							">Analog0Filter1CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffD1">
            <summary>Allows access to the Analog0Filter1CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter1CoeffD1.html&#xA;							">Analog0Filter1CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog0Filter1CoeffD2">
            <summary>Allows access to the Analog0Filter1CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog0Filter1CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog0Filter1CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog0Filter1CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog0Filter1CoeffD2.html&#xA;							">Analog0Filter1CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffN0">
            <summary>Allows access to the Analog1Filter0CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter0CoeffN0.html&#xA;							">Analog1Filter0CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffN1">
            <summary>Allows access to the Analog1Filter0CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter0CoeffN1.html&#xA;							">Analog1Filter0CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffN2">
            <summary>Allows access to the Analog1Filter0CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter0CoeffN2.html&#xA;							">Analog1Filter0CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffD1">
            <summary>Allows access to the Analog1Filter0CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter0CoeffD1.html&#xA;							">Analog1Filter0CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter0CoeffD2">
            <summary>Allows access to the Analog1Filter0CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter0CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter0CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter0CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter0CoeffD2.html&#xA;							">Analog1Filter0CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffN0">
            <summary>Allows access to the Analog1Filter1CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter1CoeffN0.html&#xA;							">Analog1Filter1CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffN1">
            <summary>Allows access to the Analog1Filter1CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter1CoeffN1.html&#xA;							">Analog1Filter1CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffN2">
            <summary>Allows access to the Analog1Filter1CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter1CoeffN2.html&#xA;							">Analog1Filter1CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffD1">
            <summary>Allows access to the Analog1Filter1CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter1CoeffD1.html&#xA;							">Analog1Filter1CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.Analog1Filter1CoeffD2">
            <summary>Allows access to the Analog1Filter1CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.Analog1Filter1CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").IO.AnalogFilters.Analog1Filter1CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;Analog1Filter1CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Analog1Filter1CoeffD2.html&#xA;							">Analog1Filter1CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOAnalogFiltersParameterCategory.AnalogFilterSetup">
            <summary>Allows access to the AnalogFilterSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.AnalogFilters.AnalogFilterSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.AnalogFilters.AnalogFilterSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;AnalogFilters-&gt;AnalogFilterSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AnalogFilterSetup.html&#xA;							">AnalogFilterSetup</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisIOBrakeParameterCategory">
            <summary>Contains the Brake Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOBrakeParameterCategory.EnableBrakeControl">
            <summary>Allows access to the EnableBrakeControl Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.Brake.EnableBrakeControl;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.Brake.EnableBrakeControl

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Brake-&gt;EnableBrakeControl;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EnableBrakeControl.html&#xA;							">EnableBrakeControl</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOBrakeParameterCategory.BrakeOutput">
            <summary>Allows access to the BrakeOutput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.Brake.BrakeOutput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.Brake.BrakeOutput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Brake-&gt;BrakeOutput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/BrakeOutput.html&#xA;							">BrakeOutput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOBrakeParameterCategory.BrakeDisableDelay">
            <summary>Allows access to the BrakeDisableDelay Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.Brake.BrakeDisableDelay;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.Brake.BrakeDisableDelay

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Brake-&gt;BrakeDisableDelay;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/BrakeDisableDelay.html&#xA;							">BrakeDisableDelay</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisIOBrakeParameterCategory.BrakeEnableDelay">
            <summary>Allows access to the BrakeEnableDelay Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].IO.Brake.BrakeEnableDelay;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").IO.Brake.BrakeEnableDelay

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;IO-&gt;Brake-&gt;BrakeEnableDelay;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/BrakeEnableDelay.html&#xA;							">BrakeEnableDelay</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisLimitsParameterCategory">
            <summary>Contains the Limits Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisLimitsParameterCategory.SoftwareLimitLow">
            <summary>Allows access to the SoftwareLimitLow Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Limits.SoftwareLimitLow;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Limits.SoftwareLimitLow

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitLow;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SoftwareLimitLow.html&#xA;							">SoftwareLimitLow</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisLimitsParameterCategory.SoftwareLimitHigh">
            <summary>Allows access to the SoftwareLimitHigh Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Limits.SoftwareLimitHigh;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Limits.SoftwareLimitHigh

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitHigh;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SoftwareLimitHigh.html&#xA;							">SoftwareLimitHigh</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisLimitsParameterCategory.LimitDecelDistance">
            <summary>Allows access to the LimitDecelDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Limits.LimitDecelDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Limits.LimitDecelDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;LimitDecelDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/LimitDecelDistance.html&#xA;							">LimitDecelDistance</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisLimitsParameterCategory.LimitDebounceTime">
            <summary>Allows access to the LimitDebounceTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Limits.LimitDebounceTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Limits.LimitDebounceTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;LimitDebounceTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/LimitDebounceTime.html&#xA;							">LimitDebounceTime</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisLimitsParameterCategory.EndOfTravelLimitSetup">
            <summary>Allows access to the EndOfTravelLimitSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Limits.EndOfTravelLimitSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Limits.EndOfTravelLimitSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;EndOfTravelLimitSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EndOfTravelLimitSetup.html&#xA;							">EndOfTravelLimitSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisLimitsParameterCategory.LimitDebounceDistance">
            <summary>Allows access to the LimitDebounceDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Limits.LimitDebounceDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Limits.LimitDebounceDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;LimitDebounceDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/LimitDebounceDistance.html&#xA;							">LimitDebounceDistance</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisLimitsParameterCategory.SoftwareLimitSetup">
            <summary>Allows access to the SoftwareLimitSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Limits.SoftwareLimitSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Limits.SoftwareLimitSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;SoftwareLimitSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SoftwareLimitSetup.html&#xA;							">SoftwareLimitSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisLimitsParameterCategory.EndOfTravelCurrentThresholdLow">
            <summary>Allows access to the EndOfTravelCurrentThresholdLow Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Limits.EndOfTravelCurrentThresholdLow;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Limits.EndOfTravelCurrentThresholdLow

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;EndOfTravelCurrentThresholdLow;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EndOfTravelCurrentThresholdLow.html&#xA;							">EndOfTravelCurrentThresholdLow</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisLimitsParameterCategory.EndOfTravelCurrentThresholdHigh">
            <summary>Allows access to the EndOfTravelCurrentThresholdHigh Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Limits.EndOfTravelCurrentThresholdHigh;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Limits.EndOfTravelCurrentThresholdHigh

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Limits-&gt;EndOfTravelCurrentThresholdHigh;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/EndOfTravelCurrentThresholdHigh.html&#xA;							">EndOfTravelCurrentThresholdHigh</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisMotionParameterCategory">
            <summary>Contains the Motion Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.Autotune">
            <summary>Contains the Autotune Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.Filters">
            <summary>Contains the Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.Home">
            <summary>Contains the Home Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.InPosition">
            <summary>Contains the In Position Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.Stability">
            <summary>Contains the Stability Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.ReverseMotionDirection">
            <summary>Allows access to the ReverseMotionDirection Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.ReverseMotionDirection;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.ReverseMotionDirection

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;ReverseMotionDirection;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ReverseMotionDirection.html&#xA;							">ReverseMotionDirection</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.MaxJogDistance">
            <summary>Allows access to the MaxJogDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.MaxJogDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.MaxJogDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;MaxJogDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MaxJogDistance.html&#xA;							">MaxJogDistance</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.DefaultSpeed">
            <summary>Allows access to the DefaultSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.DefaultSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultSpeed.html&#xA;							">DefaultSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.DefaultRampRate">
            <summary>Allows access to the DefaultRampRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultRampRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.DefaultRampRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultRampRate.html&#xA;							">DefaultRampRate</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.AbortDecelRate">
            <summary>Allows access to the AbortDecelRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.AbortDecelRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.AbortDecelRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;AbortDecelRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AbortDecelRate.html&#xA;							">AbortDecelRate</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.MaxJogSpeed">
            <summary>Allows access to the MaxJogSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.MaxJogSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.MaxJogSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;MaxJogSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MaxJogSpeed.html&#xA;							">MaxJogSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.JoystickLowSpeed">
            <summary>Allows access to the JoystickLowSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.JoystickLowSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.JoystickLowSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;JoystickLowSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickLowSpeed.html&#xA;							">JoystickLowSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.JoystickHighSpeed">
            <summary>Allows access to the JoystickHighSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.JoystickHighSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.JoystickHighSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;JoystickHighSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickHighSpeed.html&#xA;							">JoystickHighSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.DefaultRampMode">
            <summary>Allows access to the DefaultRampMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultRampMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.DefaultRampMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultRampMode.html&#xA;							">DefaultRampMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.DefaultRampTime">
            <summary>Allows access to the DefaultRampTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultRampTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.DefaultRampTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultRampTime.html&#xA;							">DefaultRampTime</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.MaxSpeedClamp">
            <summary>Allows access to the MaxSpeedClamp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.MaxSpeedClamp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.MaxSpeedClamp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;MaxSpeedClamp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MaxSpeedClamp.html&#xA;							">MaxSpeedClamp</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.DefaultRampType">
            <summary>Allows access to the DefaultRampType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.DefaultRampType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.DefaultRampType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;DefaultRampType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultRampType.html&#xA;							">DefaultRampType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionParameterCategory.TrajectoryDecimationTime">
            <summary>Allows access to the TrajectoryDecimationTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.TrajectoryDecimationTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.TrajectoryDecimationTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;TrajectoryDecimationTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TrajectoryDecimationTime.html&#xA;							">TrajectoryDecimationTime</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisMotionAutotuneParameterCategory">
            <summary>Contains the Autotune Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionAutotuneParameterCategory.AutotuneAmplitude">
            <summary>Allows access to the AutotuneAmplitude Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Autotune.AutotuneAmplitude;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Autotune.AutotuneAmplitude

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Autotune-&gt;AutotuneAmplitude;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutotuneAmplitude.html&#xA;							">AutotuneAmplitude</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionAutotuneParameterCategory.AutotuneFrequency">
            <summary>Allows access to the AutotuneFrequency Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Autotune.AutotuneFrequency;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Autotune.AutotuneFrequency

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Autotune-&gt;AutotuneFrequency;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutotuneFrequency.html&#xA;							">AutotuneFrequency</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionAutotuneParameterCategory.AutotuneBandwidth">
            <summary>Allows access to the AutotuneBandwidth Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Autotune.AutotuneBandwidth;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Autotune.AutotuneBandwidth

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Autotune-&gt;AutotuneBandwidth;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutotuneBandwidth.html&#xA;							">AutotuneBandwidth</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionAutotuneParameterCategory.AutotunePhaseMargin">
            <summary>Allows access to the AutotunePhaseMargin Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Autotune.AutotunePhaseMargin;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Autotune.AutotunePhaseMargin

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Autotune-&gt;AutotunePhaseMargin;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutotunePhaseMargin.html&#xA;							">AutotunePhaseMargin</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisMotionFiltersParameterCategory">
            <summary>Contains the Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionFiltersParameterCategory.TrajectoryFIRFilter">
            <summary>Allows access to the TrajectoryFIRFilter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Filters.TrajectoryFIRFilter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Filters.TrajectoryFIRFilter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Filters-&gt;TrajectoryFIRFilter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TrajectoryFIRFilter.html&#xA;							">TrajectoryFIRFilter</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionFiltersParameterCategory.TrajectoryIIRFilter">
            <summary>Allows access to the TrajectoryIIRFilter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Filters.TrajectoryIIRFilter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Filters.TrajectoryIIRFilter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Filters-&gt;TrajectoryIIRFilter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TrajectoryIIRFilter.html&#xA;							">TrajectoryIIRFilter</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionFiltersParameterCategory.CalibrationIIRFilter">
            <summary>Allows access to the CalibrationIIRFilter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Filters.CalibrationIIRFilter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Filters.CalibrationIIRFilter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Filters-&gt;CalibrationIIRFilter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CalibrationIIRFilter.html&#xA;							">CalibrationIIRFilter</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionFiltersParameterCategory.BacklashIIRFilter">
            <summary>Allows access to the BacklashIIRFilter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Filters.BacklashIIRFilter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Filters.BacklashIIRFilter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Filters-&gt;BacklashIIRFilter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/BacklashIIRFilter.html&#xA;							">BacklashIIRFilter</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionFiltersParameterCategory.TrajectoryDelayFilter">
            <summary>Allows access to the TrajectoryDelayFilter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Filters.TrajectoryDelayFilter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Filters.TrajectoryDelayFilter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Filters-&gt;TrajectoryDelayFilter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TrajectoryDelayFilter.html&#xA;							">TrajectoryDelayFilter</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisMotionHomeParameterCategory">
            <summary>Contains the Home Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionHomeParameterCategory.HomeType">
            <summary>Allows access to the HomeType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Home.HomeType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/HomeType.html&#xA;							">HomeType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionHomeParameterCategory.HomeSetup">
            <summary>Allows access to the HomeSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Home.HomeSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/HomeSetup.html&#xA;							">HomeSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionHomeParameterCategory.HomeSpeed">
            <summary>Allows access to the HomeSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Home.HomeSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/HomeSpeed.html&#xA;							">HomeSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionHomeParameterCategory.HomeOffset">
            <summary>Allows access to the HomeOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Home.HomeOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/HomeOffset.html&#xA;							">HomeOffset</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionHomeParameterCategory.HomeRampRate">
            <summary>Allows access to the HomeRampRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomeRampRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Home.HomeRampRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomeRampRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/HomeRampRate.html&#xA;							">HomeRampRate</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionHomeParameterCategory.HomePositionSet">
            <summary>Allows access to the HomePositionSet Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Home.HomePositionSet;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Home.HomePositionSet

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Home-&gt;HomePositionSet;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/HomePositionSet.html&#xA;							">HomePositionSet</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisMotionInPositionParameterCategory">
            <summary>Contains the In Position Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionInPositionParameterCategory.InPositionDistance">
            <summary>Allows access to the InPositionDistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.InPosition.InPositionDistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.InPosition.InPositionDistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;InPosition-&gt;InPositionDistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/InPositionDistance.html&#xA;							">InPositionDistance</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionInPositionParameterCategory.InPositionTime">
            <summary>Allows access to the InPositionTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.InPosition.InPositionTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.InPosition.InPositionTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;InPosition-&gt;InPositionTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/InPositionTime.html&#xA;							">InPositionTime</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionInPositionParameterCategory.InPositionDisableTimeout">
            <summary>Allows access to the InPositionDisableTimeout Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.InPosition.InPositionDisableTimeout;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.InPosition.InPositionDisableTimeout

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;InPosition-&gt;InPositionDisableTimeout;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/InPositionDisableTimeout.html&#xA;							">InPositionDisableTimeout</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionInPositionParameterCategory.InPosition2Distance">
            <summary>Allows access to the InPosition2Distance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.InPosition.InPosition2Distance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.InPosition.InPosition2Distance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;InPosition-&gt;InPosition2Distance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/InPosition2Distance.html&#xA;							">InPosition2Distance</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionInPositionParameterCategory.InPosition2Time">
            <summary>Allows access to the InPosition2Time Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.InPosition.InPosition2Time;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.InPosition.InPosition2Time

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;InPosition-&gt;InPosition2Time;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/InPosition2Time.html&#xA;							">InPosition2Time</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisMotionStabilityParameterCategory">
            <summary>Contains the Stability Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionStabilityParameterCategory.Stability0Threshold">
            <summary>Allows access to the Stability0Threshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Stability.Stability0Threshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Stability.Stability0Threshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Stability-&gt;Stability0Threshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Stability0Threshold.html&#xA;							">Stability0Threshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionStabilityParameterCategory.Stability0Time">
            <summary>Allows access to the Stability0Time Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Stability.Stability0Time;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Stability.Stability0Time

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Stability-&gt;Stability0Time;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Stability0Time.html&#xA;							">Stability0Time</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionStabilityParameterCategory.Stability1Threshold">
            <summary>Allows access to the Stability1Threshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motion.Stability.Stability1Threshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motion.Stability.Stability1Threshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Stability-&gt;Stability1Threshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Stability1Threshold.html&#xA;							">Stability1Threshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotionStabilityParameterCategory.Stability1Time">
            <summary>Allows access to the Stability1Time Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motion.Stability.Stability1Time;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motion.Stability.Stability1Time

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motion-&gt;Stability-&gt;Stability1Time;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/Stability1Time.html&#xA;							">Stability1Time</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisMotorParameterCategory">
            <summary>Contains the Motor Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.Stepper">
            <summary>Contains the Stepper Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.Piezo">
            <summary>Contains the Piezo Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.MaxCurrentClamp">
            <summary>Allows access to the MaxCurrentClamp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.MaxCurrentClamp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.MaxCurrentClamp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;MaxCurrentClamp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MaxCurrentClamp.html&#xA;							">MaxCurrentClamp</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.MotorType">
            <summary>Allows access to the MotorType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.MotorType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.MotorType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;MotorType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MotorType.html&#xA;							">MotorType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.CyclesPerRev">
            <summary>Allows access to the CyclesPerRev Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.CyclesPerRev;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.CyclesPerRev

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;CyclesPerRev;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CyclesPerRev.html&#xA;							">CyclesPerRev</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.CountsPerRev">
            <summary>Allows access to the CountsPerRev Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motor.CountsPerRev;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motor.CountsPerRev

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;CountsPerRev;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CountsPerRev.html&#xA;							">CountsPerRev</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.CommutationOffset">
            <summary>Allows access to the CommutationOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.CommutationOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.CommutationOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;CommutationOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CommutationOffset.html&#xA;							">CommutationOffset</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.AutoMsetTime">
            <summary>Allows access to the AutoMsetTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.AutoMsetTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.AutoMsetTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;AutoMsetTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutoMsetTime.html&#xA;							">AutoMsetTime</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.AutoMsetCurrent">
            <summary>Allows access to the AutoMsetCurrent Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.AutoMsetCurrent;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.AutoMsetCurrent

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;AutoMsetCurrent;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutoMsetCurrent.html&#xA;							">AutoMsetCurrent</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.AutoDisableTimeout">
            <summary>Allows access to the AutoDisableTimeout Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.AutoDisableTimeout;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.AutoDisableTimeout

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;AutoDisableTimeout;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AutoDisableTimeout.html&#xA;							">AutoDisableTimeout</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.MotorOutputConstant">
            <summary>Allows access to the MotorOutputConstant Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.MotorOutputConstant;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.MotorOutputConstant

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;MotorOutputConstant;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MotorOutputConstant.html&#xA;							">MotorOutputConstant</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.MotorOutputUnitsName">
            <summary>Allows access to the MotorOutputUnitsName Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;string&gt; parameter = myController.Parameters.Axes["X"].Motor.MotorOutputUnitsName;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of String) = myController.Parameters.Axes("X").Motor.MotorOutputUnitsName

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;MotorOutputUnitsName;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MotorOutputUnitsName.html&#xA;							">MotorOutputUnitsName</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorParameterCategory.TorqueAngleOffset">
            <summary>Allows access to the TorqueAngleOffset Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.TorqueAngleOffset;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.TorqueAngleOffset

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;TorqueAngleOffset;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TorqueAngleOffset.html&#xA;							">TorqueAngleOffset</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisMotorStepperParameterCategory">
            <summary>Contains the Stepper Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorStepperParameterCategory.StepperResolution">
            <summary>Allows access to the StepperResolution Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperResolution;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.Stepper.StepperResolution

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperResolution;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/StepperResolution.html&#xA;							">StepperResolution</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorStepperParameterCategory.StepperRunningCurrent">
            <summary>Allows access to the StepperRunningCurrent Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperRunningCurrent;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.Stepper.StepperRunningCurrent

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperRunningCurrent;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/StepperRunningCurrent.html&#xA;							">StepperRunningCurrent</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorStepperParameterCategory.StepperHoldingCurrent">
            <summary>Allows access to the StepperHoldingCurrent Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperHoldingCurrent;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.Stepper.StepperHoldingCurrent

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperHoldingCurrent;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/StepperHoldingCurrent.html&#xA;							">StepperHoldingCurrent</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorStepperParameterCategory.StepperVerificationSpeed">
            <summary>Allows access to the StepperVerificationSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperVerificationSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Motor.Stepper.StepperVerificationSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperVerificationSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/StepperVerificationSpeed.html&#xA;							">StepperVerificationSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorStepperParameterCategory.StepperRunningCurrentDelay">
            <summary>Allows access to the StepperRunningCurrentDelay Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.Stepper.StepperRunningCurrentDelay;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.Stepper.StepperRunningCurrentDelay

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Stepper-&gt;StepperRunningCurrentDelay;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/StepperRunningCurrentDelay.html&#xA;							">StepperRunningCurrentDelay</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisMotorPiezoParameterCategory">
            <summary>Contains the Piezo Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorPiezoParameterCategory.PiezoVoltsPerUnit">
            <summary>Allows access to the PiezoVoltsPerUnit Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.Piezo.PiezoVoltsPerUnit;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.Piezo.PiezoVoltsPerUnit

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Piezo-&gt;PiezoVoltsPerUnit;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PiezoVoltsPerUnit.html&#xA;							">PiezoVoltsPerUnit</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorPiezoParameterCategory.PiezoVoltageClampLow">
            <summary>Allows access to the PiezoVoltageClampLow Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.Piezo.PiezoVoltageClampLow;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.Piezo.PiezoVoltageClampLow

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Piezo-&gt;PiezoVoltageClampLow;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PiezoVoltageClampLow.html&#xA;							">PiezoVoltageClampLow</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorPiezoParameterCategory.PiezoVoltageClampHigh">
            <summary>Allows access to the PiezoVoltageClampHigh Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.Piezo.PiezoVoltageClampHigh;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.Piezo.PiezoVoltageClampHigh

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Piezo-&gt;PiezoVoltageClampHigh;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PiezoVoltageClampHigh.html&#xA;							">PiezoVoltageClampHigh</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorPiezoParameterCategory.PiezoSlewRateClamp">
            <summary>Allows access to the PiezoSlewRateClamp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].Motor.Piezo.PiezoSlewRateClamp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").Motor.Piezo.PiezoSlewRateClamp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Piezo-&gt;PiezoSlewRateClamp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PiezoSlewRateClamp.html&#xA;							">PiezoSlewRateClamp</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisMotorPiezoParameterCategory.PiezoDefaultServoState">
            <summary>Allows access to the PiezoDefaultServoState Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Motor.Piezo.PiezoDefaultServoState;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Motor.Piezo.PiezoDefaultServoState

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Motor-&gt;Piezo-&gt;PiezoDefaultServoState;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/PiezoDefaultServoState.html&#xA;							">PiezoDefaultServoState</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisServoLoopParameterCategory">
            <summary>Contains the Servo Loop Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopParameterCategory.AmpProtection">
            <summary>Contains the Amp Protection Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopParameterCategory.Gains">
            <summary>Contains the Gains Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopParameterCategory.Filters">
            <summary>Contains the Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopParameterCategory.Outputs">
            <summary>Contains the Outputs Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopParameterCategory.ServoSetup">
            <summary>Allows access to the ServoSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.ServoSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").ServoLoop.ServoSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;ServoSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoSetup.html&#xA;							">ServoSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopParameterCategory.FeedforwardAdvance">
            <summary>Allows access to the FeedforwardAdvance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.FeedforwardAdvance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.FeedforwardAdvance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;FeedforwardAdvance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FeedforwardAdvance.html&#xA;							">FeedforwardAdvance</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisServoLoopAmpProtectionParameterCategory">
            <summary>Contains the Amp Protection Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopAmpProtectionParameterCategory.LinearAmpMaxPower">
            <summary>Allows access to the LinearAmpMaxPower Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.LinearAmpMaxPower;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.LinearAmpMaxPower

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;LinearAmpMaxPower;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/LinearAmpMaxPower.html&#xA;							">LinearAmpMaxPower</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopAmpProtectionParameterCategory.LinearAmpDeratingFactor">
            <summary>Allows access to the LinearAmpDeratingFactor Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.LinearAmpDeratingFactor;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.LinearAmpDeratingFactor

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;LinearAmpDeratingFactor;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/LinearAmpDeratingFactor.html&#xA;							">LinearAmpDeratingFactor</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopAmpProtectionParameterCategory.LinearAmpBusVoltage">
            <summary>Allows access to the LinearAmpBusVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.LinearAmpBusVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.LinearAmpBusVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;LinearAmpBusVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/LinearAmpBusVoltage.html&#xA;							">LinearAmpBusVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopAmpProtectionParameterCategory.MotorResistance">
            <summary>Allows access to the MotorResistance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.MotorResistance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.MotorResistance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;MotorResistance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MotorResistance.html&#xA;							">MotorResistance</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopAmpProtectionParameterCategory.MotorBackEMFConstant">
            <summary>Allows access to the MotorBackEMFConstant Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.AmpProtection.MotorBackEMFConstant;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.AmpProtection.MotorBackEMFConstant

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;AmpProtection-&gt;MotorBackEMFConstant;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MotorBackEMFConstant.html&#xA;							">MotorBackEMFConstant</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory">
            <summary>Contains the Gains Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainKpos">
            <summary>Allows access to the GainKpos Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKpos;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKpos

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKpos;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainKpos.html&#xA;							">GainKpos</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainKi">
            <summary>Allows access to the GainKi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainKi.html&#xA;							">GainKi</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainKp">
            <summary>Allows access to the GainKp Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKp;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKp

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKp;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainKp.html&#xA;							">GainKp</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainVff">
            <summary>Allows access to the GainVff Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainVff;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Gains.GainVff

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainVff;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainVff.html&#xA;							">GainVff</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainAff">
            <summary>Allows access to the GainAff Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainAff;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Gains.GainAff

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainAff;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainAff.html&#xA;							">GainAff</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainKv">
            <summary>Allows access to the GainKv Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKv;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKv

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKv;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainKv.html&#xA;							">GainKv</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainKpi">
            <summary>Allows access to the GainKpi Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKpi;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKpi

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKpi;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainKpi.html&#xA;							">GainKpi</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainDff">
            <summary>Allows access to the GainDff Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainDff;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Gains.GainDff

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainDff;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainDff.html&#xA;							">GainDff</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.StaticFrictionCompensation">
            <summary>Allows access to the StaticFrictionCompensation Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.StaticFrictionCompensation;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Gains.StaticFrictionCompensation

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;StaticFrictionCompensation;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/StaticFrictionCompensation.html&#xA;							">StaticFrictionCompensation</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainPff">
            <summary>Allows access to the GainPff Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainPff;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainPff

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainPff;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainPff.html&#xA;							">GainPff</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainKd1">
            <summary>Allows access to the GainKd1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKd1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKd1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKd1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainKd1.html&#xA;							">GainKd1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainKp1">
            <summary>Allows access to the GainKp1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKp1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKp1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKp1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainKp1.html&#xA;							">GainKp1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainKsi1">
            <summary>Allows access to the GainKsi1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKsi1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKsi1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKsi1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainKsi1.html&#xA;							">GainKsi1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainKsi2">
            <summary>Allows access to the GainKsi2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainKsi2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").ServoLoop.Gains.GainKsi2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainKsi2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainKsi2.html&#xA;							">GainKsi2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopGainsParameterCategory.GainJff">
            <summary>Allows access to the GainJff Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Gains.GainJff;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Gains.GainJff

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Gains-&gt;GainJff;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/GainJff.html&#xA;							">GainJff</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory">
            <summary>Contains the Filters Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffN0">
            <summary>Allows access to the ServoFilter0CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter0CoeffN0.html&#xA;							">ServoFilter0CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffN1">
            <summary>Allows access to the ServoFilter0CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter0CoeffN1.html&#xA;							">ServoFilter0CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffN2">
            <summary>Allows access to the ServoFilter0CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter0CoeffN2.html&#xA;							">ServoFilter0CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffD1">
            <summary>Allows access to the ServoFilter0CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter0CoeffD1.html&#xA;							">ServoFilter0CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter0CoeffD2">
            <summary>Allows access to the ServoFilter0CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter0CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter0CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter0CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter0CoeffD2.html&#xA;							">ServoFilter0CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffN0">
            <summary>Allows access to the ServoFilter1CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter1CoeffN0.html&#xA;							">ServoFilter1CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffN1">
            <summary>Allows access to the ServoFilter1CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter1CoeffN1.html&#xA;							">ServoFilter1CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffN2">
            <summary>Allows access to the ServoFilter1CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter1CoeffN2.html&#xA;							">ServoFilter1CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffD1">
            <summary>Allows access to the ServoFilter1CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter1CoeffD1.html&#xA;							">ServoFilter1CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter1CoeffD2">
            <summary>Allows access to the ServoFilter1CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter1CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter1CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter1CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter1CoeffD2.html&#xA;							">ServoFilter1CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffN0">
            <summary>Allows access to the ServoFilter2CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter2CoeffN0.html&#xA;							">ServoFilter2CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffN1">
            <summary>Allows access to the ServoFilter2CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter2CoeffN1.html&#xA;							">ServoFilter2CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffN2">
            <summary>Allows access to the ServoFilter2CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter2CoeffN2.html&#xA;							">ServoFilter2CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffD1">
            <summary>Allows access to the ServoFilter2CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter2CoeffD1.html&#xA;							">ServoFilter2CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter2CoeffD2">
            <summary>Allows access to the ServoFilter2CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter2CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter2CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter2CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter2CoeffD2.html&#xA;							">ServoFilter2CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffN0">
            <summary>Allows access to the ServoFilter3CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter3CoeffN0.html&#xA;							">ServoFilter3CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffN1">
            <summary>Allows access to the ServoFilter3CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter3CoeffN1.html&#xA;							">ServoFilter3CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffN2">
            <summary>Allows access to the ServoFilter3CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter3CoeffN2.html&#xA;							">ServoFilter3CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffD1">
            <summary>Allows access to the ServoFilter3CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter3CoeffD1.html&#xA;							">ServoFilter3CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter3CoeffD2">
            <summary>Allows access to the ServoFilter3CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter3CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter3CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter3CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter3CoeffD2.html&#xA;							">ServoFilter3CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilterSetup">
            <summary>Allows access to the ServoFilterSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilterSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilterSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilterSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilterSetup.html&#xA;							">ServoFilterSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffN0">
            <summary>Allows access to the ServoFilter4CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter4CoeffN0.html&#xA;							">ServoFilter4CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffN1">
            <summary>Allows access to the ServoFilter4CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter4CoeffN1.html&#xA;							">ServoFilter4CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffN2">
            <summary>Allows access to the ServoFilter4CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter4CoeffN2.html&#xA;							">ServoFilter4CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffD1">
            <summary>Allows access to the ServoFilter4CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter4CoeffD1.html&#xA;							">ServoFilter4CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter4CoeffD2">
            <summary>Allows access to the ServoFilter4CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter4CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter4CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter4CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter4CoeffD2.html&#xA;							">ServoFilter4CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffN0">
            <summary>Allows access to the ServoFilter5CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter5CoeffN0.html&#xA;							">ServoFilter5CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffN1">
            <summary>Allows access to the ServoFilter5CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter5CoeffN1.html&#xA;							">ServoFilter5CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffN2">
            <summary>Allows access to the ServoFilter5CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter5CoeffN2.html&#xA;							">ServoFilter5CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffD1">
            <summary>Allows access to the ServoFilter5CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter5CoeffD1.html&#xA;							">ServoFilter5CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter5CoeffD2">
            <summary>Allows access to the ServoFilter5CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter5CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter5CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter5CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter5CoeffD2.html&#xA;							">ServoFilter5CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffN0">
            <summary>Allows access to the ServoFilter6CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter6CoeffN0.html&#xA;							">ServoFilter6CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffN1">
            <summary>Allows access to the ServoFilter6CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter6CoeffN1.html&#xA;							">ServoFilter6CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffN2">
            <summary>Allows access to the ServoFilter6CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter6CoeffN2.html&#xA;							">ServoFilter6CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffD1">
            <summary>Allows access to the ServoFilter6CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter6CoeffD1.html&#xA;							">ServoFilter6CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter6CoeffD2">
            <summary>Allows access to the ServoFilter6CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter6CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter6CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter6CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter6CoeffD2.html&#xA;							">ServoFilter6CoeffD2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffN0">
            <summary>Allows access to the ServoFilter7CoeffN0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffN0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffN0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffN0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter7CoeffN0.html&#xA;							">ServoFilter7CoeffN0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffN1">
            <summary>Allows access to the ServoFilter7CoeffN1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffN1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffN1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffN1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter7CoeffN1.html&#xA;							">ServoFilter7CoeffN1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffN2">
            <summary>Allows access to the ServoFilter7CoeffN2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffN2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffN2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffN2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter7CoeffN2.html&#xA;							">ServoFilter7CoeffN2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffD1">
            <summary>Allows access to the ServoFilter7CoeffD1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffD1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffD1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffD1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter7CoeffD1.html&#xA;							">ServoFilter7CoeffD1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopFiltersParameterCategory.ServoFilter7CoeffD2">
            <summary>Allows access to the ServoFilter7CoeffD2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Filters.ServoFilter7CoeffD2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Filters.ServoFilter7CoeffD2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Filters-&gt;ServoFilter7CoeffD2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoFilter7CoeffD2.html&#xA;							">ServoFilter7CoeffD2</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisServoLoopOutputsParameterCategory">
            <summary>Contains the Outputs Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopOutputsParameterCategory.ServoOutputScaling">
            <summary>Allows access to the ServoOutputScaling Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Outputs.ServoOutputScaling;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Outputs.ServoOutputScaling

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Outputs-&gt;ServoOutputScaling;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoOutputScaling.html&#xA;							">ServoOutputScaling</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopOutputsParameterCategory.ServoOutputOffsetA">
            <summary>Allows access to the ServoOutputOffsetA Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Outputs.ServoOutputOffsetA;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Outputs.ServoOutputOffsetA

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Outputs-&gt;ServoOutputOffsetA;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoOutputOffsetA.html&#xA;							">ServoOutputOffsetA</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisServoLoopOutputsParameterCategory.ServoOutputOffsetB">
            <summary>Allows access to the ServoOutputOffsetB Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;float&gt; parameter = myController.Parameters.Axes["X"].ServoLoop.Outputs.ServoOutputOffsetB;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Single) = myController.Parameters.Axes("X").ServoLoop.Outputs.ServoOutputOffsetB

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;float&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;ServoLoop-&gt;Outputs-&gt;ServoOutputOffsetB;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ServoOutputOffsetB.html&#xA;							">ServoOutputOffsetB</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.AxisUnitsParameterCategory">
            <summary>Contains the Units Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisUnitsParameterCategory.CountsPerUnit">
            <summary>Allows access to the CountsPerUnit Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Axes["X"].Units.CountsPerUnit;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Axes("X").Units.CountsPerUnit

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Units-&gt;CountsPerUnit;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CountsPerUnit.html&#xA;							">CountsPerUnit</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisUnitsParameterCategory.DecimalPlaces">
            <summary>Allows access to the DecimalPlaces Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Axes["X"].Units.DecimalPlaces;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Axes("X").Units.DecimalPlaces

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Units-&gt;DecimalPlaces;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DecimalPlaces.html&#xA;							">DecimalPlaces</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.AxisUnitsParameterCategory.UnitsName">
            <summary>Allows access to the UnitsName Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;string&gt; parameter = myController.Parameters.Axes["X"].Units.UnitsName;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of String) = myController.Parameters.Axes("X").Units.UnitsName

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;String^&gt;^ parameter = myController-&gt;Parameters-&gt;Axes["X"]-&gt;Units-&gt;UnitsName;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/UnitsName.html&#xA;							">UnitsName</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskParameterCategory">
            <summary>Contains the Task Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.Fiber">
            <summary>Contains the Fiber Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.IO">
            <summary>Contains the I/O Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.MemoryAllocation">
            <summary>Contains the Memory Allocation Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.MFO">
            <summary>Contains the MFO Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.Motion">
            <summary>Contains the Motion Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.CNC">
            <summary>Contains the CNC Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.Joystick">
            <summary>Contains the Joystick Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.TaskErrorAbortAxes">
            <summary>Allows access to the TaskErrorAbortAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].TaskErrorAbortAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).TaskErrorAbortAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;TaskErrorAbortAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TaskErrorAbortAxes.html&#xA;							">TaskErrorAbortAxes</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.TaskTerminationAxes">
            <summary>Allows access to the TaskTerminationAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].TaskTerminationAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).TaskTerminationAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;TaskTerminationAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TaskTerminationAxes.html&#xA;							">TaskTerminationAxes</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.TaskStopAbortAxes">
            <summary>Allows access to the TaskStopAbortAxes Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].TaskStopAbortAxes;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).TaskStopAbortAxes

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;TaskStopAbortAxes;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TaskStopAbortAxes.html&#xA;							">TaskStopAbortAxes</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.ExecuteNumLines">
            <summary>Allows access to the ExecuteNumLines Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].ExecuteNumLines;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).ExecuteNumLines

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;ExecuteNumLines;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ExecuteNumLines.html&#xA;							">ExecuteNumLines</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.Aerotech#Common#INamed{Aerotech#A3200#TaskId}#Name">
            <summary>The task for which this category is for</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskParameterCategory.TaskId">
            <summary>The task for which this category is for</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskFiberParameterCategory">
            <summary>Contains the Fiber Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberParameterCategory.HillClimb">
            <summary>Contains the Hill Climb Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberParameterCategory.SpiralRough">
            <summary>Contains the Spiral Rough Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberParameterCategory.SpiralFine">
            <summary>Contains the Spiral Fine Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberParameterCategory.FastAlign">
            <summary>Contains the Fast Align Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberParameterCategory.GeoCenter">
            <summary>Contains the Geo Center Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberParameterCategory.Centroid">
            <summary>Contains the Centroid Parameters</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory">
            <summary>Contains the Hill Climb Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCScanIncrement">
            <summary>Allows access to the HCScanIncrement Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCScanIncrement;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCScanIncrement

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCScanIncrement;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCScanIncrement.html&#xA;							">HCScanIncrement</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCMaxDisplacement">
            <summary>Allows access to the HCMaxDisplacement Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCMaxDisplacement;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCMaxDisplacement

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCMaxDisplacement;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCMaxDisplacement.html&#xA;							">HCMaxDisplacement</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCThreshold">
            <summary>Allows access to the HCThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCThreshold.html&#xA;							">HCThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCAxis">
            <summary>Allows access to the HCAxis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCAxis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCAxis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCAxis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCAxis.html&#xA;							">HCAxis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCInputMode">
            <summary>Allows access to the HCInputMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCInputMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCInputMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCInputMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCInputMode.html&#xA;							">HCInputMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCInputChannelNum">
            <summary>Allows access to the HCInputChannelNum Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCInputChannelNum;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCInputChannelNum

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCInputChannelNum;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCInputChannelNum.html&#xA;							">HCInputChannelNum</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCInvertSearch">
            <summary>Allows access to the HCInvertSearch Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCInvertSearch;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCInvertSearch

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCInvertSearch;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCInvertSearch.html&#xA;							">HCInvertSearch</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCWholeWindow">
            <summary>Allows access to the HCWholeWindow Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCWholeWindow;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCWholeWindow

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCWholeWindow;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCWholeWindow.html&#xA;							">HCWholeWindow</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCDelayTime">
            <summary>Allows access to the HCDelayTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCDelayTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCDelayTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCDelayTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCDelayTime.html&#xA;							">HCDelayTime</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberHillClimbParameterCategory.HCPercentDrop">
            <summary>Allows access to the HCPercentDrop Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.HillClimb.HCPercentDrop;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.HillClimb.HCPercentDrop

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;HillClimb-&gt;HCPercentDrop;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/HCPercentDrop.html&#xA;							">HCPercentDrop</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory">
            <summary>Contains the Spiral Rough Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRMaxRadius">
            <summary>Allows access to the SRMaxRadius Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRMaxRadius;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRMaxRadius

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRMaxRadius;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRMaxRadius.html&#xA;							">SRMaxRadius</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRNumSpirals">
            <summary>Allows access to the SRNumSpirals Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRNumSpirals;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRNumSpirals

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRNumSpirals;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRNumSpirals.html&#xA;							">SRNumSpirals</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRSegmentLength">
            <summary>Allows access to the SRSegmentLength Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRSegmentLength;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRSegmentLength

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRSegmentLength;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRSegmentLength.html&#xA;							">SRSegmentLength</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRThreshold">
            <summary>Allows access to the SRThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRThreshold.html&#xA;							">SRThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRAxis1">
            <summary>Allows access to the SRAxis1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRAxis1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRAxis1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRAxis1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRAxis1.html&#xA;							">SRAxis1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRAxis2">
            <summary>Allows access to the SRAxis2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRAxis2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRAxis2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRAxis2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRAxis2.html&#xA;							">SRAxis2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRInputMode">
            <summary>Allows access to the SRInputMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRInputMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRInputMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRInputMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRInputMode.html&#xA;							">SRInputMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRInputChannelNum">
            <summary>Allows access to the SRInputChannelNum Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRInputChannelNum;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRInputChannelNum

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRInputChannelNum;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRInputChannelNum.html&#xA;							">SRInputChannelNum</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRInvertSearch">
            <summary>Allows access to the SRInvertSearch Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRInvertSearch;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRInvertSearch

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRInvertSearch;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRInvertSearch.html&#xA;							">SRInvertSearch</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRMotionType">
            <summary>Allows access to the SRMotionType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRMotionType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRMotionType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRMotionType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRMotionType.html&#xA;							">SRMotionType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralRoughParameterCategory.SRDelayTime">
            <summary>Allows access to the SRDelayTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralRough.SRDelayTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralRough.SRDelayTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralRough-&gt;SRDelayTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SRDelayTime.html&#xA;							">SRDelayTime</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory">
            <summary>Contains the Spiral Fine Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFEndRadius">
            <summary>Allows access to the SFEndRadius Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFEndRadius;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFEndRadius

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFEndRadius;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFEndRadius.html&#xA;							">SFEndRadius</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFNumSpirals">
            <summary>Allows access to the SFNumSpirals Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFNumSpirals;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFNumSpirals

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFNumSpirals;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFNumSpirals.html&#xA;							">SFNumSpirals</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFSegmentLength">
            <summary>Allows access to the SFSegmentLength Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFSegmentLength;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFSegmentLength

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFSegmentLength;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFSegmentLength.html&#xA;							">SFSegmentLength</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFAxis1">
            <summary>Allows access to the SFAxis1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFAxis1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFAxis1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFAxis1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFAxis1.html&#xA;							">SFAxis1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFAxis2">
            <summary>Allows access to the SFAxis2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFAxis2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFAxis2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFAxis2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFAxis2.html&#xA;							">SFAxis2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFInputMode">
            <summary>Allows access to the SFInputMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFInputMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFInputMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFInputMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFInputMode.html&#xA;							">SFInputMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFInputChannelNum">
            <summary>Allows access to the SFInputChannelNum Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFInputChannelNum;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFInputChannelNum

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFInputChannelNum;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFInputChannelNum.html&#xA;							">SFInputChannelNum</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFInvertSearch">
            <summary>Allows access to the SFInvertSearch Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFInvertSearch;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFInvertSearch

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFInvertSearch;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFInvertSearch.html&#xA;							">SFInvertSearch</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFMotionType">
            <summary>Allows access to the SFMotionType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFMotionType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFMotionType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFMotionType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFMotionType.html&#xA;							">SFMotionType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberSpiralFineParameterCategory.SFDelayTime">
            <summary>Allows access to the SFDelayTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.SpiralFine.SFDelayTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.SpiralFine.SFDelayTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;SpiralFine-&gt;SFDelayTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/SFDelayTime.html&#xA;							">SFDelayTime</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory">
            <summary>Contains the Fast Align Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FASelectAxis1">
            <summary>Allows access to the FASelectAxis1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FASelectAxis1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FASelectAxis1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FASelectAxis1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FASelectAxis1.html&#xA;							">FASelectAxis1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FASelectAxis2">
            <summary>Allows access to the FASelectAxis2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FASelectAxis2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FASelectAxis2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FASelectAxis2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FASelectAxis2.html&#xA;							">FASelectAxis2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FASelectAxis3">
            <summary>Allows access to the FASelectAxis3 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FASelectAxis3;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FASelectAxis3

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FASelectAxis3;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FASelectAxis3.html&#xA;							">FASelectAxis3</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FASelectAxis4">
            <summary>Allows access to the FASelectAxis4 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FASelectAxis4;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FASelectAxis4

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FASelectAxis4;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FASelectAxis4.html&#xA;							">FASelectAxis4</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FASelectAxis5">
            <summary>Allows access to the FASelectAxis5 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FASelectAxis5;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FASelectAxis5

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FASelectAxis5;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FASelectAxis5.html&#xA;							">FASelectAxis5</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FASelectAxis6">
            <summary>Allows access to the FASelectAxis6 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FASelectAxis6;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FASelectAxis6

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FASelectAxis6;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FASelectAxis6.html&#xA;							">FASelectAxis6</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAOffsetAxis1">
            <summary>Allows access to the FAOffsetAxis1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAOffsetAxis1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAOffsetAxis1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAOffsetAxis1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAOffsetAxis1.html&#xA;							">FAOffsetAxis1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAOffsetAxis2">
            <summary>Allows access to the FAOffsetAxis2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAOffsetAxis2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAOffsetAxis2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAOffsetAxis2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAOffsetAxis2.html&#xA;							">FAOffsetAxis2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAOffsetAxis3">
            <summary>Allows access to the FAOffsetAxis3 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAOffsetAxis3;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAOffsetAxis3

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAOffsetAxis3;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAOffsetAxis3.html&#xA;							">FAOffsetAxis3</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAOffsetAxis4">
            <summary>Allows access to the FAOffsetAxis4 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAOffsetAxis4;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAOffsetAxis4

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAOffsetAxis4;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAOffsetAxis4.html&#xA;							">FAOffsetAxis4</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAOffsetAxis5">
            <summary>Allows access to the FAOffsetAxis5 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAOffsetAxis5;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAOffsetAxis5

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAOffsetAxis5;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAOffsetAxis5.html&#xA;							">FAOffsetAxis5</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAOffsetAxis6">
            <summary>Allows access to the FAOffsetAxis6 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAOffsetAxis6;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAOffsetAxis6

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAOffsetAxis6;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAOffsetAxis6.html&#xA;							">FAOffsetAxis6</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAPosLimitAxis1">
            <summary>Allows access to the FAPosLimitAxis1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAPosLimitAxis1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAPosLimitAxis1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAPosLimitAxis1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAPosLimitAxis1.html&#xA;							">FAPosLimitAxis1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAPosLimitAxis2">
            <summary>Allows access to the FAPosLimitAxis2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAPosLimitAxis2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAPosLimitAxis2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAPosLimitAxis2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAPosLimitAxis2.html&#xA;							">FAPosLimitAxis2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAPosLimitAxis3">
            <summary>Allows access to the FAPosLimitAxis3 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAPosLimitAxis3;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAPosLimitAxis3

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAPosLimitAxis3;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAPosLimitAxis3.html&#xA;							">FAPosLimitAxis3</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAPosLimitAxis4">
            <summary>Allows access to the FAPosLimitAxis4 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAPosLimitAxis4;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAPosLimitAxis4

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAPosLimitAxis4;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAPosLimitAxis4.html&#xA;							">FAPosLimitAxis4</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAPosLimitAxis5">
            <summary>Allows access to the FAPosLimitAxis5 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAPosLimitAxis5;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAPosLimitAxis5

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAPosLimitAxis5;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAPosLimitAxis5.html&#xA;							">FAPosLimitAxis5</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAPosLimitAxis6">
            <summary>Allows access to the FAPosLimitAxis6 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAPosLimitAxis6;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAPosLimitAxis6

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAPosLimitAxis6;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAPosLimitAxis6.html&#xA;							">FAPosLimitAxis6</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FANegLimitAxis1">
            <summary>Allows access to the FANegLimitAxis1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FANegLimitAxis1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FANegLimitAxis1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FANegLimitAxis1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FANegLimitAxis1.html&#xA;							">FANegLimitAxis1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FANegLimitAxis2">
            <summary>Allows access to the FANegLimitAxis2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FANegLimitAxis2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FANegLimitAxis2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FANegLimitAxis2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FANegLimitAxis2.html&#xA;							">FANegLimitAxis2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FANegLimitAxis3">
            <summary>Allows access to the FANegLimitAxis3 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FANegLimitAxis3;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FANegLimitAxis3

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FANegLimitAxis3;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FANegLimitAxis3.html&#xA;							">FANegLimitAxis3</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FANegLimitAxis4">
            <summary>Allows access to the FANegLimitAxis4 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FANegLimitAxis4;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FANegLimitAxis4

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FANegLimitAxis4;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FANegLimitAxis4.html&#xA;							">FANegLimitAxis4</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FANegLimitAxis5">
            <summary>Allows access to the FANegLimitAxis5 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FANegLimitAxis5;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FANegLimitAxis5

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FANegLimitAxis5;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FANegLimitAxis5.html&#xA;							">FANegLimitAxis5</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FANegLimitAxis6">
            <summary>Allows access to the FANegLimitAxis6 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FANegLimitAxis6;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FANegLimitAxis6

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FANegLimitAxis6;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FANegLimitAxis6.html&#xA;							">FANegLimitAxis6</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FATermTolerance">
            <summary>Allows access to the FATermTolerance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FATermTolerance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FATermTolerance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FATermTolerance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FATermTolerance.html&#xA;							">FATermTolerance</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAMaxNumIterations">
            <summary>Allows access to the FAMaxNumIterations Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAMaxNumIterations;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAMaxNumIterations

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAMaxNumIterations;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAMaxNumIterations.html&#xA;							">FAMaxNumIterations</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FASaturationValue">
            <summary>Allows access to the FASaturationValue Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FASaturationValue;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FASaturationValue

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FASaturationValue;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FASaturationValue.html&#xA;							">FASaturationValue</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAReturnToStart">
            <summary>Allows access to the FAReturnToStart Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAReturnToStart;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAReturnToStart

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAReturnToStart;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAReturnToStart.html&#xA;							">FAReturnToStart</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAInputMode">
            <summary>Allows access to the FAInputMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAInputMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAInputMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAInputMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAInputMode.html&#xA;							">FAInputMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAInputChannelNum">
            <summary>Allows access to the FAInputChannelNum Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAInputChannelNum;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAInputChannelNum

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAInputChannelNum;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAInputChannelNum.html&#xA;							">FAInputChannelNum</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FAInvertSearch">
            <summary>Allows access to the FAInvertSearch Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FAInvertSearch;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FAInvertSearch

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FAInvertSearch;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FAInvertSearch.html&#xA;							">FAInvertSearch</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberFastAlignParameterCategory.FADelayTime">
            <summary>Allows access to the FADelayTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.FastAlign.FADelayTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.FastAlign.FADelayTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;FastAlign-&gt;FADelayTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/FADelayTime.html&#xA;							">FADelayTime</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory">
            <summary>Contains the Geo Center Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCScanSize">
            <summary>Allows access to the GCScanSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCScanSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCScanSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCScanSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCScanSize.html&#xA;							">GCScanSize</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCScanIncrement">
            <summary>Allows access to the GCScanIncrement Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCScanIncrement;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCScanIncrement

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCScanIncrement;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCScanIncrement.html&#xA;							">GCScanIncrement</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCScanLines">
            <summary>Allows access to the GCScanLines Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCScanLines;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCScanLines

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCScanLines;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCScanLines.html&#xA;							">GCScanLines</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCEdgeValue">
            <summary>Allows access to the GCEdgeValue Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCEdgeValue;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCEdgeValue

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCEdgeValue;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCEdgeValue.html&#xA;							">GCEdgeValue</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCAxis1">
            <summary>Allows access to the GCAxis1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCAxis1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCAxis1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCAxis1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCAxis1.html&#xA;							">GCAxis1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCAxis2">
            <summary>Allows access to the GCAxis2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCAxis2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCAxis2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCAxis2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCAxis2.html&#xA;							">GCAxis2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCInputMode">
            <summary>Allows access to the GCInputMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCInputMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCInputMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCInputMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCInputMode.html&#xA;							">GCInputMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCInputChannelNum">
            <summary>Allows access to the GCInputChannelNum Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCInputChannelNum;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCInputChannelNum

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCInputChannelNum;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCInputChannelNum.html&#xA;							">GCInputChannelNum</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCInvertSearch">
            <summary>Allows access to the GCInvertSearch Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCInvertSearch;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCInvertSearch

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCInvertSearch;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCInvertSearch.html&#xA;							">GCInvertSearch</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCSingleRasterMode">
            <summary>Allows access to the GCSingleRasterMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCSingleRasterMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCSingleRasterMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCSingleRasterMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCSingleRasterMode.html&#xA;							">GCSingleRasterMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCMotionType">
            <summary>Allows access to the GCMotionType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCMotionType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCMotionType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCMotionType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCMotionType.html&#xA;							">GCMotionType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberGeoCenterParameterCategory.GCDelayTime">
            <summary>Allows access to the GCDelayTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.GeoCenter.GCDelayTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.GeoCenter.GCDelayTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;GeoCenter-&gt;GCDelayTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/GCDelayTime.html&#xA;							">GCDelayTime</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory">
            <summary>Contains the Centroid Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CMaxDisplacement1">
            <summary>Allows access to the CMaxDisplacement1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CMaxDisplacement1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CMaxDisplacement1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CMaxDisplacement1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CMaxDisplacement1.html&#xA;							">CMaxDisplacement1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CMaxDisplacement2">
            <summary>Allows access to the CMaxDisplacement2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CMaxDisplacement2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CMaxDisplacement2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CMaxDisplacement2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CMaxDisplacement2.html&#xA;							">CMaxDisplacement2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CMaxDisplacement3">
            <summary>Allows access to the CMaxDisplacement3 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CMaxDisplacement3;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CMaxDisplacement3

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CMaxDisplacement3;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CMaxDisplacement3.html&#xA;							">CMaxDisplacement3</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CScanIncrement">
            <summary>Allows access to the CScanIncrement Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CScanIncrement;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CScanIncrement

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CScanIncrement;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CScanIncrement.html&#xA;							">CScanIncrement</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CEdgeValue">
            <summary>Allows access to the CEdgeValue Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CEdgeValue;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CEdgeValue

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CEdgeValue;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CEdgeValue.html&#xA;							">CEdgeValue</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CAxis1">
            <summary>Allows access to the CAxis1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CAxis1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CAxis1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CAxis1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CAxis1.html&#xA;							">CAxis1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CAxis2">
            <summary>Allows access to the CAxis2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CAxis2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CAxis2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CAxis2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CAxis2.html&#xA;							">CAxis2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CAxis3">
            <summary>Allows access to the CAxis3 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CAxis3;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CAxis3

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CAxis3;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CAxis3.html&#xA;							">CAxis3</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CInputMode">
            <summary>Allows access to the CInputMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CInputMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CInputMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CInputMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CInputMode.html&#xA;							">CInputMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CInputChannelNum">
            <summary>Allows access to the CInputChannelNum Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CInputChannelNum;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CInputChannelNum

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CInputChannelNum;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CInputChannelNum.html&#xA;							">CInputChannelNum</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CInvertSearch">
            <summary>Allows access to the CInvertSearch Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CInvertSearch;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CInvertSearch

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CInvertSearch;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CInvertSearch.html&#xA;							">CInvertSearch</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CReturnToCenter">
            <summary>Allows access to the CReturnToCenter Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CReturnToCenter;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CReturnToCenter

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CReturnToCenter;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CReturnToCenter.html&#xA;							">CReturnToCenter</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskFiberCentroidParameterCategory.CDelayTime">
            <summary>Allows access to the CDelayTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Fiber.Centroid.CDelayTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Fiber.Centroid.CDelayTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Fiber-&gt;Centroid-&gt;CDelayTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								FiberOptic.chm::/Parameters/CDelayTime.html&#xA;							">CDelayTime</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskIOParameterCategory">
            <summary>Contains the I/O Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskIOParameterCategory.SoftwareESTOPInput">
            <summary>Allows access to the SoftwareESTOPInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].IO.SoftwareESTOPInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).IO.SoftwareESTOPInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;IO-&gt;SoftwareESTOPInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/SoftwareESTOPInput.html&#xA;							">SoftwareESTOPInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskIOParameterCategory.FeedholdInput">
            <summary>Allows access to the FeedholdInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].IO.FeedholdInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).IO.FeedholdInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;IO-&gt;FeedholdInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FeedholdInput.html&#xA;							">FeedholdInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskIOParameterCategory.FeedholdSetup">
            <summary>Allows access to the FeedholdSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].IO.FeedholdSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).IO.FeedholdSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;IO-&gt;FeedholdSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/FeedholdSetup.html&#xA;							">FeedholdSetup</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskMemoryAllocationParameterCategory">
            <summary>Contains the Memory Allocation Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMemoryAllocationParameterCategory.CallStackSize">
            <summary>Allows access to the CallStackSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.CallStackSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.CallStackSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;CallStackSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CallStackSize.html&#xA;							">CallStackSize</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMemoryAllocationParameterCategory.ModeStackSize">
            <summary>Allows access to the ModeStackSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.ModeStackSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.ModeStackSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;ModeStackSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/ModeStackSize.html&#xA;							">ModeStackSize</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMemoryAllocationParameterCategory.TaskDoubles">
            <summary>Allows access to the TaskDoubles Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.TaskDoubles;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.TaskDoubles

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;TaskDoubles;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TaskDoubles.html&#xA;							">TaskDoubles</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMemoryAllocationParameterCategory.TaskStrings">
            <summary>Allows access to the TaskStrings Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.TaskStrings;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.TaskStrings

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;TaskStrings;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TaskStrings.html&#xA;							">TaskStrings</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMemoryAllocationParameterCategory.TaskAxisPoints">
            <summary>Allows access to the TaskAxisPoints Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.TaskAxisPoints;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.TaskAxisPoints

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;TaskAxisPoints;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/TaskAxisPoints.html&#xA;							">TaskAxisPoints</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMemoryAllocationParameterCategory.MonitorStatements">
            <summary>Allows access to the MonitorStatements Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.MonitorStatements;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.MonitorStatements

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;MonitorStatements;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MonitorStatements.html&#xA;							">MonitorStatements</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMemoryAllocationParameterCategory.QueueBufferSize">
            <summary>Allows access to the QueueBufferSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MemoryAllocation.QueueBufferSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MemoryAllocation.QueueBufferSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MemoryAllocation-&gt;QueueBufferSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/QueueBufferSize.html&#xA;							">QueueBufferSize</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskMFOParameterCategory">
            <summary>Contains the MFO Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMFOParameterCategory.AnalogMFOInput">
            <summary>Allows access to the AnalogMFOInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MFO.AnalogMFOInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).MFO.AnalogMFOInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MFO-&gt;AnalogMFOInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AnalogMFOInput.html&#xA;							">AnalogMFOInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMFOParameterCategory.AnalogMFOMinVoltage">
            <summary>Allows access to the AnalogMFOMinVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MFO.AnalogMFOMinVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).MFO.AnalogMFOMinVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MFO-&gt;AnalogMFOMinVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AnalogMFOMinVoltage.html&#xA;							">AnalogMFOMinVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMFOParameterCategory.AnalogMFOMaxVoltage">
            <summary>Allows access to the AnalogMFOMaxVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MFO.AnalogMFOMaxVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).MFO.AnalogMFOMaxVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MFO-&gt;AnalogMFOMaxVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AnalogMFOMaxVoltage.html&#xA;							">AnalogMFOMaxVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMFOParameterCategory.MaximumMFO">
            <summary>Allows access to the MaximumMFO Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MFO.MaximumMFO;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).MFO.MaximumMFO

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MFO-&gt;MaximumMFO;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MaximumMFO.html&#xA;							">MaximumMFO</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMFOParameterCategory.MinimumMFO">
            <summary>Allows access to the MinimumMFO Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MFO.MinimumMFO;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).MFO.MinimumMFO

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MFO-&gt;MinimumMFO;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MinimumMFO.html&#xA;							">MinimumMFO</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMFOParameterCategory.AnalogMFOStep">
            <summary>Allows access to the AnalogMFOStep Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].MFO.AnalogMFOStep;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).MFO.AnalogMFOStep

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;MFO-&gt;AnalogMFOStep;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/AnalogMFOStep.html&#xA;							">AnalogMFOStep</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskMotionParameterCategory">
            <summary>Contains the Motion Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.Lookahead">
            <summary>Contains the Lookahead Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultWaitMode">
            <summary>Allows access to the DefaultWaitMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultWaitMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultWaitMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultWaitMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultWaitMode.html&#xA;							">DefaultWaitMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultSCurve">
            <summary>Allows access to the DefaultSCurve Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultSCurve;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultSCurve

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultSCurve;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultSCurve.html&#xA;							">DefaultSCurve</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultCoordinatedSpeed">
            <summary>Allows access to the DefaultCoordinatedSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultCoordinatedSpeed.html&#xA;							">DefaultCoordinatedSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultCoordinatedRampRate">
            <summary>Allows access to the DefaultCoordinatedRampRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedRampRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedRampRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedRampRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultCoordinatedRampRate.html&#xA;							">DefaultCoordinatedRampRate</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultDependentCoordinatedRampRate">
            <summary>Allows access to the DefaultDependentCoordinatedRampRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultDependentCoordinatedRampRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultDependentCoordinatedRampRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultDependentCoordinatedRampRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultDependentCoordinatedRampRate.html&#xA;							">DefaultDependentCoordinatedRampRate</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultCoordinatedRampMode">
            <summary>Allows access to the DefaultCoordinatedRampMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedRampMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedRampMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedRampMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultCoordinatedRampMode.html&#xA;							">DefaultCoordinatedRampMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultCoordinatedRampTime">
            <summary>Allows access to the DefaultCoordinatedRampTime Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedRampTime;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedRampTime

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedRampTime;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultCoordinatedRampTime.html&#xA;							">DefaultCoordinatedRampTime</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultDependentCoordinatedSpeed">
            <summary>Allows access to the DefaultDependentCoordinatedSpeed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultDependentCoordinatedSpeed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultDependentCoordinatedSpeed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultDependentCoordinatedSpeed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultDependentCoordinatedSpeed.html&#xA;							">DefaultDependentCoordinatedSpeed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.RadiusCorrectionThreshold">
            <summary>Allows access to the RadiusCorrectionThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.RadiusCorrectionThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.RadiusCorrectionThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;RadiusCorrectionThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/RadiusCorrectionThreshold.html&#xA;							">RadiusCorrectionThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.RadiusErrorThreshold">
            <summary>Allows access to the RadiusErrorThreshold Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.RadiusErrorThreshold;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.RadiusErrorThreshold

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;RadiusErrorThreshold;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/RadiusErrorThreshold.html&#xA;							">RadiusErrorThreshold</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.MotionUpdateRate">
            <summary>Allows access to the MotionUpdateRate Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.MotionUpdateRate;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.MotionUpdateRate

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;MotionUpdateRate;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MotionUpdateRate.html&#xA;							">MotionUpdateRate</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.MotionBufferSize">
            <summary>Allows access to the MotionBufferSize Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.MotionBufferSize;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.MotionBufferSize

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;MotionBufferSize;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MotionBufferSize.html&#xA;							">MotionBufferSize</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultMotionMode">
            <summary>Allows access to the DefaultMotionMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultMotionMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultMotionMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultMotionMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultMotionMode.html&#xA;							">DefaultMotionMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultProgrammingMode">
            <summary>Allows access to the DefaultProgrammingMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultProgrammingMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultProgrammingMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultProgrammingMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultProgrammingMode.html&#xA;							">DefaultProgrammingMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultCoordinatedRampType">
            <summary>Allows access to the DefaultCoordinatedRampType Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultCoordinatedRampType;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultCoordinatedRampType

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultCoordinatedRampType;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultCoordinatedRampType.html&#xA;							">DefaultCoordinatedRampType</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.MotionInterpolationMode">
            <summary>Allows access to the MotionInterpolationMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.MotionInterpolationMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.MotionInterpolationMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;MotionInterpolationMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MotionInterpolationMode.html&#xA;							">MotionInterpolationMode</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionParameterCategory.DefaultTimeMode">
            <summary>Allows access to the DefaultTimeMode Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.DefaultTimeMode;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.DefaultTimeMode

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;DefaultTimeMode;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DefaultTimeMode.html&#xA;							">DefaultTimeMode</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskMotionLookaheadParameterCategory">
            <summary>Contains the Lookahead Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionLookaheadParameterCategory.CoordinatedAccelLimit">
            <summary>Allows access to the CoordinatedAccelLimit Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.Lookahead.CoordinatedAccelLimit;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.Lookahead.CoordinatedAccelLimit

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;Lookahead-&gt;CoordinatedAccelLimit;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CoordinatedAccelLimit.html&#xA;							">CoordinatedAccelLimit</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionLookaheadParameterCategory.DependentCoordinatedAccelLimit">
            <summary>Allows access to the DependentCoordinatedAccelLimit Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.Lookahead.DependentCoordinatedAccelLimit;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.Lookahead.DependentCoordinatedAccelLimit

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;Lookahead-&gt;DependentCoordinatedAccelLimit;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/DependentCoordinatedAccelLimit.html&#xA;							">DependentCoordinatedAccelLimit</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionLookaheadParameterCategory.CoordinatedCircularAccelLimit">
            <summary>Allows access to the CoordinatedCircularAccelLimit Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.Lookahead.CoordinatedCircularAccelLimit;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.Lookahead.CoordinatedCircularAccelLimit

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;Lookahead-&gt;CoordinatedCircularAccelLimit;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CoordinatedCircularAccelLimit.html&#xA;							">CoordinatedCircularAccelLimit</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionLookaheadParameterCategory.CoordinatedAccelLimitSetup">
            <summary>Allows access to the CoordinatedAccelLimitSetup Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.Lookahead.CoordinatedAccelLimitSetup;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.Lookahead.CoordinatedAccelLimitSetup

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;Lookahead-&gt;CoordinatedAccelLimitSetup;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CoordinatedAccelLimitSetup.html&#xA;							">CoordinatedAccelLimitSetup</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionLookaheadParameterCategory.MaxLookaheadMoves">
            <summary>Allows access to the MaxLookaheadMoves Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.Lookahead.MaxLookaheadMoves;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.Lookahead.MaxLookaheadMoves

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;Lookahead-&gt;MaxLookaheadMoves;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/MaxLookaheadMoves.html&#xA;							">MaxLookaheadMoves</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskMotionLookaheadParameterCategory.CoordinatedMoveDurationMinimum">
            <summary>Allows access to the CoordinatedMoveDurationMinimum Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Motion.Lookahead.CoordinatedMoveDurationMinimum;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Motion.Lookahead.CoordinatedMoveDurationMinimum

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Motion-&gt;Lookahead-&gt;CoordinatedMoveDurationMinimum;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/CoordinatedMoveDurationMinimum.html&#xA;							">CoordinatedMoveDurationMinimum</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskCNCParameterCategory">
            <summary>Contains the CNC Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCParameterCategory.Spindles">
            <summary>Contains the Spindles Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCParameterCategory.CutterTolerance">
            <summary>Allows access to the CutterTolerance Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.CutterTolerance;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.CutterTolerance

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;CutterTolerance;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/CutterTolerance.html&#xA;							">CutterTolerance</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory">
            <summary>Contains the Spindles Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.Spindle0MSOInput">
            <summary>Allows access to the Spindle0MSOInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.Spindle0MSOInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.Spindle0MSOInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;Spindle0MSOInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/Spindle0MSOInput.html&#xA;							">Spindle0MSOInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.Spindle1MSOInput">
            <summary>Allows access to the Spindle1MSOInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.Spindle1MSOInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.Spindle1MSOInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;Spindle1MSOInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/Spindle1MSOInput.html&#xA;							">Spindle1MSOInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.Spindle2MSOInput">
            <summary>Allows access to the Spindle2MSOInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.Spindle2MSOInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.Spindle2MSOInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;Spindle2MSOInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/Spindle2MSOInput.html&#xA;							">Spindle2MSOInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.Spindle3MSOInput">
            <summary>Allows access to the Spindle3MSOInput Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.Spindle3MSOInput;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.Spindle3MSOInput

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;Spindle3MSOInput;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/Spindle3MSOInput.html&#xA;							">Spindle3MSOInput</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.Spindle0Axis">
            <summary>Allows access to the Spindle0Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.Spindle0Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.Spindle0Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;Spindle0Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/Spindle0Axis.html&#xA;							">Spindle0Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.Spindle1Axis">
            <summary>Allows access to the Spindle1Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.Spindle1Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.Spindle1Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;Spindle1Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/Spindle1Axis.html&#xA;							">Spindle1Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.Spindle2Axis">
            <summary>Allows access to the Spindle2Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.Spindle2Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.Spindle2Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;Spindle2Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/Spindle2Axis.html&#xA;							">Spindle2Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.Spindle3Axis">
            <summary>Allows access to the Spindle3Axis Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.Spindle3Axis;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.Spindle3Axis

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;Spindle3Axis;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/Spindle3Axis.html&#xA;							">Spindle3Axis</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.DefaultSpindle0Speed">
            <summary>Allows access to the DefaultSpindle0Speed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.DefaultSpindle0Speed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.DefaultSpindle0Speed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;DefaultSpindle0Speed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/DefaultSpindle0Speed.html&#xA;							">DefaultSpindle0Speed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.DefaultSpindle1Speed">
            <summary>Allows access to the DefaultSpindle1Speed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.DefaultSpindle1Speed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.DefaultSpindle1Speed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;DefaultSpindle1Speed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/DefaultSpindle1Speed.html&#xA;							">DefaultSpindle1Speed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.DefaultSpindle2Speed">
            <summary>Allows access to the DefaultSpindle2Speed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.DefaultSpindle2Speed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.DefaultSpindle2Speed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;DefaultSpindle2Speed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/DefaultSpindle2Speed.html&#xA;							">DefaultSpindle2Speed</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskCNCSpindlesParameterCategory.DefaultSpindle3Speed">
            <summary>Allows access to the DefaultSpindle3Speed Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].CNC.Spindles.DefaultSpindle3Speed;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).CNC.Spindles.DefaultSpindle3Speed

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;CNC-&gt;Spindles-&gt;DefaultSpindle3Speed;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								CNCOption.chm::/Parameters/DefaultSpindle3Speed.html&#xA;							">DefaultSpindle3Speed</a></remarks>
        </member>
        <member name="T:Aerotech.A3200.Parameters.TaskJoystickParameterCategory">
            <summary>Contains the Joystick Parameters</summary>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput1MinVoltage">
            <summary>Allows access to the JoystickInput1MinVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput1MinVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput1MinVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput1MinVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput1MinVoltage.html&#xA;							">JoystickInput1MinVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput1MaxVoltage">
            <summary>Allows access to the JoystickInput1MaxVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput1MaxVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput1MaxVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput1MaxVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput1MaxVoltage.html&#xA;							">JoystickInput1MaxVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput1Deadband">
            <summary>Allows access to the JoystickInput1Deadband Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput1Deadband;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput1Deadband

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput1Deadband;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput1Deadband.html&#xA;							">JoystickInput1Deadband</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput0MinVoltage">
            <summary>Allows access to the JoystickInput0MinVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput0MinVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput0MinVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput0MinVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput0MinVoltage.html&#xA;							">JoystickInput0MinVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput0MaxVoltage">
            <summary>Allows access to the JoystickInput0MaxVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput0MaxVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput0MaxVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput0MaxVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput0MaxVoltage.html&#xA;							">JoystickInput0MaxVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput0Deadband">
            <summary>Allows access to the JoystickInput0Deadband Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput0Deadband;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput0Deadband

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput0Deadband;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput0Deadband.html&#xA;							">JoystickInput0Deadband</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput0">
            <summary>Allows access to the JoystickInput0 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput0;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput0

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput0;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput0.html&#xA;							">JoystickInput0</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput1">
            <summary>Allows access to the JoystickInput1 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput1;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput1

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput1;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput1.html&#xA;							">JoystickInput1</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickAxesSelect">
            <summary>Allows access to the JoystickAxesSelect Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickAxesSelect;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickAxesSelect

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickAxesSelect;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickAxesSelect.html&#xA;							">JoystickAxesSelect</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickSpeedSelect">
            <summary>Allows access to the JoystickSpeedSelect Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickSpeedSelect;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickSpeedSelect

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickSpeedSelect;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickSpeedSelect.html&#xA;							">JoystickSpeedSelect</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInterlock">
            <summary>Allows access to the JoystickInterlock Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInterlock;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInterlock

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInterlock;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInterlock.html&#xA;							">JoystickInterlock</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput2">
            <summary>Allows access to the JoystickInput2 Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;int&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput2;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Integer) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput2

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;int&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput2;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput2.html&#xA;							">JoystickInput2</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput2MinVoltage">
            <summary>Allows access to the JoystickInput2MinVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput2MinVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput2MinVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput2MinVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput2MinVoltage.html&#xA;							">JoystickInput2MinVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput2MaxVoltage">
            <summary>Allows access to the JoystickInput2MaxVoltage Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput2MaxVoltage;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput2MaxVoltage

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput2MaxVoltage;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput2MaxVoltage.html&#xA;							">JoystickInput2MaxVoltage</a></remarks>
        </member>
        <member name="P:Aerotech.A3200.Parameters.TaskJoystickParameterCategory.JoystickInput2Deadband">
            <summary>Allows access to the JoystickInput2Deadband Parameter</summary><example>
				These examples use the following namespaces:
				<ul><li>System</li><li>
						Aerotech.A3200</li><li>
						Aerotech.A3200.Parameters
					</li></ul><code language="C#">Controller myController = Controller.Connect();

TypedParameter&lt;double&gt; parameter = myController.Parameters.Tasks[TaskId.TLibrary].Joystick.JoystickInput2Deadband;

Console.WriteLine("Parameter Information :");
Console.WriteLine("    Name : {0}", parameter.Name);
Console.WriteLine("    Value : {0}", parameter.Value);
Console.WriteLine("    Value Type : {0}", parameter.ValueType);
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists);
if(parameter.Bounds.Exists) {
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min);
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max);
}

Console.WriteLine("Resetting to default value of : {0}", parameter.Default);
parameter.Value = parameter.Default;
</code><code language="VB.NET">Dim myController As Controller = Controller.Connect()

Dim parameter As TypedParameter(Of Double) = myController.Parameters.Tasks(TaskId.TLibrary).Joystick.JoystickInput2Deadband

Console.WriteLine("Parameter Information :")
Console.WriteLine("    Name : {0}", parameter.Name)
Console.WriteLine("    Value : {0}", parameter.Value)
Console.WriteLine("    Value Type : {0}", parameter.ValueType)
Console.WriteLine("    Has Bounds : {0}", parameter.Bounds.Exists)
If parameter.Bounds.Exists Then
	Console.WriteLine("        Minimum : {0}", parameter.Bounds.Min)
	Console.WriteLine("        Maximum : {0}", parameter.Bounds.Max)
End If

Console.WriteLine("Resetting to default value of : {0}", parameter.Default)
parameter.Value = parameter.Default
</code><code language="C++">Controller^ myController = Controller::Connect();

TypedParameter&lt;double&gt;^ parameter = myController-&gt;Parameters-&gt;Tasks[TaskId::TLibrary]-&gt;Joystick-&gt;JoystickInput2Deadband;

Console::WriteLine(L"Parameter Information :");
Console::WriteLine(L"    Name : {0}", parameter-&gt;Name);
Console::WriteLine(L"    Value : {0}", parameter-&gt;Value);
Console::WriteLine(L"    Value Type : {0}", parameter-&gt;ValueType);
Console::WriteLine(L"    Has Bounds : {0}", parameter-&gt;Bounds-&gt;Exists);
if(parameter-&gt;Bounds-&gt;Exists) {
	Console::WriteLine(L"        Minimum : {0}", parameter-&gt;Bounds-&gt;Min);
	Console::WriteLine(L"        Maximum : {0}", parameter-&gt;Bounds-&gt;Max);
}

Console::WriteLine("Resetting to default value of : {0}", parameter-&gt;Default);
parameter-&gt;Value = parameter-&gt;Default;
</code></example><remarks>This allows access to the <a href="&#xA;								mk:@MSITStore:A3200.chm::/Parameters/JoystickInput2Deadband.html&#xA;							">JoystickInput2Deadband</a></remarks>
        </member>
        <member name="F:Aerotech.A3200.Parameters.ParameterInfoProvider.oldNames">
            <summary>New Name -> Old Name</summary>
        </member>
        <member name="M:Aerotech.A3200.Parameters.ParameterInfoProvider.GetLegacyName(System.String)">
            <summary>Get the names of the parameter including the old ones</summary>
        </member>
        <member name="T:Aerotech.A3200.SoftwareEnvironment">
            <summary>Provides information about the software environment relating to A3200 on this PC</summary>
        </member>
        <member name="P:Aerotech.A3200.SoftwareEnvironment.InstallDir">
            <summary>The installation directory of the software</summary>
        </member>
        <member name="P:Aerotech.A3200.SoftwareEnvironment.BinDir">
            <summary>The binaries directory of the software</summary>
        </member>
        <member name="P:Aerotech.A3200.SoftwareEnvironment.ProductKey">
            <summary>The key that was used to install the software</summary>
        </member>
        <member name="P:Aerotech.A3200.SoftwareEnvironment.Version">
            <summary>The version of the .NET library</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.DelegateSpooler">
            <summary>
            Provides ability to spool (as in printer) delegates
            </summary>
            <remarks>
            This class is used when one needs to call delegates, but they want them to be called
            in a separate thread and also want only one be called at a time, so that if it takes
            a while for one to finish, subsequent ones for the same destionation will not be called.
            </remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.DelegateSpooler.worker">
            <summary>
            The background thread that is doing the work
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.DelegateSpooler.delegates">
            <summary>
            The delegates that are the next in line to be executed
            </summary>
            <remarks>
            The index into this list is the pipe (destination number).
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.DelegateSpooler.#ctor(System.String)">
            <summary>
            Starts the background thread
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Status.DelegateSpooler.Set(System.Int32,System.Threading.ThreadStart)">
            <summary>
            Sets the delegate to be called for a specific pipe (destination)
            </summary>
            <param name="pipe">The pipe to use</param>
            <param name="del">The delegate to call</param>
            <remarks>
            This overwrites any previous delegates, unless they have been called already
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.DelegateSpooler.ClearQueue">
            <summary>
            Clears the queue of delegates
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Status.DelegateSpooler.InitQueue(System.Int32)">
            <summary>
            Initializes the queue to a specific set of pipes (destinations)
            </summary>
            <param name="pipes">The number of pipes (destinations) to have</param>
        </member>
        <member name="M:Aerotech.A3200.Status.DelegateSpooler.IsPipeExecuting(System.Int32)">
            <summary>
            Whether there is currently a delegate in a pipe being executed
            </summary>
            <param name="pipe">The pipe number</param>
            <returns>If there is something executing</returns>
        </member>
        <member name="F:Aerotech.A3200.Status.DelegateSpooler.execed">
            <summary>
            DO NOT MODIFY/LOCK, ONLY READS ALLOWED
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Status.DelegateSpooler.bgWorker">
            <summary>
            Does the actual work
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Threader`1">
            <summary>
            Executes a specific command on an object every so often
            </summary>
            <typeparam name="TObject">The type of object on which to execute the command</typeparam>
        </member>
        <member name="F:Aerotech.A3200.Status.Threader`1.toPoll">
            <summary>
            The objects to poll
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.Threader`1.worker">
            <summary>
            The background thread that does the updating
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.Threader`1.threadPriority">
            <summary>
            The priority to use on the background thread
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.Threader`1.keepRunning">
            <summary>
            Tells the background thread whether it should keep running
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.Threader`1.threadMutex">
            <summary>
            The mutex to lock when accessing the thread (<see cref="F:Aerotech.A3200.Status.Threader`1.worker"/>)
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.Threader`1.subscriptionMutex">
            <summary>
            The mutex to lock when accessing the subscriptions (events)
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.Threader`1.caller">
            <summary>
            The function on call (to execute on the object)
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Status.Threader`1.#ctor(Aerotech.A3200.Status.Threader{`0}.Caller,System.String)">
            <summary>
            Initializes this class
            </summary>
            <param name="caller">The delegate to call on the objects</param>
            <param name="name">The name for the background thread to use</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Threader`1.AddSubscriber(`0)">
            <summary>
            Adds an object to be updated
            </summary>
            <param name="controller">The objec to add</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Threader`1.RemoveSubscriber(`0,System.Int32)">
            <summary>
            Removes an object from updated ones
            </summary>
            <param name="controller">The object to remove</param>
            <param name="number">The number of the object to remove (pipe, destination)</param>
        </member>
        <member name="M:Aerotech.A3200.Status.Threader`1.StopAll">
            <summary>
            Stops the background thread
            </summary>
            <remarks>
            This call is blocking
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.Threader`1.bgWorker">
            <summary>
            The function that does the actual work
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Threader`1.Spooler">
            <summary>
            Provides access to the delegate spooler
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.Threader`1.Interval">
            <summary>
            The interval at which the updates are done
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Status.Threader`1.Caller">
            <summary>
            The delegate that does the operation on the object
            </summary>
            <param name="obj">The object on which to operate</param>
            <param name="spooler">The spooler to whom to pass the events</param>
        </member>
        <member name="T:Aerotech.A3200.Status.NewDiagPacketArrivedEventArgs">
            <summary>
            Provides data for <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/>
            </summary>
            <remarks>
            	<para>
            		This class provides data for when the <see cref="T:Aerotech.A3200.Status.DiagPacketPoller"/> retrieves
            		new diagnostic information from a controller.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.NewDiagPacketArrivedEventArgs.#ctor(Aerotech.A3200.Controller,Aerotech.A3200.Status.ControllerDiagPacket)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.A3200.Status.NewDiagPacketArrivedEventArgs"/>
            </summary>
            <param name="controller">The controller from which the data was retrieved</param>
            <param name="data">The diagnostic information</param>
        </member>
        <member name="P:Aerotech.A3200.Status.NewDiagPacketArrivedEventArgs.Data">
            <summary>
            The most recent diagnostics retrieved from the controller
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/DiagPacketPoller/Example[@name=&quot;DiagPktPoller&quot;]/*"/> 
        </member>
        <member name="T:Aerotech.A3200.Status.NewTaskStatesArrivedEventArgs">
            <summary>
            Provides data for <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived"/>
            </summary>
            <remarks>
            	<para>
            		This class provides data for when the <see cref="T:Aerotech.A3200.Status.TaskStatesPoller"/> retrieves
            		new task state information from a controller.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.NewTaskStatesArrivedEventArgs.TaskStates">
            <summary>
            The most recent task state information retrieved from the controller
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/TaskStatesPoller/Example[@name=&quot;TaskStatesPoller&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.NewTaskStatesArrivedEventArgs.Statuses">
            <summary>
            Returns a collection of <see cref="T:Aerotech.A3200.Tasks.TaskStatus"/> objects which can be used to obtain task status information for each task
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.NewTaskStatesArrivedEventArgs.Mfo">
            <summary>
             Returns a collection of the current MFO values for all tasks
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.NewTaskStatesArrivedEventArgs.ExecutionModes">
            <summary>
            Returns a collection of the current <see cref="T:Aerotech.A3200.Tasks.TaskExecutionMode"/> objects which can be used to obtain the current task execution modes for each task
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Status.DiagPacketPoller">
            <summary>
            Allows to poll for diagnostic information from a controller in the background
            </summary>
            <remarks>
            	<para>
            		This class can be configured to retrieve <see cref="T:Aerotech.A3200.Status.ControllerDiagPacket"/> from the controller
            		at a specified rate in a background thread (referred to as polling).  Each time a new 
            		<see cref="T:Aerotech.A3200.Status.ControllerDiagPacket"/> is retrieved, an event is raised that contains the most up to date data.
            		If there are any errors during the retrieval of the data, the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.ErrorOccurred"/> event will be raised.
            	</para>
            	<para>
            		To setup the polling of the data, register for the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/>, this will automatically start
            		the polling of the diagnostic information from the controller.  If you do not want the polling to start right away
            		set the <see cref="P:Aerotech.A3200.Status.DiagPacketPoller.AutoStart"/> property.
            	</para>
            	<para>
            		The polling of the data can be suspended and resumed using <see cref="M:Aerotech.A3200.Status.DiagPacketPoller.Suspend"/> and <see cref="M:Aerotech.A3200.Status.DiagPacketPoller.Resume"/>.
            	</para>
            	<para>
            		The interval at which the data is updated is global for all the instances of <see cref="T:Aerotech.A3200.Status.DiagPacketPoller"/> and
            		can be set by <see cref="P:Aerotech.A3200.Status.DiagPacketPoller.RefreshInterval"/> property.  The background thread that does the polling does not need to
            		be shut down when exiting the application, and will automatically shut itself down when exiting the application.
            	</para>
            </remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.DiagPacketPoller.Threader">
            <summary>
            The threader that handles the executing of the events in a separate thread
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.DiagPacketPoller.subscriptionMutex">
            <summary>
            The object to lock on when adding/removing subscribers (events)
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.DiagPacketPoller.controller">
            <summary>
            The controller with which this class is associated
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.DiagPacketPoller.controllerResetting">
            <summary>
            Whether the controller is actively being reset
            </summary>
            <remarks>
            	Suspending on a Resetting, and resuming on a Reset is not sufficient because one could suspend between 
            	Resetting and Reset, and we would end up resuming when we should not have.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.DiagPacketPoller.#ctor(Aerotech.A3200.Controller)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.A3200.Status.DiagPacketPoller"/>
            </summary>
            <param name="controller">The controller with which to associate this poller</param>
        </member>
        <member name="M:Aerotech.A3200.Status.DiagPacketPoller.Suspend">
            <summary>
            Suspends the polling for diagnostic information
            </summary>
            <remarks>
            	<para>
            		Calling this method will suspend the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To resume the polling after it has been suspended, call the <see cref="M:Aerotech.A3200.Status.DiagPacketPoller.Resume"/>.
            		To check the whether the polling is suspended or not, see <see cref="P:Aerotech.A3200.Status.DiagPacketPoller.IsSuspended"/> property.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.DiagPacketPoller.Resume">
            <summary>
            Resumes the polling for diagnostic information
            </summary>
            <remarks>
            	<para>
            		Calling this method will resume the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To suspend the polling, call the <see cref="M:Aerotech.A3200.Status.DiagPacketPoller.Suspend"/> method.  It is possible to
            		register for the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/> event without starting the polling,
            		thus causing the polling to be suspended.  To acheive this, see <see cref="P:Aerotech.A3200.Status.DiagPacketPoller.AutoStart"/>.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.DiagPacketPoller.RaiseNewDiagPacketArrived(Aerotech.A3200.Status.ControllerDiagPacket)">
            <summary>
            Raises the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/>
            </summary>
            <param name="diagPacket">The diagnostic packet to pass to the event</param>
        </member>
        <member name="M:Aerotech.A3200.Status.DiagPacketPoller.Aerotech#A3200#Status#IDataPoller#UnsubscribeAll">
            <summary>
            Unsubscribes everyone who is subscribed in the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/> and <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.ErrorOccurred"/>
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Status.DiagPacketPoller.RaiseErrorOccurred(System.Exception)">
            <summary>
            Raises the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.ErrorOccurred"/>
            </summary>
            <param name="e">The exception to pass to the event</param>
        </member>
        <member name="M:Aerotech.A3200.Status.DiagPacketPoller.Update(Aerotech.A3200.Status.DelegateSpooler)">
            <summary>
            Does a retrieve from the controller
            </summary>
            <param name="spooler">The spooler to use to raise events</param>
        </member>
        <member name="P:Aerotech.A3200.Status.DiagPacketPoller.IsSuspended">
            <summary>
            Whether the polling is suspended
            </summary>
            <remarks>
            	<para>
            		Polling can be suspended by calling the <see cref="M:Aerotech.A3200.Status.DiagPacketPoller.Suspend"/>, and resumed by calling the
            		<see cref="M:Aerotech.A3200.Status.DiagPacketPoller.Resume"/>.  If the polling is suspended, the background thread will not be
            		retrieving data from the controller, until it is resumed.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.DiagPacketPoller.AutoStart">
            <summary>
            Whether to start polling when someone subscribes to the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/>
            </summary>
            <remarks>
            	<para>
            		The default is <c>true</c>.
            	</para>
            	<para>
            		When someone registers for the <see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/>
            		and this property is set to <c>true</c>, the polling will start automatically.
            		If, on the other hand, this property is set to <c>false</c>, when someone registers for the
            		<see cref="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived"/> event, the polling will start in suspended mode.  To
            		start the polling after this, call the <see cref="M:Aerotech.A3200.Status.DiagPacketPoller.Resume"/>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.DiagPacketPoller.Latest">
            <summary>
            The latest diagnostic packet that was retrieved from the controller
            </summary>
            <remarks>
            	<para>
            		This property is <c>null</c> when a diagnostic packet has not been retrieved from
            		the controller yet.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.DiagPacketPoller.IsExecutingEvent">
            <summary>
            Tells whether there is currently an event being executed
            </summary>
        </member>
        <member name="E:Aerotech.A3200.Status.DiagPacketPoller.ErrorOccurred">
            <summary>
            Raised when an error occurs during retrieval of data from the controller
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/DiagPacketPoller/Example[@name=&quot;DiagPktPoller&quot;]/*"/>
        </member>
        <member name="E:Aerotech.A3200.Status.DiagPacketPoller.NewDiagPacketArrived">
            <summary>
            Event that gets called when a new diagnostic packet has been retrieved
            </summary>
            <remarks>
            	<para>
            		Registering for this event, automatically starts the polling for new
            		diagnostic information.  To change this behavior see the <see cref="P:Aerotech.A3200.Status.DiagPacketPoller.AutoStart"/>.
            	</para>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[
// This example shows how to connect to a controller and retrieve diagnostic packets via callback

ref class DiagPacketPoller
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        try
        {
            // Connect to the controller.
            Controller^ myController = Controller::Connect();
            // Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            myController->ControlCenter->Diagnostics->NewDiagPacketArrived += gcnew EventHandler<NewDiagPacketArrivedEventArgs^>(NewDiagnosticPacketArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController->ControlCenter->Diagnostics->ErrorOccurred += gcnew EventHandler<ErrorEventArgs^>(NewErrorOccurred);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex->Message);
        }
        // Wait until enter is pressed to try to produce a fault.
        Console::ReadLine();
    }
    public:
    static void NewDiagnosticPacketArrived(Object^ sender, NewDiagPacketArrivedEventArgs^ diagPacket)
    {
        // For each axis, check if faults exist, and then check for specific and generic faults.
        for each (AxisDiagPacket^ axisDiagPacket in diagPacket->Data)
        {
            if (!axisDiagPacket->AxisFault->None)
            {
                // To check for a specific fault, you can do this:
                if (axisDiagPacket->AxisFault->PositionErrorFault)
                {
                    // Display the position error fault and the axis.
                    Console::WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket->AxisName);
                }
                // To show all faults, do this:
                Console::WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket->AxisName, axisDiagPacket->AxisFault);
                // From here, you can choose to clear the fault or take some action based on the fault.
            }
        }
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred while polling data: {0}", errorEventArgs->Exception->Message);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
// This example shows how to connect to a controller and retrieve diagnostic packets via callback

internal class DiagPacketPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the controller.
            Controller myController = Controller.Connect();
            // Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.Diagnostics.NewDiagPacketArrived += new EventHandler<NewDiagPacketArrivedEventArgs>(DiagPacketPoller.NewDiagnosticPacketArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.Diagnostics.ErrorOccurred += new EventHandler<ErrorEventArgs>(DiagPacketPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a fault.
        Console.ReadLine();
    }

    public static void NewDiagnosticPacketArrived(object sender, NewDiagPacketArrivedEventArgs diagPacket)
    {
        // For each axis, check if faults exist, and then check for specific and generic faults.
        foreach (AxisDiagPacket axisDiagPacket in diagPacket.Data)
        {
            if (!axisDiagPacket.AxisFault.None)
            {
                // To check for a specific fault, you can do this:
                if (axisDiagPacket.AxisFault.PositionErrorFault)
                {
                    // Display the position error fault and the axis.
                    Console.WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket.AxisName);
                }
                // To show all faults, do this:
                Console.WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket.AxisName, axisDiagPacket.AxisFault);
                // From here, you can choose to clear the fault or take some action based on the fault.
            }
        }
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
' This example shows how to connect to a controller and retrieve diagnostic packets via callback

Friend Class DiagPacketPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the controller.
            Dim myController As Controller = Controller.Connect
            ' Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.Diagnostics.NewDiagPacketArrived, New EventHandler(Of NewDiagPacketArrivedEventArgs)(AddressOf DiagPacketPoller.NewDiagnosticPacketArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.Diagnostics.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf DiagPacketPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a fault.
        Console.ReadLine
    End Sub

    Public Shared Sub NewDiagnosticPacketArrived(ByVal sender As Object, ByVal diagPacket As NewDiagPacketArrivedEventArgs)
        ' For each axis, check if faults exist, and then check for specific and generic faults.
        Dim axisDiagPacket As AxisDiagPacket
        For Each axisDiagPacket In diagPacket.Data
            If Not axisDiagPacket.AxisFault.None Then
                ' To check for a specific fault, you can do this:
                If axisDiagPacket.AxisFault.PositionErrorFault Then
                    ' Display the position error fault and the axis.
                    Console.WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket.AxisName)
                End If
                ' To show all faults, do this:
                Console.WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket.AxisName, axisDiagPacket.AxisFault)
                ' From here, you can choose to clear the fault or take some action based on the fault.
            End If
        Next
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.DiagPacketPoller.RefreshInterval">
            <summary>
            Gets or sets the current interval that elapses between receiving diagnostic data
            </summary>
            <remarks>The interval is specified in milliseconds (ms)</remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.TaskStatesPoller">
            <summary>
            Allows to poll for task state information from a controller in the background
            </summary>
            <remarks>
            	<para>
            		This class can be configured to retrieve task state information from the controller at a specified rate in a
            		background thread (referred to as polling).  Each time new task information is retrieved, an event is raised that contains
            		the most up to date data.  If there are any errors during the retrieval of the data, the <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.ErrorOccurred"/> event
            		will be raised.
            	</para>
            	<para>
            		To setup the polling of the data, register for the <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived"/>, this will automatically start
            		the polling of the task state information from the controller.  If you do not want the polling to start right away,
            		set the <see cref="P:Aerotech.A3200.Status.TaskStatesPoller.AutoStart"/> property.
            	</para>
            	<para>
            		The polling of the data can be suspended and resumed using <see cref="M:Aerotech.A3200.Status.TaskStatesPoller.Suspend"/> and <see cref="M:Aerotech.A3200.Status.TaskStatesPoller.Resume"/>.
            	</para>
            	<para>
            		The interval at which the data is updated is global for all the instances of <see cref="T:Aerotech.A3200.Status.TaskStatesPoller"/> and
            		can be set by <see cref="P:Aerotech.A3200.Status.TaskStatesPoller.RefreshInterval"/> property.  The background thread that does the polling does not need to
            		be shut down when exiting the application, and will automatically shut itself down when exiting the application.
            	</para>
            </remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatesPoller.controller">
            <summary>
            The controller with which this class is associated
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatesPoller.Threader">
            <summary>
            The threader that handles the executing of the events in a separate thread
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatesPoller.subscriptionMutex">
            <summary>
            The object to lock on when adding/removing subscribers (events)
            </summary>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatesPoller.controllerResetting">
            <summary>
            Whether the controller is actively being reset
            </summary>
            <remarks>
            	Suspending on a Resetting, and resuming on a Reset is not sufficient because one could suspend between 
            	Resetting and Reset, and we would end up resuming when we should not have.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.TaskStatesPoller.#ctor(Aerotech.A3200.Controller)">
            <summary>
            Instantiates a new instance of <see cref="T:Aerotech.A3200.Status.TaskStatesPoller"/>
            </summary>
            <param name="controller">The controller with which to associate this poller</param>
        </member>
        <member name="M:Aerotech.A3200.Status.TaskStatesPoller.Suspend">
            <summary>
            Suspends the polling for task state information
            </summary>
            <remarks>
            	<para>
            		Calling this method will suspend the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To resume the polling after it has been suspended, call the <see cref="M:Aerotech.A3200.Status.TaskStatesPoller.Resume"/>.
            		To check whether the polling is suspended or not, see <see cref="P:Aerotech.A3200.Status.TaskStatesPoller.IsSuspended"/> property.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived"/>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.TaskStatesPoller.Resume">
            <summary>
            Resumes the polling for task state information
            </summary>
            <remarks>
            	<para>
            		Calling this method will resume the polling for diagnostic information
            		from the current controller.
            	</para>
            	<para>
            		To suspend the polling, call the <see cref="M:Aerotech.A3200.Status.TaskStatesPoller.Suspend"/> method.  It is possible to
            		register for the <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived"/> event without starting the polling,
            		thus causing the polling to be suspended.  To acheive this, see <see cref="P:Aerotech.A3200.Status.TaskStatesPoller.AutoStart"/>.
            	</para>
            	<note>
            		This affects everyone who is subscribed to the <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived"/>.
            	</note>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.TaskStatesPoller.Aerotech#A3200#Status#IDataPoller#UnsubscribeAll">
            <summary>
            Unsubscribes everyone who is subscribed in the <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived"/> and <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.ErrorOccurred"/>
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Status.TaskStatesPoller.RaiseErrorOccurred(System.Exception)">
            <summary>
            Raises the <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.ErrorOccurred"/>
            </summary>
            <param name="e">The exception to pass to the event</param>
        </member>
        <member name="M:Aerotech.A3200.Status.TaskStatesPoller.Update(Aerotech.A3200.Status.DelegateSpooler)">
            <summary>
            Does a retrieve from the controller
            </summary>
            <param name="spooler">The spooler to use to raise events</param>
        </member>
        <member name="P:Aerotech.A3200.Status.TaskStatesPoller.IsSuspended">
            <summary>
            Whether the polling is suspended
            </summary>
            <remarks>
            	<para>
            		Polling can be supsended by calling <see cref="M:Aerotech.A3200.Status.TaskStatesPoller.Suspend"/>, and resumed by calling the
            		<see cref="M:Aerotech.A3200.Status.TaskStatesPoller.Resume"/>.  If the polling is suspended, the background thread will not be
            		retrieving data from the controller, until it is resumed.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.TaskStatesPoller.AutoStart">
            <summary>
            Whether to start polling when someone subscribes to the <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived"/>
            </summary>
            <remarks>
            	<para>
            		The default is <c>true</c>.
            	</para>
            	<para>
            		When someone registers for the <see cref="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived"/>
            		and this property is set to <c>true</c>, the polling will start automatically.
            		If, on the other hand, this property is set to <c>false</c>, when someone registers for the
            		<see cref="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived"/> event, the polling will start in suspended mode.  To
            		start the polling after this, call the <see cref="M:Aerotech.A3200.Status.TaskStatesPoller.Resume"/>.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.TaskStatesPoller.IsExecutingEvent">
            <summary>
            Tells whether there is currenty an event being executed
            </summary>
        </member>
        <member name="E:Aerotech.A3200.Status.TaskStatesPoller.NewTaskStatesArrived">
            <summary>
            Event that gets called when new task states has been retrieved
            </summary>
            <remarks>
            	<para>
            		Registering for this event, automatically starts the polling for new
            		diagnostic information.  To change this behavior, see the <see cref="P:Aerotech.A3200.Status.TaskStatesPoller.AutoStart"/>.
            	</para>
            </remarks>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.Status</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class TaskStatesPoller abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        try
        {
            // Connect to the controller.
            Controller^ myController = Controller::Connect();
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            myController->ControlCenter->TaskStates->NewTaskStatesArrived += gcnew EventHandler<NewTaskStatesArrivedEventArgs^>(NewTaskStatesArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController->ControlCenter->TaskStates->ErrorOccurred += gcnew EventHandler<ErrorEventArgs^>(NewErrorOccurred);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex->Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console::ReadLine();
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred polling data: {0}", errorEventArgs->Exception->Message);
    }
    public:
    static void NewTaskStatesArrived(Object^ sender, NewTaskStatesArrivedEventArgs^ taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console::WriteLine("Task 1's State: {0}", taskStates->TaskStates[TaskId::T01]);
        Console::WriteLine("Task 2's State: {0}", taskStates->TaskStates[TaskId::T02]);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class TaskStatesPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the controller.
            Controller myController = Controller.Connect();
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.TaskStates.NewTaskStatesArrived += new EventHandler<NewTaskStatesArrivedEventArgs>(TaskStatesPoller.NewTaskStatesArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.TaskStates.ErrorOccurred += new EventHandler<ErrorEventArgs>(TaskStatesPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine();
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewTaskStatesArrived(object sender, NewTaskStatesArrivedEventArgs taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates[TaskId.T01]);
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates[TaskId.T02]);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class TaskStatesPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the controller.
            Dim myController As Controller = Controller.Connect
            ' Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.TaskStates.NewTaskStatesArrived, New EventHandler(Of NewTaskStatesArrivedEventArgs)(AddressOf TaskStatesPoller.NewTaskStatesArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.TaskStates.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf TaskStatesPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewTaskStatesArrived(ByVal sender As Object, ByVal taskStates As NewTaskStatesArrivedEventArgs)
        ' Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates.Item(TaskId.T01))
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates.Item(TaskId.T02))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="E:Aerotech.A3200.Status.TaskStatesPoller.ErrorOccurred">
            <summary>
            Raised when an error occurs during retrieval of data from the controller
            </summary>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.Status</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class TaskStatesPoller abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        try
        {
            // Connect to the controller.
            Controller^ myController = Controller::Connect();
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            myController->ControlCenter->TaskStates->NewTaskStatesArrived += gcnew EventHandler<NewTaskStatesArrivedEventArgs^>(NewTaskStatesArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController->ControlCenter->TaskStates->ErrorOccurred += gcnew EventHandler<ErrorEventArgs^>(NewErrorOccurred);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex->Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console::ReadLine();
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred polling data: {0}", errorEventArgs->Exception->Message);
    }
    public:
    static void NewTaskStatesArrived(Object^ sender, NewTaskStatesArrivedEventArgs^ taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console::WriteLine("Task 1's State: {0}", taskStates->TaskStates[TaskId::T01]);
        Console::WriteLine("Task 2's State: {0}", taskStates->TaskStates[TaskId::T02]);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class TaskStatesPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the controller.
            Controller myController = Controller.Connect();
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.TaskStates.NewTaskStatesArrived += new EventHandler<NewTaskStatesArrivedEventArgs>(TaskStatesPoller.NewTaskStatesArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.TaskStates.ErrorOccurred += new EventHandler<ErrorEventArgs>(TaskStatesPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine();
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewTaskStatesArrived(object sender, NewTaskStatesArrivedEventArgs taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates[TaskId.T01]);
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates[TaskId.T02]);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class TaskStatesPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the controller.
            Dim myController As Controller = Controller.Connect
            ' Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.TaskStates.NewTaskStatesArrived, New EventHandler(Of NewTaskStatesArrivedEventArgs)(AddressOf TaskStatesPoller.NewTaskStatesArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.TaskStates.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf TaskStatesPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewTaskStatesArrived(ByVal sender As Object, ByVal taskStates As NewTaskStatesArrivedEventArgs)
        ' Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates.Item(TaskId.T01))
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates.Item(TaskId.T02))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.TaskStatesPoller.RefreshInterval">
            <summary>
            Gets or sets the current interval that elapses between receiving task state data
            </summary>
            <remarks>The interval is specified in milliseconds (ms)</remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.TaskStatesPoller.Latest">
            <summary>
            The latest task states packet that was retrieved from the controller
            </summary>
            <remarks>
            	<para>
            		This property is <c>null</c> when a task states packet has not been retrieved from
            		the controller yet.
            	</para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.ControlCenter">
            <summary>
            Retrieves diagnostic data, callbacks, and task states in the background from a controller
            </summary>
            <remarks>
            	<para>
            		This class and its members can be setup to continuously poll the controller for
            		diagnostic data, callbacks information, and/or task states and raise events when
            		new data arrived.
            	</para>
            	<para>
            		The different data can be retrieved independently of each other, see
            		<see cref="P:Aerotech.A3200.Status.ControlCenter.Diagnostics"/>, <see cref="N:Aerotech.A3200.Callbacks"/>, and <see cref="P:Aerotech.A3200.Status.ControlCenter.TaskStates"/> for
            		instructions on retrieving the specific data.  All of them architected the same way
            		and operate very similarly.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.ControlCenter.#ctor(Aerotech.A3200.Controller)">
            <summary>
            Instantiates a new <see cref="T:Aerotech.A3200.Status.ControlCenter"/>
            </summary>
            <param name="controller">The controller with which this class is associated</param>
        </member>
        <member name="M:Aerotech.A3200.Status.ControlCenter.UnsubscribeAll">
            <summary>
            Unsubscribes everyone from this class or any of its members
            </summary>
            <remarks>
            	<para>
            		This should not be used for normal operation, and is
            		designed to be used under extreme circumstances in which every one
            		who has registered for any events needs to be forcibly unsubscribed.
            	</para>
            	<para>
            		When using this method, anyone who is subscribed to any events will not be
            		notified, and therefore this operation could potentially cause invalid operation
            		of the program.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.ControlCenter.Disable">
            <summary>
            Disables all polling of this class and any of its members
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ControlCenter.Diagnostics">
            <summary>
            Allows to setup polling for diagnostic information
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[
// This example shows how to connect to a controller and retrieve diagnostic packets via callback

ref class DiagPacketPoller
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        try
        {
            // Connect to the controller.
            Controller^ myController = Controller::Connect();
            // Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            myController->ControlCenter->Diagnostics->NewDiagPacketArrived += gcnew EventHandler<NewDiagPacketArrivedEventArgs^>(NewDiagnosticPacketArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController->ControlCenter->Diagnostics->ErrorOccurred += gcnew EventHandler<ErrorEventArgs^>(NewErrorOccurred);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex->Message);
        }
        // Wait until enter is pressed to try to produce a fault.
        Console::ReadLine();
    }
    public:
    static void NewDiagnosticPacketArrived(Object^ sender, NewDiagPacketArrivedEventArgs^ diagPacket)
    {
        // For each axis, check if faults exist, and then check for specific and generic faults.
        for each (AxisDiagPacket^ axisDiagPacket in diagPacket->Data)
        {
            if (!axisDiagPacket->AxisFault->None)
            {
                // To check for a specific fault, you can do this:
                if (axisDiagPacket->AxisFault->PositionErrorFault)
                {
                    // Display the position error fault and the axis.
                    Console::WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket->AxisName);
                }
                // To show all faults, do this:
                Console::WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket->AxisName, axisDiagPacket->AxisFault);
                // From here, you can choose to clear the fault or take some action based on the fault.
            }
        }
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred while polling data: {0}", errorEventArgs->Exception->Message);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
// This example shows how to connect to a controller and retrieve diagnostic packets via callback

internal class DiagPacketPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the controller.
            Controller myController = Controller.Connect();
            // Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.Diagnostics.NewDiagPacketArrived += new EventHandler<NewDiagPacketArrivedEventArgs>(DiagPacketPoller.NewDiagnosticPacketArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.Diagnostics.ErrorOccurred += new EventHandler<ErrorEventArgs>(DiagPacketPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a fault.
        Console.ReadLine();
    }

    public static void NewDiagnosticPacketArrived(object sender, NewDiagPacketArrivedEventArgs diagPacket)
    {
        // For each axis, check if faults exist, and then check for specific and generic faults.
        foreach (AxisDiagPacket axisDiagPacket in diagPacket.Data)
        {
            if (!axisDiagPacket.AxisFault.None)
            {
                // To check for a specific fault, you can do this:
                if (axisDiagPacket.AxisFault.PositionErrorFault)
                {
                    // Display the position error fault and the axis.
                    Console.WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket.AxisName);
                }
                // To show all faults, do this:
                Console.WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket.AxisName, axisDiagPacket.AxisFault);
                // From here, you can choose to clear the fault or take some action based on the fault.
            }
        }
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
' This example shows how to connect to a controller and retrieve diagnostic packets via callback

Friend Class DiagPacketPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the controller.
            Dim myController As Controller = Controller.Connect
            ' Register for the NewDiagPacketArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.Diagnostics.NewDiagPacketArrived, New EventHandler(Of NewDiagPacketArrivedEventArgs)(AddressOf DiagPacketPoller.NewDiagnosticPacketArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.Diagnostics.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf DiagPacketPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a fault.
        Console.ReadLine
    End Sub

    Public Shared Sub NewDiagnosticPacketArrived(ByVal sender As Object, ByVal diagPacket As NewDiagPacketArrivedEventArgs)
        ' For each axis, check if faults exist, and then check for specific and generic faults.
        Dim axisDiagPacket As AxisDiagPacket
        For Each axisDiagPacket In diagPacket.Data
            If Not axisDiagPacket.AxisFault.None Then
                ' To check for a specific fault, you can do this:
                If axisDiagPacket.AxisFault.PositionErrorFault Then
                    ' Display the position error fault and the axis.
                    Console.WriteLine("!! Position Error Fault on Axis: {0}", axisDiagPacket.AxisName)
                End If
                ' To show all faults, do this:
                Console.WriteLine("Current Axis Faults for Axis {0}: {1}", axisDiagPacket.AxisName, axisDiagPacket.AxisFault)
                ' From here, you can choose to clear the fault or take some action based on the fault.
            End If
        Next
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred while polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

End Class

]]>
</code>

</example> 
        </member>
        <member name="P:Aerotech.A3200.Status.ControlCenter.TaskStates">
            <summary>
            Allows to setup polling for task state information
            </summary>
            <example>
            This example uses the following namespaces:
            <ul>
                <li>Aerotech.A3200</li>
                <li>Aerotech.A3200.Status</li>
                <li>System</li>
            </ul>
            <code language="C++">
                <![CDATA[
ref class TaskStatesPoller abstract sealed
{
    // Methods
    public:
    static void Main(array<String^>^ args)
    {
        try
        {
            // Connect to the controller.
            Controller^ myController = Controller::Connect();
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            myController->ControlCenter->TaskStates->NewTaskStatesArrived += gcnew EventHandler<NewTaskStatesArrivedEventArgs^>(NewTaskStatesArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController->ControlCenter->TaskStates->ErrorOccurred += gcnew EventHandler<ErrorEventArgs^>(NewErrorOccurred);
        }
        catch (Exception^ ex)
        {
            Console::WriteLine("Exception occurred: {0}", ex->Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console::ReadLine();
    }
    public:
    static void NewErrorOccurred(Object^ sender, ErrorEventArgs^ errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console::WriteLine("Error occurred polling data: {0}", errorEventArgs->Exception->Message);
    }
    public:
    static void NewTaskStatesArrived(Object^ sender, NewTaskStatesArrivedEventArgs^ taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console::WriteLine("Task 1's State: {0}", taskStates->TaskStates[TaskId::T01]);
        Console::WriteLine("Task 2's State: {0}", taskStates->TaskStates[TaskId::T02]);
    }
};

]]>
</code>
<code language="C#">
<![CDATA[
internal static class TaskStatesPoller
{
    // Methods
    public static void Main(string[] args)
    {
        try
        {
            // Connect to the controller.
            Controller myController = Controller.Connect();
            // Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            myController.ControlCenter.TaskStates.NewTaskStatesArrived += new EventHandler<NewTaskStatesArrivedEventArgs>(TaskStatesPoller.NewTaskStatesArrived);
            // Register for the ErrorOccurred event to process any occurs that may occur during polling.
            myController.ControlCenter.TaskStates.ErrorOccurred += new EventHandler<ErrorEventArgs>(TaskStatesPoller.NewErrorOccurred);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: {0}", ex.Message);
        }
        // Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine();
    }

    public static void NewErrorOccurred(object sender, ErrorEventArgs errorEventArgs)
    {
        // Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message);
    }

    public static void NewTaskStatesArrived(object sender, NewTaskStatesArrivedEventArgs taskStates)
    {
        // Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates[TaskId.T01]);
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates[TaskId.T02]);
    }
}

]]>
</code>
<code language="VB.NET">
<![CDATA[
Friend Class TaskStatesPoller
    ' Methods
    Public Shared Sub Main(ByVal args As String())
        Try 
            ' Connect to the controller.
            Dim myController As Controller = Controller.Connect
            ' Register for the NewTaskStatesArrived event, and start data collection (it is started automatically).
            AddHandler myController.ControlCenter.TaskStates.NewTaskStatesArrived, New EventHandler(Of NewTaskStatesArrivedEventArgs)(AddressOf TaskStatesPoller.NewTaskStatesArrived)
            ' Register for the ErrorOccurred event to process any occurs that may occur during polling.
            AddHandler myController.ControlCenter.TaskStates.ErrorOccurred, New EventHandler(Of ErrorEventArgs)(AddressOf TaskStatesPoller.NewErrorOccurred)
        Catch ex As Exception
            Console.WriteLine("Exception occurred: {0}", ex.Message)
        End Try
        ' Wait until enter is pressed to try to produce a task state change.
        Console.ReadLine
    End Sub

    Public Shared Sub NewErrorOccurred(ByVal sender As Object, ByVal errorEventArgs As ErrorEventArgs)
        ' Print the error that occurred while polling data.
        Console.WriteLine("Error occurred polling data: {0}", errorEventArgs.Exception.Message)
    End Sub

    Public Shared Sub NewTaskStatesArrived(ByVal sender As Object, ByVal taskStates As NewTaskStatesArrivedEventArgs)
        ' Print out the current task states for task 1 and task 2
        Console.WriteLine("Task 1's State: {0}", taskStates.TaskStates.Item(TaskId.T01))
        Console.WriteLine("Task 2's State: {0}", taskStates.TaskStates.Item(TaskId.T02))
    End Sub

End Class

]]>
</code>

</example>
        </member>
        <member name="T:Aerotech.A3200.Status.ControllerDiagPacket">
            <summary>
            The diagnostic packet of the controller
            </summary>
            <remarks>
            	<para>
            		To retrieve this, see <see cref="M:Aerotech.A3200.DataCollection.Data.RetrieveDiagnostics"/>.
            	</para>
            </remarks>
            <remarks>
            	<para>
            		To retrieve this, see <see cref="M:Aerotech.A3200.DataCollection.Data.RetrieveDiagnostics"/>.
            	</para>
            	<para>
            		The unit information can be accessed from <see cref="P:Aerotech.A3200.Status.ControllerDiagPacket.Units"/>
            		and the data can be converted to a different set of units by calling
            		<see cref="M:Aerotech.A3200.Status.ControllerDiagPacket.ConvertUnits(Aerotech.A3200.Units.UnitInformation)"/>.  The unit names are available
            		from <see cref="P:Aerotech.A3200.Status.AxisDiagPacket.PositionUnitName"/>, <see cref="P:Aerotech.A3200.Status.AxisDiagPacket.VelocityUnitName"/>, 
            		and <see cref="P:Aerotech.A3200.Status.AxisDiagPacket.AccelerationUnitName"/>.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.ControllerDiagPacket.ConvertUnits(Aerotech.A3200.Units.UnitInformation)">
            <summary>Converts the data in this packet to a new set of units</summary>
            <param name="newUnits">The units to convert to</param>
            <returns>The same data, but in <paramref name="newUnits"/> set of units</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="newUnits"/> is null</exception>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>Aerotech.A3200.Units</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller^ myController = Controller::Connect();
        // Retrieve diagnostics
        ControllerDiagPacket^ diagnostics = myController->DataCollection->RetrieveDiagnostics();
        // Convert the diagnostics to be in secondary units per minute
        diagnostics = diagnostics->ConvertUnits(gcnew UnitInformation(DistanceUnit::Secondary, TimeUnit::Minutes) );
        Console::WriteLine("Position Feedback for axis 0: {0}", diagnostics[0]->PositionFeedback);
        Console::WriteLine("Position Feedback for axis 1: {0}", diagnostics[1]->PositionFeedback);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200
        Controller myController = Controller.Connect();
        // Retrieve diagnostics
        ControllerDiagPacket diagnostics = myController.DataCollection.RetrieveDiagnostics();
        // Convert the diagnostics to be in secondary units per minute
        diagnostics = diagnostics.ConvertUnits(new UnitInformation(DistanceUnit.Secondary, TimeUnit.Minutes));
        Console.WriteLine("Position Feedback for axis 0: {0}", diagnostics[0].PositionFeedback);
        Console.WriteLine("Position Feedback for axis 1: {0}", diagnostics[1].PositionFeedback);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200
        Dim myController As Controller = Controller.Connect
        ' Retrieve diagnostics
        Dim diagnostics As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Convert the diagnostics to be in secondary units per minute
        diagnostics = diagnostics.ConvertUnits(New UnitInformation(DistanceUnit.Secondary, TimeUnit.Minutes))
        Console.WriteLine("Position Feedback for axis 0: {0}", diagnostics(0).PositionFeedback)
        Console.WriteLine("Position Feedback for axis 1: {0}", diagnostics(1).PositionFeedback)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.ControllerDiagPacket.ProgramPosition">
            <summary>
            The program positions of the user tasks
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ControllerDiagPacket.Units">
            <summary>Contains information about what units the data is in</summary>
            <remarks>
            	<para>By default the units are <see cref="F:Aerotech.A3200.Units.DistanceUnit.Primary"/> per <see cref="F:Aerotech.A3200.Units.TimeUnit.Seconds"/></para>
            </remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.AxisDiagPacket">
            <summary>Contains diagnotic information about an axis</summary>
            <remarks>
            	<para>This is used as part of <see cref="T:Aerotech.A3200.Status.ControllerDiagPacket"/></para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.PositionCommand">
            <summary>
            The position command, in user units
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.PositionFeedback">
            <summary>
            The position feedback, in user units
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.PositionError">
            <summary>
            The position error, in user units
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.PositionFeedbackAuxiliary">
            <summary>
            The position feedback auxiliary
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.CurrentCommand">
            <summary>
            Current command
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/axisData/Example[@name=&quot;ControllerDiagPacketOverloaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.CurrentFeedback">
            <summary>
            Current feedback
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.CurrentError">
            <summary>
            Current error
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.ProgramPositionCommand">
            <summary>
            The program position command, in user units
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.ProgramPositionFeedback">
            <summary>
            The program position feedback, in user units
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.ProgramPositionError">
            <summary>
            The program position error, in user units
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.VelocityCommand">
            <summary>
            The velocity command, in user units
            </summary>
            <remarks>
            	<!-- No matching elements were found for the following include tag --><include file="common.xml" path="/*/DataCollection/PreviousDiagPacketNeeded.rem.para/*"/>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController->DataCollection->RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information for Axis 0");
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0]->AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0]->AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0]->AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0]->AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[0]->AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[0]->AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[0]->AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[0]->CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[0]->CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[0]->CurrentFeedback);
        Console::WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0]->DigitalInputs);
        Console::WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0]->DigitalOutputs);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[0]->PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[0]->PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[0]->PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[0]->PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[0]->ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[0]->ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0]->ProgramPositionFeedback);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0");
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[0].CurrentFeedback);
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0].DigitalInputs);
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0].DigitalOutputs);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0].ProgramPositionFeedback);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0")
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(0).CurrentFeedback)
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket.Item(0).DigitalInputs)
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket.Item(0).DigitalOutputs)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(0).ProgramPositionFeedback)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.VelocityFeedback">
            <summary>
            The velocity feedback, in user units
            </summary>
            <remarks>
            	<!-- No matching elements were found for the following include tag --><include file="common.xml" path="/*/DataCollection/PreviousDiagPacketNeeded.rem.para/*"/>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController->DataCollection->RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information for Axis 0");
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0]->AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0]->AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0]->AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0]->AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[0]->AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[0]->AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[0]->AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[0]->CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[0]->CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[0]->CurrentFeedback);
        Console::WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0]->DigitalInputs);
        Console::WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0]->DigitalOutputs);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[0]->PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[0]->PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[0]->PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[0]->PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[0]->ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[0]->ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0]->ProgramPositionFeedback);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0");
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[0].CurrentFeedback);
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0].DigitalInputs);
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0].DigitalOutputs);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0].ProgramPositionFeedback);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0")
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(0).CurrentFeedback)
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket.Item(0).DigitalInputs)
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket.Item(0).DigitalOutputs)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(0).ProgramPositionFeedback)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.VelocityError">
            <summary>
            The velocity error, in user units
            </summary>
            <remarks>
            	<!-- No matching elements were found for the following include tag --><include file="common.xml" path="/*/DataCollection/PreviousDiagPacketNeeded.rem.para/*"/>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController->DataCollection->RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information for Axis 0");
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0]->AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0]->AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0]->AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0]->AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[0]->AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[0]->AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[0]->AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[0]->CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[0]->CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[0]->CurrentFeedback);
        Console::WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0]->DigitalInputs);
        Console::WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0]->DigitalOutputs);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[0]->PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[0]->PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[0]->PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[0]->PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[0]->ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[0]->ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0]->ProgramPositionFeedback);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0");
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[0].CurrentFeedback);
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0].DigitalInputs);
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0].DigitalOutputs);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0].ProgramPositionFeedback);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0")
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(0).CurrentFeedback)
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket.Item(0).DigitalInputs)
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket.Item(0).DigitalOutputs)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(0).ProgramPositionFeedback)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AccelerationCommand">
            <summary>
            The acceleration command
            </summary>
            <remarks>
            	<!-- No matching elements were found for the following include tag --><include file="common.xml" path="/*/DataCollection/TwoPreviousDiagPacketsNeeded.rem.para/*"/>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController->DataCollection->RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information for Axis 0");
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0]->AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0]->AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0]->AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0]->AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[0]->AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[0]->AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[0]->AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[0]->CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[0]->CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[0]->CurrentFeedback);
        Console::WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0]->DigitalInputs);
        Console::WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0]->DigitalOutputs);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[0]->PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[0]->PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[0]->PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[0]->PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[0]->ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[0]->ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0]->ProgramPositionFeedback);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0");
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[0].CurrentFeedback);
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0].DigitalInputs);
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0].DigitalOutputs);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0].ProgramPositionFeedback);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0")
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(0).CurrentFeedback)
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket.Item(0).DigitalInputs)
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket.Item(0).DigitalOutputs)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(0).ProgramPositionFeedback)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AccelerationFeedback">
            <summary>
            The acceleration Feedback
            </summary>
            <remarks>
            	<!-- No matching elements were found for the following include tag --><include file="common.xml" path="/*/DataCollection/TwoPreviousDiagPacketsNeeded.rem.para/*"/>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController->DataCollection->RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information for Axis 0");
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0]->AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0]->AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0]->AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0]->AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[0]->AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[0]->AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[0]->AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[0]->CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[0]->CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[0]->CurrentFeedback);
        Console::WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0]->DigitalInputs);
        Console::WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0]->DigitalOutputs);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[0]->PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[0]->PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[0]->PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[0]->PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[0]->ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[0]->ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0]->ProgramPositionFeedback);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0");
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[0].CurrentFeedback);
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0].DigitalInputs);
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0].DigitalOutputs);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0].ProgramPositionFeedback);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0")
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(0).CurrentFeedback)
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket.Item(0).DigitalInputs)
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket.Item(0).DigitalOutputs)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(0).ProgramPositionFeedback)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AccelerationError">
            <summary>
            The acceleration error, in user units
            </summary>
            <remarks>
            	<!-- No matching elements were found for the following include tag --><include file="common.xml" path="/*/DataCollection/TwoPreviousDiagPacketsNeeded.rem.para/*"/>
            </remarks>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>System</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller^ myController = Controller::Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket^ controllerDiagPacket = myController->DataCollection->RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console::WriteLine("Controller Information for Axis 0");
        Console::WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0]->AnalogInput0);
        Console::WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0]->AnalogInput1);
        Console::WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0]->AnalogOutput0);
        Console::WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0]->AnalogOutput1);
        Console::WriteLine("  Axis Fault: {0}", controllerDiagPacket[0]->AxisFault);
        Console::WriteLine("  Axis Name: {0}", controllerDiagPacket[0]->AxisName);
        Console::WriteLine("  Axis Status: {0}", controllerDiagPacket[0]->AxisStatus);
        Console::WriteLine("  Current Command: {0}", controllerDiagPacket[0]->CurrentCommand);
        Console::WriteLine("  Current Error: {0}", controllerDiagPacket[0]->CurrentError);
        Console::WriteLine("  Current Feedback: {0}", controllerDiagPacket[0]->CurrentFeedback);
        Console::WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0]->DigitalInputs);
        Console::WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0]->DigitalOutputs);
        Console::WriteLine("  External Position: {0}", controllerDiagPacket[0]->PositionFeedbackAuxiliary);
        Console::WriteLine("  Position Command: {0}", controllerDiagPacket[0]->PositionCommand);
        Console::WriteLine("  Position Error: {0}", controllerDiagPacket[0]->PositionError);
        Console::WriteLine("  Position Feedback: {0}", controllerDiagPacket[0]->PositionFeedback);
        Console::WriteLine("  Program Position Command: {0}", controllerDiagPacket[0]->ProgramPositionCommand);
        Console::WriteLine("  Program Position Error: {0}", controllerDiagPacket[0]->ProgramPositionError);
        Console::WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0]->ProgramPositionFeedback);
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Connect to the controller.
        Controller myController = Controller.Connect();
        // Retrieve the current ControllerDiagPacket for each axis.
        ControllerDiagPacket controllerDiagPacket = myController.DataCollection.RetrieveDiagnostics();
        // Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0");
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket[0].AnalogInput0);
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket[0].AnalogInput1);
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket[0].AnalogOutput0);
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket[0].AnalogOutput1);
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket[0].AxisFault);
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket[0].AxisName);
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket[0].AxisStatus);
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket[0].CurrentCommand);
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket[0].CurrentError);
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket[0].CurrentFeedback);
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket[0].DigitalInputs);
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket[0].DigitalOutputs);
        Console.WriteLine("  External Position: {0}", controllerDiagPacket[0].PositionFeedbackAuxiliary);
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket[0].PositionCommand);
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket[0].PositionError);
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket[0].PositionFeedback);
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket[0].ProgramPositionCommand);
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket[0].ProgramPositionError);
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket[0].ProgramPositionFeedback);
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Connect to the controller.
        Dim myController As Controller = Controller.Connect
        ' Retrieve the current ControllerDiagPacket for each axis.
        Dim controllerDiagPacket As ControllerDiagPacket = myController.DataCollection.RetrieveDiagnostics
        ' Print out all the information we can for the first ControllerDiagPacket for Axis 0
        Console.WriteLine("Controller Information for Axis 0")
        Console.WriteLine("  Analog Input 0: {0}", controllerDiagPacket.Item(0).AnalogInput0)
        Console.WriteLine("  Analog Input 1: {0}", controllerDiagPacket.Item(0).AnalogInput1)
        Console.WriteLine("  Analog Output 0: {0}", controllerDiagPacket.Item(0).AnalogOutput0)
        Console.WriteLine("  Analog Output 1: {0}", controllerDiagPacket.Item(0).AnalogOutput1)
        Console.WriteLine("  Axis Fault: {0}", controllerDiagPacket.Item(0).AxisFault)
        Console.WriteLine("  Axis Name: {0}", controllerDiagPacket.Item(0).AxisName)
        Console.WriteLine("  Axis Status: {0}", controllerDiagPacket.Item(0).AxisStatus)
        Console.WriteLine("  Current Command: {0}", controllerDiagPacket.Item(0).CurrentCommand)
        Console.WriteLine("  Current Error: {0}", controllerDiagPacket.Item(0).CurrentError)
        Console.WriteLine("  Current Feedback: {0}", controllerDiagPacket.Item(0).CurrentFeedback)
        Console.WriteLine("  Digital Inputs: {0}", controllerDiagPacket.Item(0).DigitalInputs)
        Console.WriteLine("  Digital Outputs: {0}", controllerDiagPacket.Item(0).DigitalOutputs)
        Console.WriteLine("  External Position: {0}", controllerDiagPacket.Item(0).PositionFeedbackAuxiliary)
        Console.WriteLine("  Position Command: {0}", controllerDiagPacket.Item(0).PositionCommand)
        Console.WriteLine("  Position Error: {0}", controllerDiagPacket.Item(0).PositionError)
        Console.WriteLine("  Position Feedback: {0}", controllerDiagPacket.Item(0).PositionFeedback)
        Console.WriteLine("  Program Position Command: {0}", controllerDiagPacket.Item(0).ProgramPositionCommand)
        Console.WriteLine("  Program Position Error: {0}", controllerDiagPacket.Item(0).ProgramPositionError)
        Console.WriteLine("  Program Position Feedback: {0}", controllerDiagPacket.Item(0).ProgramPositionFeedback)
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AnalogInput0">
            <summary>
            Analog Input #0
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AnalogInput1">
            <summary>
            Analog Input #1
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AnalogInput2">
            <summary>
            Analog Input #2, available on certain hardware types only
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AnalogInput3">
            <summary>
            Analog Input #3, available on certain hardware types only
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AnalogOutput0">
            <summary>
            Analog Output #0
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AnalogOutput1">
            <summary>
            Analog Output #1
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AnalogOutput2">
            <summary>
            Analog Output #2, available on certain hardware types only
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AnalogOutput3">
            <summary>
            Analog Output #3, available on certain hardware types only
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AxisStatus">
            <summary>
            Axis status
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AxisFault">
            <summary>
            Axis fault
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AxisName">
            <summary>
            The name of the axis for which this packet is for
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="examples.xml" path="/*/Example[@name=&quot;ControllerDiagPacketOverLoaded&quot;]/*"/>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.Aerotech#Common#INamed{System#String}#Name">
            <summary>
            The name of the axis for which this packet is for
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.PiezoVoltageCommand">
            <summary>The Voltage Command for Piezo stages.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.PiezoVoltageFeedback">
            <summary>The Voltage Feedback for Piezo stages.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.PositionUnitName">
            <summary>The name of the distance units</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.VelocityUnitName">
            <summary>The name of the velocity units</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.AccelerationUnitName">
            <summary>The name of the acceleration units</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.DigitalInputs">
            <summary>
            The digital input bit values for the axis
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.DigitalOutputs">
            <summary>
            The digital output bit values for the axis
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisDiagPacket.DriveStatus">
            <summary>
            The <see cref="P:Aerotech.A3200.Status.AxisDiagPacket.DriveStatus"/> bit values for the axis
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.Debug.BreakpointsManager">
            <summary>
            Provides methods to set and unset breakpoints on program lines
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Debug.BreakpointsManager.Add(Aerotech.Common.FilePoint)">
            <summary>
            Adds a breakpoint on the specified program.
            </summary>
            <param name="location">Contains the source file name (*.PGM) of the program on the SMC as well as a 1-based line number on which to set the breakpoint.</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Debug.BreakpointsManager.Remove(Aerotech.Common.FilePoint)">
            <summary>
            Removes a breakpoint on the specified program.
            </summary>
            <param name="location">Contains the source file name (*.PGM) of the program on the SMC as well as a 1-based line number on which to remove the breakpoint.</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Debug.BreakpointsManager.RemoveAll">
            <summary>
            Removes all breakpoints set on the task.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Debug.BreakpointsManager.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a <see cref="T:System.Collections.IEnumerator"/> object that can be used to enumerate all breakpoints that are currently set.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Debug.BreakpointsManager.System#Collections#Generic#IEnumerable{Aerotech#Common#FilePoint}#GetEnumerator">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to enumerate all breakpoints that are currently set.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.Program">
            <summary>
            Represents a program running on a task
            </summary>
            <example>
This example uses the following namespaces: 
<ul>
<li>Aerotech.A3200</li>
<li>Aerotech.A3200.Status</li>
<li>Aerotech.A3200.Tasks</li>
<li>Aerotech.A3200.Exceptions</li>
<li>System</li>
<li>System.Threading</li>
</ul>
<code language="C++">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200.
        Controller^ myController = Controller::Connect();
        // Put task into Queue mode.
        myController->Tasks[TaskId::T01]->Program->InitializeQueue();
        // Put controller into incremental mode, to guarantee each motion command is executed.
        myController->Commands->Motion->Setup->Incremental();
        // Enable the axis.
        myController->Commands[TaskId::T01]->Motion->Enable("X");
        // Load Queue with a command to perform LINEAR motion.
        for (int i = 0 ; (i < 300); i++)
        {
            while (true)
            {
                try
                {
                    // Load Queue with commands.
                    myController->Commands[TaskId::T01]->Motion->Linear("X", 5, 25);
                    break;
                }
                catch (QueueBufferFullException)
                {
                    // Wait if the Queue is full.
                    Thread::Sleep(10);
                }
            }
        }
        // Collect QueueLineCount to see if there are still commands to execute.
        while (!myController->Tasks[TaskId::T01]->Status->QueueStatus->QueueBufferEmpty)
        {
            // If there are still commands to execute, sleep and then check again on how many commands are left.
            Thread::Sleep(10);
        }
        // Stop using Queue mode.
        myController->Tasks[TaskId::T01]->Program->Stop();
        Controller::Disconnect();
    }
    catch (Exception^ ex)
    {
        Console::WriteLine("Exception occurred: {0}", ex->Message);
    }

]]>
</code>
<code language="C#">
<![CDATA[

    try
    {
        // Initialize the connection to the A3200.
        Controller myController = Controller.Connect();
        // Put task into Queue mode.
        myController.Tasks[TaskId.T01].Program.InitializeQueue();
        // Put controller into incremental mode, to guarantee each motion command is executed.
        myController.Commands.Motion.Setup.Incremental();
        // Enable the axis.
        myController.Commands[TaskId.T01].Motion.Enable("X");
        // Load Queue with a command to perform LINEAR motion.
        for (int i = 0; i < 300; i++)
        {
            while (true)
            {
                try
                {
                    // Load Queue with commands.
                    myController.Commands[TaskId.T01].Motion.Linear("X", 5, 25);
                    break;
                }
                catch (QueueBufferFullException)
                {
                    // Wait if the Queue is full.
                    Thread.Sleep(10);
                }
            }
        }
        // Collect QueueLineCount to see if there are still commands to execute.
        while (!myController.Tasks[TaskId.T01].Status.QueueStatus.QueueBufferEmpty)
        {
            // If there are still commands to execute, sleep and then check again on how many commands are left.
            Thread.Sleep(10);
        }
        // Stop using Queue mode.
        myController.Tasks[TaskId.T01].Program.Stop();
        Controller.Disconnect();
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception occurred: {0}", ex.Message);
    }

]]>
</code>
<code language="VB.NET">
<![CDATA[

    Try 
        ' Initialize the connection to the A3200.
        Dim myController As Controller = Controller.Connect
        ' Put task into Queue mode.
        myController.Tasks.Item(TaskId.T01).Program.InitializeQueue
        ' Put controller into incremental mode, to guarantee each motion command is executed.
        myController.Commands.Motion.Setup.Incremental
        ' Enable the axis.
        myController.Commands.Item(TaskId.T01).Motion.Enable("X")
        ' Load Queue with a command to perform LINEAR motion.
        Dim i As Integer
        For i = 0 To 300 - 1
            While (True)
                Try
                    'Load Queue with commands.
                    myController.Commands.Item(TaskId.T01).Motion.Linear("X", 5, 25)
                    Exit While
                Catch ex As QueueBufferFullException
                    ' Wait until buffer is not full.
                    Thread.Sleep(10)
                End Try
            End While
        Next i
        ' Collect QueueLineCount to see if there are still commands to execute.
        Do While (Not myController.Tasks.Item(TaskId.T01).Status.QueueStatus.QueueBufferEmpty)
            ' If there are still commands to execute, sleep and then check again on how many commands are left.
            Thread.Sleep(10)
        Loop
        ' Stop using Queue mode.
        myController.Tasks.Item(TaskId.T01).Program.Stop
        Controller.Disconnect
    Catch ex As Exception
        Console.WriteLine("Exception occurred: {0}", ex.Message)
    End Try

]]>
</code>

</example>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Program.Associate(System.String)">
            <summary>
            Associates a program loaded on the SMC to the task so that it can be executed
            </summary>
            <param name="smcProgramName">The name of the program that is loaded on the SMC</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Program.Load(System.String)">
            <summary>
            Compiles (if needed), loads, and associates the loaded file with the task
            </summary>
            <param name="filePath">The path to a source (.PGM) or object (.OGM) file to load on the task</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Program.Run(System.String)">
            <summary>
            Compiles (if needed), loads, associates, and executes the loaded file on the task
            </summary>
            <param name="filePath">The path to a source (.PGM) or object (.OGM) file to execute on the task</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Program.BufferedRun(System.String)">
            <summary>
            Executes the program in buffered mode on the task, use if program is too big for <see cref="M:Aerotech.A3200.Tasks.Program.Run(System.String)"/>
            </summary>
            <param name="filePath">The path to the source (.PGM) file to execute on the task</param>
            <remarks>
            	<para>
            		This mode can run programs of arbitrary size and should be used only if the <see cref="M:Aerotech.A3200.Tasks.Program.Run(System.String)"/>
            		cannot run a program of given size.
            		This mode has major limitations in terms of programming language features.
            		If this is used the task cannot be used for anything else until the program execution is done or
            		<see cref="M:Aerotech.A3200.Tasks.Program.Stop"/> is called.
            	</para>
            	<para>
            		See the main help file for additional information.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Program.Start">
            <summary>
            Starts execution of the program currently loaded on the task
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Program.Stop">
            <summary>
            Stops execution of the currently loaded program.
            </summary>
            <remarks>
            	Calling this method will also remove all breakpoints on the program.
            	This method will wait up to 10 seconds for the program to stop.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Program.Stop(System.Int32)">
            <summary>
            Stops execution of the currently loaded program.
            </summary>
            <param name="timeout">The timeout in milliseconds</param>
            <remarks>Calling this method will also remove all breakpoints on the program, if an timeout is given 
            		 that is less than 0, the sleep will not execute.</remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Program.InitializeQueue">
            <summary>Changes the task to execute commands in queue mode</summary>
            <remarks>
            	<para>To change the task to not execute commands in queue, call <see cref="M:Aerotech.A3200.Tasks.Program.Stop"/></para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Program.Error">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Status.ErrorInformation"/> object which can be used to retrieve information about any errors on the task
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Program.FileName">
            <summary>
            Returns the file name of the currently executing program on the task
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Program.Debug">
            <summary>
            Provides access to advanced program control features to aid in debugging
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Program.Associated">
            <summary>
            Returns a <see cref="T:System.Boolean"/> to denote whether or not a program is currently associated with the task
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.TasksCollection">
            <summary>
            Represents the tasks
            </summary>
            <remarks>
            	<para>
            		You can get the states of all the tasks using <see cref="P:Aerotech.A3200.Tasks.TasksCollection.States"/>,
            		and you can stop execution of programs on all tasks by using <see cref="M:Aerotech.A3200.Tasks.TasksCollection.StopPrograms"/>.
            	</para>
            	<para>
            		To get a specific task, use indexer.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TasksCollection.StopPrograms">
            <summary>
            Stops all programs on all tasks.
            </summary>
            <remarks>
            	This method stops all programs atomically.
            	This method will wait up to 10 seconds for all programs to stop.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TasksCollection.StopPrograms(System.Int32)">
            <summary>
            Stops all programs on all tasks.
            </summary>
            <param name="timeout">The timeout in milliseconds</param>
            <remarks>
            This method stops all programs atomically.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TasksCollection.StopPrograms(Aerotech.A3200.TaskMask)">
            <summary>Stops the given tasks</summary>
            <param name="taskMask">The mask of tasks to stop</param>
            <remarks>
            	<para>
            		This method will stop any programs running in the tasks. Therefore, use with care.
            	</para>
            	<para>
            		This method stops all programs atomically.
            	</para>
            	<para>
            		This method will wait up to 10 seconds for all programs to stop.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TasksCollection.StopPrograms(Aerotech.A3200.TaskMask,System.Int32)">
            <summary>Stops the given tasks</summary>
            <param name="taskMask">The mask of tasks to stop</param>
            <param name="timeout">The timeout in milliseconds</param>
            <remarks>
            	<para>
            		This method will stop any programs running in the tasks. Therefore, use with care.
            	</para>
            	<para>
            		This method stops all the programs atomically.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TasksCollection.StopPrograms(Aerotech.A3200.TaskId[])">
            <summary>Stops the given tasks</summary>
            <param name="taskIds">The ids of the tasks to stop</param>
            <remarks>
            	<para>
            		This method will stop any programs running in the tasks. Therefore, use with care.
            	</para>
            	<para>
            		This method stops all programs atomically.
            	</para>
            	<para>
            		This method will wait up to 10 seconds for programs to stop.
            	</para>
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TasksCollection.StopPrograms(Aerotech.A3200.TaskId[],System.Int32)">
            <summary>Stops the given tasks</summary>
            <param name="taskIds">The ids of the tasks to stop</param>
            <param name="timeout">The per task timeout in milliseconds</param>
            <remarks>
            	<para>
            		This method will stop any programs running in the tasks. Therefore, use with care.
            	</para>
            	<para>
            		This method stops all programs atomically.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TasksCollection.States">
            <summary>
            Returns a collection of <see cref="T:Aerotech.A3200.Tasks.TaskState"/> objects that represent the current task state (idle, associated, error, etc.) for each task.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TasksCollection.Statuses">
            <summary>
            Returns a collection of <see cref="T:Aerotech.A3200.Tasks.TaskStatus"/> objects that contain several status items (such as task error, task warning, etc.) for each task. 
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TasksCollection.MfoValues">
            <summary>
            Returns a collection of the current MFO value for each task.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TasksCollection.TaskExecutionModes">
            <summary>
            Returns a collection of the current execution mode (step into, step over, etc.) for each task.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.Task">
            <summary>
            Represents a task. This class exposes properties and methods to control the execution and debug programs running on the task.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Task.Retrace(System.Boolean)">
            <summary>
            Sets the retrace mode on the task.
            </summary>
            <param name="retraceEnabled">Passing <c>true</c> as the argument enables retrace mode on the task; <c>false</c> disables retrace mode.</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Task.Feedhold(System.Boolean)">
            <summary>
            Feedholds or releases a feedhold on the task.
            </summary>
            <param name="feedholdEnabled">Passing <c>true</c> as the argument feedholds the task; <c>false</c> releases the feedhold.</param>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Task.Name">
            <summary>
            The "name" of this task
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Task.ExecutionMode">
            <summary>
            The current task execution mode (step into, step over, etc.) for the task.
            </summary>
            <remarks>
            Setting this property has no effect on currently running programs but will rather come into effect the next time program execution is started on this task.
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Task.Program">
            <summary>
            Returns a <see cref="P:Aerotech.A3200.Tasks.Task.Program"/> object to control program execution on the task.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Task.Callbacks">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Callbacks.TaskCallbackContainer"/> object to control callback registration for this task.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Task.Status">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Tasks.TaskStatus"/> object that contains various status items for the task
            </summary>
            <remarks>
            	<para>
            		Contains things such as task error, task warning, and task status and task mode bits 
            		(as seen on the Task Status0, Task Status1, Task Status2 and Task Mode tabs in the Status Utility).
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Task.State">
            <summary>
            Returns the <see cref="T:Aerotech.A3200.Tasks.TaskState"/> (idle, error, etc.) of the current task.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.Debug.ProgramDebug">
            <summary>
            Provides information and methods to control program execution to assist in debugging.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Debug.ProgramDebug.StepInto">
            <summary>
            Resumes execution of the program one line at a time.
            </summary>
            <remarks>
            Will "step into" called functions so the code within called functions can also be debugged.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Debug.ProgramDebug.StepOver">
            <summary>
            Resumes execution of the program one line at a time.
            </summary>
            <remarks>
            Will "step over" called functions so execution will not pause inside called functions but instead stop when the function returns.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Debug.ProgramDebug.Pause">
            <summary>
            Pauses program execution.
            </summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.Debug.ProgramDebug.SetLineNumber(System.Int32)">
            <summary>Sets the program line number to a specific line.</summary>
            <param name="lineNumber">The line that will be executed next</param>
            <remarks>
            	<para>
            		The task will be in <see cref="F:Aerotech.A3200.Tasks.TaskState.ProgramPaused"/> state after this function is called.
            		It is not always safe to set the line number to an arbitrary line.
            	</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="lineNumber"/> is less than 1</exception>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Debug.ProgramDebug.SourceFileAvailable">
            <summary>
            Returns whether <see cref="P:Aerotech.A3200.Tasks.Debug.ProgramDebug.SourceFile"/> is available or not.
            </summary>
            <remarks>
            Returns a boolean value which denotes whether or not the source file from which the program 
            currently loaded on the task was compiled from is available.
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Debug.ProgramDebug.SourceFile">
            <summary>
            Returns the full path to the source file from which the program currently loaded on the task was compiled from (if available).
            </summary>
            <remarks>
            If the source file isn't available, this property returns <c>null</c>.
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Debug.ProgramDebug.Location">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Tasks.ProgramFilePoint"/> which denotes the source file path of the currently executing program on the task (if available).
            </summary>
            <remarks>
             If the source file is not available, then only the program name of the program loaded on the task will be returned. 
             The currently executing line number is also returned.
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Debug.ProgramDebug.LastQueuedLineNumber">
            <summary>Returns the line number of the last queued line.</summary>
            <remarks>
            	<para>
            		This should be used in conjunction with <see cref="M:Aerotech.A3200.Tasks.Program.InitializeQueue"/> to
            		be able to detect when a line has finished executing.
            	</para>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.Debug.ProgramDebug.Breakpoints">
            <summary>
            Returns a <see cref="T:Aerotech.A3200.Tasks.Debug.BreakpointsManager"/> object which can be used to add and remove breakpoints on the currently executing program.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.TaskStatus">
            <summary>
            Contains various task status items such as task error, task warning, task mode, etc.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus.Status0">
            <summary>
            The TaskStatus0 status bits; these are identical to the bits displayed on the Task Status0 tab of the Status Utility.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus.Status1">
            <summary>
            The TaskStatus1 status bits; these are identical to the bits displayed on the Task Status1 tab of the Status Utility.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus.Status2">
            <summary>
            The TaskStatus2 status bits; these are identical to the bits displayed on the Task Status2 tab of the Status Utility.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus.State">
            <summary>
            This value represents information about the state of this task; this is identical to the state displayed on the Tasks tab of the Status Utility.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus.QueueStatus">
            <summary>
            The QueueStatus status bits.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus.Error">
            <summary>
            The current error for the task
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus.Warning">
            <summary>
            The current warning code for the task
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus.Mode">
            <summary>
            The TaskMode status bits; these are identical to the bits displayed on the Task Mode tab of the Status Utility.
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.VariableCollection`1">
            <summary>An indexed collection of variables</summary>
            <typeparam name="TType">The types of variables stored</typeparam>
        </member>
        <member name="M:Aerotech.A3200.Variables.VariableCollection`1.GetMultiple(System.Int32,System.Int32)">
            <summary>
            Retrieves multiple variable values.
            </summary>
            <remarks>For double variables, this retrieval is optimized to be done simultaneously.</remarks>
            <param name="startIndex">The 0-based variable index</param>
            <param name="count">The number of variables</param>
            <returns>An array of retrieved variable values</returns>
        </member>
        <member name="M:Aerotech.A3200.Variables.VariableCollection`1.SetMultiple(System.Int32,`0[])">
            <summary>
            Sets multiple variable values.
            </summary>
            <remarks>For double variables, setting multiple values is optimized to be done simultaneously.</remarks>
            <param name="startIndex">The 0-based variable index</param>
            <param name="newValues">An array of new values to set starting at the specified index</param>
            <returns>An array of retrieved variable values</returns>
        </member>
        <member name="M:Aerotech.A3200.Variables.VariableCollection`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> object in order to enumerate all variables of the type of the collection.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.VariableCollection`1.Item(System.String)">
            <summary>Get a variable of the given name</summary>
            <param name="name">The name of the variable</param>
            <returns>The variable with the given <paramref name="name"/></returns>
            <exception cref="T:System.ArgumentNullException">If given <paramref name="name"/> is <c>null</c></exception>
        </member>
        <member name="P:Aerotech.A3200.Variables.VariableCollection`1.Item(System.Int32)">
            <summary>
            Get a variable based on the variable number/index.
            </summary>
            <param name="number">The number of the variable</param>
            <returns>The variable with the given <paramref name="number"/></returns>
        </member>
        <member name="P:Aerotech.A3200.Variables.VariableCollection`1.Count">
            <summary>
            The number of variables in the collection
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Variables.VariableCollection`1.Capacity">
            <summary>
            The number of variables in the collection
            </summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.TaskState">
            <summary culture="en">
						This value represents information about the state of this task.
					</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.Unavailable">
            <summary>Unavailable</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.Inactive">
            <summary>Inactive</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.Idle">
            <summary>Idle</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.ProgramReady">
            <summary>Program Ready</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.ProgramRunning">
            <summary>Program Running</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.ProgramFeedheld">
            <summary>Program Feedheld</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.ProgramPaused">
            <summary>Program Paused</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.ProgramComplete">
            <summary>Program Complete</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.Error">
            <summary>Error</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.Queue">
            <summary>Queue</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskState.PLCReserved">
            <summary>PLC Reserved</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.MotorType">
            <summary culture="en">Represents the motor type</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.MotorType.ACBrushlessHallEffect">
            <summary culture="en">AC Brushless (Hall-Effect Switches)</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.MotorType.ACBrushlessAutoMSET">
            <summary culture="en">AC Brushless (Auto-MSET)</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.MotorType.DCBrush">
            <summary culture="en">DC Brush</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.MotorType.StepperMotor">
            <summary culture="en">Stepper Motor</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.MotorType.Ceramic">
            <summary culture="en">Ceramic</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.MotorType.ACBrushlessActuator">
            <summary culture="en">AC Brushless Actuator</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.MotorType.TwoPhaseACBrushless">
            <summary culture="en">2-Phase AC Brushless</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.MotorType.ACBrushlessCommutationSearch">
            <summary culture="en">AC Brushless (Commutation Search)</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.MotorType.PiezoActuator">
            <summary culture="en">Piezo Actuator</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.HomeType">
            <summary culture="en">Represents the home type</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.HomeType.PastLimittoMarker">
            <summary culture="en">Home Past Limit to Marker</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.HomeType.ToLimitandReversetoMarker">
            <summary culture="en">Home to Limit and Reverse to Marker</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.HomeType.ToMarkerOnly">
            <summary culture="en">Home to Marker Only</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.HomeType.ToLimitOnly">
            <summary culture="en">Home to Limit Only</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.HomeType.AtCurrentPosition">
            <summary culture="en">Home at Current Position</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.HomeType.AtCurrentPositionFeedback">
            <summary culture="en">Home at Current Position Feedback</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.HomeType.AtCurrentPositionAbsolute">
            <summary culture="en">Home at Current Position Absolute</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.PositionFeedbackType">
            <summary culture="en">Represents the position feedback type</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.None">
            <summary culture="en">None (Open-Loop)</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.LocalEncoderCounter">
            <summary culture="en">Local Encoder Counter</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.EncoderMultiplier">
            <summary culture="en">Encoder Multiplier</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.AnalogInput">
            <summary culture="en">Analog Input</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.EnDatAbsoluteEncoder">
            <summary culture="en">EnDat Absolute Encoder</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.HallEffectSwitches">
            <summary culture="en">Hall-Effect Switches</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.Resolver">
            <summary culture="en">Resolver</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.ParallelLaserInterface">
            <summary culture="en">Parallel Laser Interface</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.SerialEncoder">
            <summary culture="en">Serial Encoder</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.ResoluteAbsoluteEncoder">
            <summary culture="en">Resolute Absolute Encoder</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.PositionDetector">
            <summary culture="en">Position Detector</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackType.CapacitanceSensor">
            <summary culture="en">Capacitance Sensor</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.VelocityFeedbackType">
            <summary culture="en">Represents the velocity feedback type</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackType.None">
            <summary culture="en">None (Use Position Feedback)</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackType.LocalEncoderCounter">
            <summary culture="en">Local Encoder Counter</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackType.EncoderMultiplier">
            <summary culture="en">Encoder Multiplier</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackType.AnalogInput">
            <summary culture="en">Analog Input</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackType.Resolver">
            <summary culture="en">Resolver</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackType.ParallelLaserInterface">
            <summary culture="en">Parallel Laser Interface</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackType.SerialEncoder">
            <summary culture="en">Serial Encoder</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.ParameterContext">
            <summary culture="en">Represents the parameter types</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.ParameterContext.Axis">
            <summary culture="en">Axis parameter</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.ParameterContext.Task">
            <summary culture="en">Task parameter</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.ParameterContext.System">
            <summary culture="en">System parameter</summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.TaskExecutionMode">
            <summary culture="en">Represents the task execution modes</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskExecutionMode.RunInto">
            <summary culture="en">Run into subroutines</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskExecutionMode.StepInto">
            <summary culture="en">Step into subroutines</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskExecutionMode.StepOver">
            <summary culture="en">Step over subroutines</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.TaskExecutionMode.RunOver">
            <summary culture="en">Run over subroutines</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.ProgramAutomationMode">
            <summary culture="en">Represents the program automation modes</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.ProgramAutomationMode.Include">
            <summary culture="en">Automatically include the given file into any program that is compiled</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.ProgramAutomationMode.Download">
            <summary culture="en">Download file so it can be called into later on</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.ProgramAutomationMode.RunSilent">
            <summary culture="en">Run file silently</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.ProgramAutomationMode.Run">
            <summary culture="en">Run file</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.ProgramAutomationMode.DownloadAndAssociate">
            <summary culture="en">Download file and associate to a task but do not start execution</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.UnitsType">
            <summary culture="en">Represents the units types</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.UnitsType.Secondary">
            <summary culture="en">Secondary units</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.UnitsType.Primary">
            <summary culture="en">Primary units</summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.QueueStatus">
            <summary culture="en">Represents a set of queue status</summary><remarks culture="en">
						This value provides status information about the queue of a given task. The following table describes each bit of this value.
					</remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.QueueStatus.op_Explicit(System.Int32)~Aerotech.A3200.Tasks.QueueStatus">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Tasks.QueueStatus"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Tasks.QueueStatus.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.QueueStatus.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.QueueStatus.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.QueueStatus.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.QueueStatus.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.QueueStatus.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Tasks.QueueStatus.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.QueueModeActive">
            <summary culture="en">Queue Mode Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.QueueBufferEmpty">
            <summary culture="en">Queue Buffer Empty</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.QueueBufferFull">
            <summary culture="en">Queue Buffer Full</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.QueueBufferStarted">
            <summary culture="en">Queue Buffer Started</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.QueueBufferPaused">
            <summary culture="en">Queue Buffer Paused</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.QueueLargeProgramExecuting">
            <summary culture="en">Queue is executing a large program.</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.QueueStatus.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Commands.WaitOption">
            <summary culture="en">Represents the modes to wait for motion completion</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.WaitOption.MoveDone">
            <summary culture="en">Wait for MoveDone bit to be set</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.WaitOption.InPosition">
            <summary culture="en">Wait for InPosition bit to be set</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.DataCollectionTriggerType">
            <summary culture="en">Represents the types of data collection trigger types</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionTriggerType.Immediate">
            <summary culture="en">Starts data collection immediately</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionTriggerType.Continuous">
            <summary culture="en">Starts continuous data collection</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionTriggerType.ScopeTrig">
            <summary>ScopeTrig</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionTriggerType.ScopeTrigContinuous">
            <summary>ScopeTrigContinuous</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.ScopeTrigId">
            <summary culture="en">Specifies the known scope trig application Ids</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.ScopeTrigId.Default">
            <summary culture="en">No application Id was specified</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.ScopeTrigId.DigitalScope">
            <summary culture="en">Digital Scope was specified</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.ScopeTrigId.MotionDesigner">
            <summary culture="en">Motion Designer was specified</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.ScopeTrigId.MotionSimulator">
            <summary culture="en">Motion Simulator was specified</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.DataCollectionFlags">
            <summary culture="en">Specifies the status flags of data collection</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionFlags.Initializing">
            <summary culture="en">Data collection is initializing.</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionFlags.Triggered">
            <summary culture="en">Data collection was triggered</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionFlags.Done">
            <summary culture="en">Data collection is done</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionFlags.Overflow">
            <summary culture="en">Data collection buffer overflowed</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionFlags.SampleTrigger">
            <summary culture="en">Sample trigger mode is active.</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionFlags.FirstMillisecond">
            <summary culture="en">Data collection is collecting the first millisecond of data</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionFlags.ContinuousMode">
            <summary culture="en">Continuous data collection mode is active</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionFlags.IsScopeTrigInitiated">
            <summary culture="en">Data collection was started by a SCOPETRIG</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.DataCollectionFlags.UploadingDriveBuffers">
            <summary culture="en">Data is being uploaded to the SMC from the drive buffers</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.PiezoDefaultServoState">
            <summary culture="en">Represents the piezo default servo state.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PiezoDefaultServoState.Off">
            <summary culture="en">Servo Off</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PiezoDefaultServoState.On">
            <summary culture="en">Servo On</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.ModbusStatus">
            <summary culture="en">Represents a Modbus status</summary><remarks culture="en">
						This value provides status information about a Modbus connection. The following table describes each bit of this value.
					</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.ModbusStatus.op_Explicit(System.Int32)~Aerotech.A3200.Status.ModbusStatus">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Status.ModbusStatus"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Status.ModbusStatus.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.ModbusStatus.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Status.ModbusStatus.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.ModbusStatus.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.ModbusStatus.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.ModbusStatus.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Status.ModbusStatus.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.Connected">
            <summary culture="en">Connected</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.SocketError">
            <summary culture="en">Socket Error</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.ModbusException">
            <summary culture="en">Modbus Exception</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.SystemError">
            <summary culture="en">System Error</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.SystemInitializing">
            <summary culture="en">System Initializing</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.ShortHeaderReceived">
            <summary culture="en">Short Header Received</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.ShortPacketReceived">
            <summary culture="en">Short Packet Received</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.ModbusStatus.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Commands.LoopTransmissionMode">
            <summary culture="en">The type of loop transmission disturbance to use</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionMode.Off">
            <summary culture="en">Turn off loop transmission</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionMode.Sinusoid">
            <summary culture="en">Uses a sinusoid disturbance</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionMode.SinusoidGantry">
            <summary culture="en">Uses a sinusoid disturbance and excites both axes of a gantry</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionMode.WhiteNoise">
            <summary culture="en">Uses a white noise disturbance</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionMode.WhiteNoiseGantry">
            <summary culture="en">Use a white noise disturbance and excites both axes of a gantry</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.LoopTransmissionType">
            <summary culture="en">The loop transmission type to use</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionType.OpenLoop">
            <summary culture="en">Open Loop</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionType.ClosedLoop">
            <summary culture="en">Closed Loop</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionType.CurrentLoop">
            <summary culture="en">Current Loop</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionType.AFOpenLoop">
            <summary culture="en">AF Open Loop</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.LoopTransmissionType.AFClosedLoop">
            <summary culture="en">AF Closed Loop</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.OnOff">
            <summary culture="en">Represents the OnOff mode in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.OnOff.Off">
            <summary culture="en">Off or 0 is issued</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.OnOff.On">
            <summary culture="en">On or 1 is issued</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.PsoMode">
            <summary culture="en">Represents the PSO mode in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.PsoMode.Reset">
            <summary culture="en">Reset PSO</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.PsoMode.Off">
            <summary culture="en">Turn off PSO</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.PsoMode.Arm">
            <summary culture="en">Arm PSO</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.PsoMode.Fire">
            <summary culture="en">Fire PSO</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.PsoMode.On">
            <summary culture="en">Turn on PSO</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.PsoMode.FireContinuous">
            <summary culture="en">Fire Continuous</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.PsoMode.ArmPwm">
            <summary culture="en">Arm PSO PWM</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.PsoWindowDependance">
            <summary culture="en">Specifies the window control mode to use</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.PsoWindowDependance.CoDependent">
            <summary culture="en">The windows are codependent</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.PsoWindowDependance.Independent">
            <summary culture="en">The windows are independent</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.RegisterType">
            <summary culture="en">Modbus registers</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RegisterType.MasterInputWords">
            <summary culture="en">Master input words (read only)</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RegisterType.SlaveInputWords">
            <summary culture="en">Slave input words (read only)</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RegisterType.MasterOutputWords">
            <summary culture="en">Master Output words</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RegisterType.SlaveOutputWords">
            <summary culture="en">Slave Output words</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RegisterType.MasterInputBits">
            <summary culture="en">Master input Bits (read only)</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RegisterType.SlaveInputBits">
            <summary culture="en">Slave input Bits (read only)</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RegisterType.MasterOutputBits">
            <summary culture="en">Master Output Bits</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RegisterType.SlaveOutputBits">
            <summary culture="en">Slave Output Bits</summary>
        </member>
        <member name="T:Aerotech.A3200.ConfigurationItem">
            <summary culture="en">Configuration Item numbers</summary>
        </member>
        <member name="F:Aerotech.A3200.ConfigurationItem.ParameterFile">
            <summary culture="en">Active Parameter File Path</summary>
        </member>
        <member name="F:Aerotech.A3200.ConfigurationItem.CalibrationFile1D">
            <summary culture="en">Active 1D Calibration File</summary>
        </member>
        <member name="F:Aerotech.A3200.ConfigurationItem.CalibrationFile2D">
            <summary culture="en">Active 2D Calibration File</summary>
        </member>
        <member name="F:Aerotech.A3200.ConfigurationItem.CalibrationFileGalvo2D">
            <summary culture="en">Active 2D Galvo Calibration File</summary>
        </member>
        <member name="F:Aerotech.A3200.ConfigurationItem.CalibrationFileGalvoGCal">
            <summary culture="en">Active Galvo GCal Calibration Files</summary>
        </member>
        <member name="F:Aerotech.A3200.ConfigurationItem.CalibrationFileGalvoPowerCorrection">
            <summary culture="en">Active Galvo Power Correction Calibration Files</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.InputBoxClickedButton">
            <summary culture="en">Specifies the button that was clicked as a result of callback</summary>
        </member>
        <member name="F:Aerotech.A3200.Callbacks.InputBoxClickedButton.Ok">
            <summary culture="en">Ok button was clicked</summary>
        </member>
        <member name="F:Aerotech.A3200.Callbacks.InputBoxClickedButton.Cancel">
            <summary culture="en">Cancel button was clicked</summary>
        </member>
        <member name="T:Aerotech.A3200.Callbacks.InputBoxKind">
            <summary culture="en">The kind of data to return in callbacks</summary>
        </member>
        <member name="F:Aerotech.A3200.Callbacks.InputBoxKind.Double">
            <summary culture="en">Return a double</summary>
        </member>
        <member name="F:Aerotech.A3200.Callbacks.InputBoxKind.Integer">
            <summary culture="en">Return an integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Callbacks.InputBoxKind.String">
            <summary culture="en">Return a string</summary>
        </member>
        <member name="T:Aerotech.A3200.Internal.FlashConfig.FlashConfigOperationStatus">
            <summary/>
        </member>
        <member name="F:Aerotech.A3200.Internal.FlashConfig.FlashConfigOperationStatus.Failed">
            <summary/>
        </member>
        <member name="F:Aerotech.A3200.Internal.FlashConfig.FlashConfigOperationStatus.Successful">
            <summary/>
        </member>
        <member name="F:Aerotech.A3200.Internal.FlashConfig.FlashConfigOperationStatus.FlashConfigNotSupported">
            <summary/>
        </member>
        <member name="T:Aerotech.Common.CalibrationFileFormat">
            <summary culture="en">
						Specifies what dimension a calibration file is
					</summary>
        </member>
        <member name="F:Aerotech.Common.CalibrationFileFormat.Unknown">
            <summary culture="en">The dimensionality of the calibration file is unknown</summary>
        </member>
        <member name="F:Aerotech.Common.CalibrationFileFormat.Calibration1D">
            <summary culture="en">The axis calibration file is 1 dimensional</summary>
        </member>
        <member name="F:Aerotech.Common.CalibrationFileFormat.Calibration2D">
            <summary culture="en">The axis calibration file is 2 dimensional</summary>
        </member>
        <member name="F:Aerotech.Common.CalibrationFileFormat.Galvo2D">
            <summary culture="en">The galvo calibration file is 2 dimensional</summary>
        </member>
        <member name="F:Aerotech.Common.CalibrationFileFormat.GalvoPowerCorrection">
            <summary culture="en">The galvo power correction file</summary>
        </member>
        <member name="T:Aerotech.AeroBasic.CompilerErrorType">
            <summary culture="en">
								The type of error that occured during compilation
							</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerErrorType.Information">
            <summary culture="en">
								The build result describes some informational (non-critical) detail about the compilation
							</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerErrorType.Warning">
            <summary culture="en">
								The build result describes a warning that occurred during the compilation
							</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerErrorType.Error">
            <summary culture="en">
								The build result describes an error that occurred during the compilation
							</summary>
        </member>
        <member name="F:Aerotech.AeroBasic.CompilerErrorType.None">
            <summary>None</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.AxisCalibration">
            <summary>Axis Calibration</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.AxisCalibration.FILETYPE_UNKNOWN">
            <summary culture="en">The dimensionality of the calibration file is unknown</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.AxisCalibration.FILETYPE_1D">
            <summary culture="en">The axis calibration file is 1 dimensional</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.AxisCalibration.FILETYPE_2D">
            <summary culture="en">The axis calibration file is 2 dimensional</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.AxisCalibration.FILETYPE_GALVO_2D">
            <summary culture="en">The galvo calibration file is 2 dimensional</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.AxisCalibration.FILETYPE_GALVO_POWERCORRECTION">
            <summary culture="en">The galvo Power Correction file is 2 dimensional</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.Camming">
            <summary>Camming</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.STAT_NOT_ALLOCATED">
            <summary>STAT_NOT_ALLOCATED</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.STAT_ALLOCATED">
            <summary>STAT_ALLOCATED</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.STAT_COEFFS_BUSY">
            <summary>STAT_COEFFS_BUSY</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.STAT_COEFFS_DONE">
            <summary>STAT_COEFFS_DONE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.STAT_IN_USE">
            <summary>STAT_IN_USE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.MODE_OFF">
            <summary>MODE_OFF</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.MODE_RELATIVE">
            <summary>MODE_RELATIVE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.MODE_ABSOLUTE">
            <summary>MODE_ABSOLUTE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.MODE_VELOCITY">
            <summary>MODE_VELOCITY</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.MODE_MAX">
            <summary>MODE_MAX</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.POINT_LINEAR">
            <summary>POINT_LINEAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.POINT_CUBIC">
            <summary>POINT_CUBIC</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Camming.POINT_MAX">
            <summary>POINT_MAX</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.CNCProgram">
            <summary>CNC Program</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.CNCProgram.TASKEXEC_DEFAULT">
            <summary>TASKEXEC_DEFAULT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.CNCProgram.TASKEXEC_AUTO_INTO">
            <summary>TASKEXEC_AUTO_INTO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.CNCProgram.TASKEXEC_STEP_INTO">
            <summary>TASKEXEC_STEP_INTO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.CNCProgram.TASKEXEC_STEP_OVER">
            <summary>TASKEXEC_STEP_OVER</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.CNCProgram.TASKEXEC_AUTO_OVER">
            <summary>TASKEXEC_AUTO_OVER</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.CNCProgram.ERR_TYPE_MSG">
            <summary>ERR_TYPE_MSG</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.CNCProgram.ERR_TYPE_WARN">
            <summary>ERR_TYPE_WARN</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.CNCProgram.ERR_TYPE_ERROR">
            <summary>ERR_TYPE_ERROR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.CNCProgram.ERR_TYPE_NONE">
            <summary>ERR_TYPE_NONE</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.DisplayFlags">
            <summary>Display Flags</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.LIST">
            <summary>LIST</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX">
            <summary>MSGBOX</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.INPUT">
            <summary>INPUT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.LAMP">
            <summary>LAMP</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGMENU">
            <summary>MSGMENU</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGTASK">
            <summary>MSGTASK</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MANIO">
            <summary>MANIO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.LIST_CLEAR">
            <summary>LIST_CLEAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.LIST_SHOW">
            <summary>LIST_SHOW</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.LIST_HIDE">
            <summary>LIST_HIDE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.PROGRAM">
            <summary>PROGRAM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.FILE_SELECT">
            <summary>FILE_SELECT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_BUTTONS_OKONLY">
            <summary>MSGBOX_BUTTONS_OKONLY</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_BUTTONS_OKCANCEL">
            <summary>MSGBOX_BUTTONS_OKCANCEL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_BUTTONS_ABORTRETRYIGNORE">
            <summary>MSGBOX_BUTTONS_ABORTRETRYIGNORE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_BUTTONS_YESNOCANCEL">
            <summary>MSGBOX_BUTTONS_YESNOCANCEL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_BUTTONS_YESNO">
            <summary>MSGBOX_BUTTONS_YESNO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_BUTTONS_RETRYCANCEL">
            <summary>MSGBOX_BUTTONS_RETRYCANCEL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_ICON_CRITICAL">
            <summary>MSGBOX_ICON_CRITICAL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_ICON_QUESTION">
            <summary>MSGBOX_ICON_QUESTION</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_ICON_EXCLAMATION">
            <summary>MSGBOX_ICON_EXCLAMATION</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_ICON_INFORMATION">
            <summary>MSGBOX_ICON_INFORMATION</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_DEFAULT_BUTTON_1">
            <summary>MSGBOX_DEFAULT_BUTTON_1</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_DEFAULT_BUTTON_2">
            <summary>MSGBOX_DEFAULT_BUTTON_2</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_DEFAULT_BUTTON_3">
            <summary>MSGBOX_DEFAULT_BUTTON_3</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_OK_BUTTON">
            <summary>MSGBOX_OK_BUTTON</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_CANCEL_BUTTON">
            <summary>MSGBOX_CANCEL_BUTTON</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_ABORT_BUTTON">
            <summary>MSGBOX_ABORT_BUTTON</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_RETRY_BUTTON">
            <summary>MSGBOX_RETRY_BUTTON</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_IGNORE_BUTTON">
            <summary>MSGBOX_IGNORE_BUTTON</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_YES_BUTTON">
            <summary>MSGBOX_YES_BUTTON</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGBOX_NO_BUTTON">
            <summary>MSGBOX_NO_BUTTON</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGINPUT_INTEGER">
            <summary>MSGINPUT_INTEGER</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGINPUT_STRING">
            <summary>MSGINPUT_STRING</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGMENU_ADD">
            <summary>MSGMENU_ADD</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGMENU_SHOW">
            <summary>MSGMENU_SHOW</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGMENU_REMOVE">
            <summary>MSGMENU_REMOVE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGPROGRAM_ABORT">
            <summary>MSGPROGRAM_ABORT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGPROGRAM_RESET">
            <summary>MSGPROGRAM_RESET</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGPROGRAM_EXECUTE">
            <summary>MSGPROGRAM_EXECUTE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGPROGRAM_FORCE_EXECUTE">
            <summary>MSGPROGRAM_FORCE_EXECUTE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGFILESELECT_OPEN">
            <summary>MSGFILESELECT_OPEN</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DisplayFlags.MSGFILESELECT_SAVE">
            <summary>MSGFILESELECT_SAVE</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.Drive">
            <summary>Drive</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_INVALID">
            <summary>HARDWARE_TYPE_INVALID</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_REPEATER">
            <summary>HARDWARE_REPEATER</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_THIRDPARTY">
            <summary>HARDWARE_THIRDPARTY</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_PC">
            <summary>HARDWARE_PC</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_NDRIVEHL_REV_A">
            <summary>HARDWARE_NDRIVEHL_REV_A</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEHP_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEHP_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NPAQ_REV_DASH">
            <summary>HARDWARE_TYPE_NPAQ_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEHP_REV_A">
            <summary>HARDWARE_TYPE_NDRIVEHP_REV_A</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVECP_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVECP_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NSERVO2_REV_DASH">
            <summary>HARDWARE_TYPE_NSERVO2_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NSERVO4_REV_DASH">
            <summary>HARDWARE_TYPE_NSERVO4_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NPAQ_REV_A">
            <summary>HARDWARE_TYPE_NPAQ_REV_A</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NSERVO1_REV_DASH">
            <summary>HARDWARE_TYPE_NSERVO1_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NSERVO3_REV_DASH">
            <summary>HARDWARE_TYPE_NSERVO3_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVECP_REV_A">
            <summary>HARDWARE_TYPE_NDRIVECP_REV_A</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_USER_001">
            <summary>HARDWARE_TYPE_USER_001</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_USER_002">
            <summary>HARDWARE_TYPE_USER_002</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_USER_003">
            <summary>HARDWARE_TYPE_USER_003</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEMP_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEMP_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NSTEP1_REV_DASH">
            <summary>HARDWARE_TYPE_NSTEP1_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NSTEP2_REV_DASH">
            <summary>HARDWARE_TYPE_NSTEP2_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NSTEP3_REV_DASH">
            <summary>HARDWARE_TYPE_NSTEP3_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NSTEP4_REV_DASH">
            <summary>HARDWARE_TYPE_NSTEP4_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVECL_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVECL_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVECP_REV_B">
            <summary>HARDWARE_TYPE_NDRIVECP_REV_B</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEHPE_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEHPE_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NMARKSSAM2_REV_DASH">
            <summary>HARDWARE_TYPE_NMARKSSAM2_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NMARKSSAM3_REV_DASH">
            <summary>HARDWARE_TYPE_NMARKSSAM3_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEHLE_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEHLE_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEML_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEML_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEPMT_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEPMT_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVECL_REV_A">
            <summary>HARDWARE_TYPE_NDRIVECL_REV_A</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_SF4_REV_DASH">
            <summary>HARDWARE_TYPE_SF4_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NMARKCLS2_REV_DASH">
            <summary>HARDWARE_TYPE_NMARKCLS2_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NMARKCLS3_REV_DASH">
            <summary>HARDWARE_TYPE_NMARKCLS3_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEFLS_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEFLS_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NMARKCLS2_REV_A">
            <summary>HARDWARE_TYPE_NMARKCLS2_REV_A</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NMARKSSAM2_REV_A">
            <summary>HARDWARE_TYPE_NMARKSSAM2_REV_A</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NMARKSSAM3_REV_A">
            <summary>HARDWARE_TYPE_NMARKSSAM3_REV_A</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEFLS_REV_A">
            <summary>HARDWARE_TYPE_NDRIVEFLS_REV_A</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEQL_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEQL_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEQLE_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEQLE_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NMARKGCL_REV_DASH">
            <summary>HARDWARE_TYPE_NMARKGCL_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.HARDWARE_TYPE_NDRIVEFCL_REV_DASH">
            <summary>HARDWARE_TYPE_NDRIVEFCL_REV_DASH</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.BOOT_CONFIG_WORD_ADDRESS">
            <summary>BOOT_CONFIG_WORD_ADDRESS</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Drive.Unit_Specifier_ID">
            <summary>Unit_Specifier_ID</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.Event_ID">
            <summary>Event_ID</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_UNKNOWN_EVENT">
            <summary>EVENT_UNKNOWN_EVENT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_TASK_FAULT">
            <summary>EVENT_TASK_FAULT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_AXIS_FAULT">
            <summary>EVENT_AXIS_FAULT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_TASK_CALLBACK">
            <summary>EVENT_TASK_CALLBACK</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_JOYSTICK">
            <summary>EVENT_JOYSTICK</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_DRV_TIMEOUT">
            <summary>EVENT_DRV_TIMEOUT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_END_G1_ACCEL">
            <summary>EVENT_END_G1_ACCEL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_START_G1_DECEL">
            <summary>EVENT_START_G1_DECEL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_ENET_WDOG">
            <summary>EVENT_ENET_WDOG</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_RESET">
            <summary>EVENT_RESET</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_RESETTING">
            <summary>EVENT_RESETTING</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_SCOPE_READY">
            <summary>EVENT_SCOPE_READY</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_SMC_RESET">
            <summary>EVENT_SMC_RESET</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_SMC_RESETTING">
            <summary>EVENT_SMC_RESETTING</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_PLC_RESET">
            <summary>EVENT_PLC_RESET</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_PLC_RESETTING">
            <summary>EVENT_PLC_RESETTING</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Event_ID.EVENT_NONE">
            <summary>EVENT_NONE</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.Init">
            <summary>Init</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.SYSTEM_INITIALIZED">
            <summary>SYSTEM_INITIALIZED</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.SYSTEM_NOT_INITIALIZED">
            <summary>SYSTEM_NOT_INITIALIZED</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_NO_ERROR">
            <summary>ERROR_STATE_NO_ERROR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_NOT_CONNECTED">
            <summary>ERROR_STATE_NOT_CONNECTED</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_EVENT_START">
            <summary>ERROR_STATE_EVENT_START</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_START_SMC">
            <summary>ERROR_STATE_START_SMC</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_RESET_SMC">
            <summary>ERROR_STATE_RESET_SMC</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_MCONF_ACCESS">
            <summary>ERROR_STATE_MCONF_ACCESS</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_GET_SMC_DATA">
            <summary>ERROR_STATE_GET_SMC_DATA</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_SYSTEM_PARM">
            <summary>ERROR_STATE_SYSTEM_PARM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_AXIS_PARM">
            <summary>ERROR_STATE_AXIS_PARM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_TASK_PARM">
            <summary>ERROR_STATE_TASK_PARM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_AXIS_CAL_1D">
            <summary>ERROR_STATE_AXIS_CAL_1D</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_GAIN_CAL">
            <summary>ERROR_STATE_GAIN_CAL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_AXIS_CAL_2D">
            <summary>ERROR_STATE_AXIS_CAL_2D</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_AXIS_CAL_GALVO_2D">
            <summary>ERROR_STATE_AXIS_CAL_GALVO_2D</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_AXIS_CAL_GALVO_GCAL">
            <summary>ERROR_STATE_AXIS_CAL_GALVO_GCAL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_AXIS_CAL_GALVO_POWERCORRECTION">
            <summary>ERROR_STATE_AXIS_CAL_GALVO_POWERCORRECTION</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_TOOL_TABLE">
            <summary>ERROR_STATE_TOOL_TABLE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_FIELDBUS">
            <summary>ERROR_STATE_FIELDBUS</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_PARAMETERS_DONE">
            <summary>ERROR_STATE_PARAMETERS_DONE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_DRIVE_INFO">
            <summary>ERROR_STATE_DRIVE_INFO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_PROGRAM_AUTOMATION">
            <summary>ERROR_STATE_PROGRAM_AUTOMATION</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Init.ERROR_STATE_EVENT_END">
            <summary>ERROR_STATE_EVENT_END</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MasterSlave">
            <summary>MasterSlave</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MasterSlave.CMD_POSFDBK">
            <summary>CMD_POSFDBK</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MasterSlave.CMD_POSCMD">
            <summary>CMD_POSCMD</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MasterSlave.CMD_EXTPOS">
            <summary>CMD_EXTPOS</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MathOperators">
            <summary>MathOperators</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_ADD">
            <summary>MATHDBLTYPE_ADD</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_SUBTRACT">
            <summary>MATHDBLTYPE_SUBTRACT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_MULTIPLY">
            <summary>MATHDBLTYPE_MULTIPLY</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_DIVIDE">
            <summary>MATHDBLTYPE_DIVIDE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_POWER">
            <summary>MATHDBLTYPE_POWER</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_MOD">
            <summary>MATHDBLTYPE_MOD</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_LOG_AND">
            <summary>MATHDBLTYPE_LOG_AND</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_LOG_OR">
            <summary>MATHDBLTYPE_LOG_OR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_LOG_NAND">
            <summary>MATHDBLTYPE_LOG_NAND</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_LOG_NOR">
            <summary>MATHDBLTYPE_LOG_NOR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_BIT_AND">
            <summary>MATHDBLTYPE_BIT_AND</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_BIT_OR">
            <summary>MATHDBLTYPE_BIT_OR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_BIT_XOR">
            <summary>MATHDBLTYPE_BIT_XOR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_BIT_SHIFT_LEFT">
            <summary>MATHDBLTYPE_BIT_SHIFT_LEFT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_BIT_SHIFT_RIGHT">
            <summary>MATHDBLTYPE_BIT_SHIFT_RIGHT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_BIT_NAND">
            <summary>MATHDBLTYPE_BIT_NAND</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_BIT_NOR">
            <summary>MATHDBLTYPE_BIT_NOR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.MATHDBLTYPE_BIT_NXOR">
            <summary>MATHDBLTYPE_BIT_NXOR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.CONDTYPE_EQUAL">
            <summary>CONDTYPE_EQUAL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.CONDTYPE_NOT_EQUAL">
            <summary>CONDTYPE_NOT_EQUAL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.CONDTYPE_GREATER">
            <summary>CONDTYPE_GREATER</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.CONDTYPE_GREATER_EQUAL">
            <summary>CONDTYPE_GREATER_EQUAL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.CONDTYPE_LESS">
            <summary>CONDTYPE_LESS</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MathOperators.CONDTYPE_LESS_EQUAL">
            <summary>CONDTYPE_LESS_EQUAL</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.PtrType">
            <summary>PtrType</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.NULL">
            <summary>NULL</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.CSP_CSPARM_VAR">
            <summary>CSP_CSPARM_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.APT_GLOBAL_VAR">
            <summary>APT_GLOBAL_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.APT_TASK_VAR">
            <summary>APT_TASK_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.APT_CSPARM_VAR">
            <summary>APT_CSPARM_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.STR_GLOBAL_VAR">
            <summary>STR_GLOBAL_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.STR_TASK_VAR">
            <summary>STR_TASK_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.STR_PROGRAM_VAR">
            <summary>STR_PROGRAM_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_GLOBAL_VAR">
            <summary>DBL_GLOBAL_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_TASK_VAR">
            <summary>DBL_TASK_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_PROGRAM_VAR">
            <summary>DBL_PROGRAM_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_CSPARM_VAR">
            <summary>DBL_CSPARM_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.MASK_CSPARM_VAR">
            <summary>MASK_CSPARM_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_APT_GLOBAL_VAR">
            <summary>DBL_APT_GLOBAL_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.MASK_APT_GLOBAL_VAR">
            <summary>MASK_APT_GLOBAL_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_APT_TASK_VAR">
            <summary>DBL_APT_TASK_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.MASK_APT_TASK_VAR">
            <summary>MASK_APT_TASK_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_AXIS_PARM">
            <summary>DBL_AXIS_PARM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_TASK_PARM">
            <summary>DBL_TASK_PARM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_SYSTEM_PARM">
            <summary>DBL_SYSTEM_PARM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.BYTE_BI_VIO">
            <summary>BYTE_BI_VIO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.BYTE_BO_VIO">
            <summary>BYTE_BO_VIO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.WORD_RI_VIO">
            <summary>WORD_RI_VIO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.WORD_RO_VIO">
            <summary>WORD_RO_VIO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.BYTE_DI_IO">
            <summary>BYTE_DI_IO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.BYTE_DO_IO">
            <summary>BYTE_DO_IO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.WORD_WI_IO">
            <summary>WORD_WI_IO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.WORD_WO_IO">
            <summary>WORD_WO_IO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_AI_IO">
            <summary>DBL_AI_IO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_AO_IO">
            <summary>DBL_AO_IO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.BYTE_PORT_IO">
            <summary>BYTE_PORT_IO</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_AXISSTAT_ITEM">
            <summary>DBL_AXISSTAT_ITEM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_TASKSTAT_ITEM">
            <summary>DBL_TASKSTAT_ITEM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_SYSTEMSTAT_ITEM">
            <summary>DBL_SYSTEMSTAT_ITEM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_TASK_INFO_VAR">
            <summary>DBL_TASK_INFO_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_TASKINDEX_VAR">
            <summary>DBL_TASKINDEX_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.PlcSharedTag">
            <summary>PlcSharedTag</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DBL_TASK_RETURN_VAR">
            <summary>DBL_TASK_RETURN_VAR</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.FieldbusInput">
            <summary>FieldbusInput</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.FieldbusOutput">
            <summary>FieldbusOutput</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.Const_DWORD">
            <summary>Const_DWORD</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.Const_AxisIndex">
            <summary>Const_AxisIndex</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.Const_CSParmIndex">
            <summary>Const_CSParmIndex</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusMasterInputWords">
            <summary>ModbusMasterInputWords</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusMasterOutputWords">
            <summary>ModbusMasterOutputWords</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusMasterInputBits">
            <summary>ModbusMasterInputBits</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusMasterOutputBits">
            <summary>ModbusMasterOutputBits</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusMasterOutputWordsStatus">
            <summary>ModbusMasterOutputWordsStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusMasterOutputBitsStatus">
            <summary>ModbusMasterOutputBitsStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusSlaveInputWords">
            <summary>ModbusSlaveInputWords</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusSlaveOutputWords">
            <summary>ModbusSlaveOutputWords</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusSlaveInputBits">
            <summary>ModbusSlaveInputBits</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.ModbusSlaveOutputBits">
            <summary>ModbusSlaveOutputBits</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.AxisStatus">
            <summary>AxisStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.TaskStatus">
            <summary>TaskStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.SystemStatus">
            <summary>SystemStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.Const_AxisMask">
            <summary>Const_AxisMask</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DriveModbusMasterInputWords">
            <summary>DriveModbusMasterInputWords</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DriveModbusMasterOutputWords">
            <summary>DriveModbusMasterOutputWords</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DriveModbusMasterInputBits">
            <summary>DriveModbusMasterInputBits</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DriveModbusMasterOutputBits">
            <summary>DriveModbusMasterOutputBits</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DriveModbusMasterOutputWordsStatus">
            <summary>DriveModbusMasterOutputWordsStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.DriveModbusMasterOutputBitsStatus">
            <summary>DriveModbusMasterOutputBitsStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.PtrType.AxisMaskCast">
            <summary>AxisMaskCast</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.SettingID">
            <summary>SettingID</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.SettingID.UNIDEX_DEFAULT">
            <summary>UNIDEX_DEFAULT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.SettingID.AUTOMATION_3200">
            <summary>AUTOMATION_3200</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.SettingID.AUTOMATION_3200_ETHERNET">
            <summary>AUTOMATION_3200_ETHERNET</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.SettingID.CARD_DEFAULT">
            <summary>CARD_DEFAULT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.SettingID.CARD_1">
            <summary>CARD_1</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.SettingID.CARD_2">
            <summary>CARD_2</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.SettingID.CARD_3">
            <summary>CARD_3</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.SettingID.CARD_4">
            <summary>CARD_4</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.RegistryID">
            <summary>RegistryID</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.RegistryID.InstallDir">
            <summary>InstallDir</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.RegistryID.A3200IniFile">
            <summary>A3200IniFile</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.RegistryID.A3200MMIPosFile">
            <summary>A3200MMIPosFile</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.RegistryID.DefaultTeachFile">
            <summary>DefaultTeachFile</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.RegistryID.ProgramDir">
            <summary>ProgramDir</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.RegistryID.RTX_InstallDir">
            <summary>RTX_InstallDir</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.RegistryID.RTX_VersionString">
            <summary>RTX_VersionString</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.RegistryID.RT_TCP_IP_VersionString">
            <summary>RT_TCP_IP_VersionString</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.DriveInfo">
            <summary>Drive Info</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DriveInfo.BLOCK_0">
            <summary>BLOCK_0</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DriveInfo.BLOCK_1">
            <summary>BLOCK_1</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DriveInfo.BLOCK_2">
            <summary>BLOCK_2</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DriveInfo.BLOCK_3">
            <summary>BLOCK_3</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DriveInfo.BLOCK_4">
            <summary>BLOCK_4</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DriveInfo.BLOCK_5">
            <summary>BLOCK_5</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DriveInfo.BLOCK_6">
            <summary>BLOCK_6</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DriveInfo.BLOCK_7">
            <summary>BLOCK_7</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.DriveInfo.BLOCK_8">
            <summary>BLOCK_8</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.Wait">
            <summary>Wait</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.Wait.WAIT_INFINITE">
            <summary>WAIT_INFINITE</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.ActiveFeatures">
            <summary culture="en">Represents a mask of the features active on the controller</summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ActiveFeatures.op_Explicit(System.Int32)~Aerotech.A3200.Configuration.ActiveFeatures">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Configuration.ActiveFeatures"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ActiveFeatures.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ActiveFeatures.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ActiveFeatures.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ActiveFeatures.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ActiveFeatures.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Configuration.ActiveFeatures.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Configuration.ActiveFeatures.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.ProfessionalOption">
            <summary culture="en">Professional Option</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.DynamicControlsToolbox">
            <summary culture="en">Dynamic Controls Toolbox</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.EnhancedThroughputModule">
            <summary culture="en">Enhanced Throughput Module</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.CNCOption">
            <summary culture="en">CNC Option</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.PLCOption">
            <summary culture="en">PLC Option</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.EnhancedTrackingControl">
            <summary culture="en">Enhanced Tracking Control</summary>
        </member>
        <member name="P:Aerotech.A3200.Configuration.ActiveFeatures.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.TypeCast">
            <summary>TypeCast</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.None">
            <summary>None</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Int32">
            <summary>Int32</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.DInt">
            <summary>DInt</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.UInt32">
            <summary>UInt32</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.UDInt">
            <summary>UDInt</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.DWord">
            <summary>DWord</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Int16">
            <summary>Int16</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Int">
            <summary>Int</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.UInt16">
            <summary>UInt16</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.UInt">
            <summary>UInt</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Word">
            <summary>Word</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Int8">
            <summary>Int8</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.SInt">
            <summary>SInt</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.UInt8">
            <summary>UInt8</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.USInt">
            <summary>USInt</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Byte">
            <summary>Byte</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Bit">
            <summary>Bit</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Bool">
            <summary>Bool</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Double">
            <summary>Double</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.LReal">
            <summary>LReal</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Single">
            <summary>Single</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.TypeCast.Real">
            <summary>Real</summary>
        </member>
        <member name="T:Aerotech.A3200.Information.FlashConfigStatus">
            <summary culture="en">Contains information about configuration of FlashConfig in a stage.</summary>
        </member>
        <member name="M:Aerotech.A3200.Information.FlashConfigStatus.op_Explicit(System.Int32)~Aerotech.A3200.Information.FlashConfigStatus">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Information.FlashConfigStatus"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Information.FlashConfigStatus.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Information.FlashConfigStatus.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Information.FlashConfigStatus.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Information.FlashConfigStatus.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Information.FlashConfigStatus.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Information.FlashConfigStatus.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Information.FlashConfigStatus.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Information.FlashConfigStatus.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Information.FlashConfigStatus.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Information.FlashConfigStatus.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.FlashConfigStatus.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Information.FlashConfigStatus.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Information.FlashConfigStatus.Supported">
            <summary culture="en">FlashConfig memory is present; feature is supported.</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.FlashConfigStatus.DataValid">
            <summary culture="en">FlashConfig data is valid.</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.FlashConfigStatus.SerialMismatch">
            <summary culture="en">Connected Stage serial number does not match expected Stage serial number.</summary>
        </member>
        <member name="P:Aerotech.A3200.Information.FlashConfigStatus.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Status.AxisStatus">
            <summary culture="en">Represents an axis status</summary><remarks culture="en">
				This value provides status information about this axis. The following table describes each bit of this value. More status information for the axis is reported in <a href="drivestatus.html">Drive Status</a>.
			</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisStatus.op_Explicit(System.Int32)~Aerotech.A3200.Status.AxisStatus">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Status.AxisStatus"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisStatus.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisStatus.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisStatus.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisStatus.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisStatus.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisStatus.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Status.AxisStatus.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.Homed">
            <summary culture="en">Homed</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.Profiling">
            <summary culture="en">Profiling</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.WaitDone">
            <summary culture="en">Wait Done</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.CommandValid">
            <summary culture="en">Command Valid</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.Homing">
            <summary culture="en">Homing</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.Enabling">
            <summary culture="en">Enabling</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.JogGenerating">
            <summary culture="en">JogGenerating</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.Jogging">
            <summary culture="en">Jogging</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.DrivePending">
            <summary culture="en">Drive Pending</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.DriveAbortPending">
            <summary culture="en">Drive Abort Pending</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.TrajectoryFiltering">
            <summary culture="en">Trajectory Filtering</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.IFOVEnabled">
            <summary culture="en">IFOV Enabled</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.NotVirtual">
            <summary culture="en">Not Virtual</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.CalibrationEnabled1D">
            <summary culture="en">Calibration Enabled 1D</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.CalibrationEnabled2D">
            <summary culture="en">Calibration Enabled 2D</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.MasterSlaveControl">
            <summary culture="en">Master/Slave Control</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.JoystickControl">
            <summary culture="en">Joystick Control</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.BacklashActive">
            <summary culture="en">Backlash Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.GainMappingEnabled">
            <summary culture="en">Gain Mapping Enabled</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.Stability0">
            <summary culture="en">Stability0</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.MotionBlocked">
            <summary culture="en">Motion Blocked</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.MoveDone">
            <summary culture="en">Move Done</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.MotionClamped">
            <summary culture="en">Motion Clamped</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.GantryAligned">
            <summary culture="en">Gantry Aligned</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.GantryRealigning">
            <summary culture="en">Gantry Realigning</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.Stability1">
            <summary culture="en">Stability1</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisStatus.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Status.AxisFault">
            <summary culture="en">Represents the faults of an axis</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisFault.op_Explicit(System.Int32)~Aerotech.A3200.Status.AxisFault">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Status.AxisFault"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisFault.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisFault.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisFault.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisFault.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisFault.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.AxisFault.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Status.AxisFault.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.PositionErrorFault">
            <summary culture="en">Position Error Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.OverCurrentFault">
            <summary culture="en">Over Current Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.CwEndOfTravelLimitFault">
            <summary culture="en">CW/Positive End-of-Travel Limit Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.CcwEndOfTravelLimitFault">
            <summary culture="en">CCW/Negative End-of-Travel Limit Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.CwSoftwareLimitFault">
            <summary culture="en">CW/High Software Limit Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.CcwSoftwareLimitFault">
            <summary culture="en">CCW/Low Software Limit Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.AmplifierFault">
            <summary culture="en">Amplifier Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.PositionFeedbackFault">
            <summary culture="en">Position Feedback Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.VelocityFeedbackFault">
            <summary culture="en">Velocity Feedback Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.HallSensorFault">
            <summary culture="en">Hall Sensor Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.MaxVelocityCommandFault">
            <summary culture="en">Maximum Velocity Command Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.EmergencyStopFault">
            <summary culture="en">Emergency Stop Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.VelocityErrorFault">
            <summary culture="en">Velocity Error Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.ProbeInputFault">
            <summary culture="en">Probe Input Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.ExternalFault">
            <summary culture="en">External Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.MotorTemperatureFault">
            <summary culture="en">Motor Temperature Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.AmplifierTemperatureFault">
            <summary culture="en">Amplifier Temperature Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.EncoderFault">
            <summary culture="en">Encoder Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.CommunicationLostFault">
            <summary culture="en">Communication Lost Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.GantryMisalignFault">
            <summary culture="en">Gantry Misalignment Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.FeedbackScalingFault">
            <summary culture="en">Feedback Scaling Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.MarkerSearchFault">
            <summary culture="en">Marker Search Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.SafeZoneFault">
            <summary culture="en">Safe Zone Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.InPositionTimeoutFault">
            <summary culture="en">In Position Timeout Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.VoltageClampFault">
            <summary culture="en">Voltage Clamp Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.PowerSupplyFault">
            <summary culture="en">Power Supply Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.MissedInterruptFault">
            <summary culture="en">Missed Interrupt Fault</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.AxisFault.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Status.DriveStatus">
            <summary culture="en">Represents the drive status bits</summary><remarks culture="en">
				This value provides status information from the drive connected to this axis. The following table describes each bit of this value. More status information for the axis is reported in <a href="axisstatus.html">Axis Status</a>.
			</remarks>
        </member>
        <member name="M:Aerotech.A3200.Status.DriveStatus.op_Explicit(System.Int32)~Aerotech.A3200.Status.DriveStatus">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Status.DriveStatus"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Status.DriveStatus.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Status.DriveStatus.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Status.DriveStatus.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.DriveStatus.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.DriveStatus.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Status.DriveStatus.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Status.DriveStatus.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.Enabled">
            <summary culture="en">Enabled</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.CwEndOfTravelLimitInput">
            <summary culture="en">CW End Of Travel Limit Input Level</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.CcwEndOfTravelLimitInput">
            <summary culture="en">CCW End Of Travel Limit Input Level</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.HomeLimitInput">
            <summary culture="en">Home Limit Input Level</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.MarkerInput">
            <summary culture="en">Marker Input Level</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.HallAInput">
            <summary culture="en">Hall A Input Level</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.HallBInput">
            <summary culture="en">Hall B Input Level</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.HallCInput">
            <summary culture="en">Hall C Input Level</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.SineEncoderError">
            <summary culture="en">Sine Encoder Input Error</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.CosineEncoderError">
            <summary culture="en">Cosine Encoder Input Error</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.EmergencyStopInput">
            <summary culture="en">Emergency Stop Input Level</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.BrakeOutput">
            <summary culture="en">Brake Output Level</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.GalvoPowerCorrection">
            <summary culture="en">Galvo Power Correction is configured on this axis.</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.NoMotorSupply">
            <summary culture="en">No Motor Supply</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.CurrentClamp">
            <summary culture="en">Current Clamp</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.MarkerLatch">
            <summary culture="en">Marker Latch</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.PowerLimiting">
            <summary culture="en">Power Limiting</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.PSOHaltLatch">
            <summary culture="en">PSO Halt Latch</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.HighResolutionMode">
            <summary culture="en">High Resolution Mode</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.GalvoCalibrationEnabled">
            <summary culture="en">Galvo Calibration Enabled</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.AutofocusActive">
            <summary culture="en">Autofocus Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.ProgrammingFlash">
            <summary culture="en">Programming Flash</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.ProgrammingMXH">
            <summary culture="en">Programming MXH</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.ServoControl">
            <summary culture="en">Servo Control</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.InPosition">
            <summary culture="en">In Position</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.MoveActive">
            <summary culture="en">Move Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.AccelerationPhase">
            <summary culture="en">Acceleration Phase</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.DecelerationPhase">
            <summary culture="en">Deceleration Phase</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.EncoderClipping">
            <summary culture="en">Encoder Clipping</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.DualLoopActive">
            <summary culture="en">Dual Loop Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.InPosition2">
            <summary culture="en">In Position 2</summary>
        </member>
        <member name="P:Aerotech.A3200.Status.DriveStatus.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Tasks.TaskStatus0">
            <summary culture="en">Represents a set of task status</summary><remarks culture="en">
				This value provides status information about this task. The following table describes each bit of this value. More status information for the task is reported in <a href="taskstatus1.html">Task Status 1</a>, <a href="taskstatus2.html">Task Status 2</a>, and <a href="taskmode.html">Task Mode</a>.
			</remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus0.op_Explicit(System.Int32)~Aerotech.A3200.Tasks.TaskStatus0">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Tasks.TaskStatus0"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus0.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus0.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus0.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus0.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus0.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus0.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Tasks.TaskStatus0.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ProgramAssociated">
            <summary culture="en">Program Associated</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ImmediateConcurrent">
            <summary culture="en">Immediate Concurrent</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ImmediateExecuting">
            <summary culture="en">Immediate Executing</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ReturnMotionExecuting">
            <summary culture="en">Return Motion Executing</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ProgramStopped">
            <summary culture="en">Program Stopped</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.SingleStepInto">
            <summary culture="en">Single Step Into</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.SingleStepOver">
            <summary culture="en">Single Step Over</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ProgramReset">
            <summary culture="en">Program Reset</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.PendingAxesStop">
            <summary culture="en">Pending Axes Stop</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.SoftwareESTOPActive">
            <summary culture="en">Software Emergency Stop Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.FeedHoldActive">
            <summary culture="en">FeedHold Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.CallbackHoldActive">
            <summary culture="en">Callback Hold Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.CallbackResponding">
            <summary culture="en">Callback Responding</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.SpindleActive0">
            <summary culture="en">Spindle Active 0</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.SpindleActive1">
            <summary culture="en">Spindle Active 1</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.SpindleActive2">
            <summary culture="en">Spindle Active 2</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.SpindleActive3">
            <summary culture="en">Spindle Active 3</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ProbeCycle">
            <summary culture="en">Probe Cycle</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.Retrace">
            <summary culture="en">Retrace</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.SoftHomeActive">
            <summary culture="en">Soft Home Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.InterruptMotionActive">
            <summary culture="en">Interrupt Motion Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.JoystickActive">
            <summary culture="en">Joystick Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.CornerRounding">
            <summary culture="en">Corner Rounding</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.PLCReserved">
            <summary culture="en">The task is reserved for use by the PLC</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.JoystickLowSpeedActive">
            <summary culture="en">Joystick Low Speed Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.CannedFunctionActive">
            <summary culture="en">Canned Function Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.CannedFunctionExecuting">
            <summary culture="en">Canned Function Executing</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.ProgramControlRestricted">
            <summary culture="en">Program Control Restricted</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus0.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Tasks.TaskStatus1">
            <summary culture="en">Represents a set of task status</summary><remarks culture="en">
				This value provides status information about this task. The following table describes each bit of this value. More status information for the task is reported in <a href="taskstatus0.html">Task Status 0</a>, <a href="taskstatus2.html">Task Status 2</a>, and <a href="taskmode.html">Task Mode</a>.
			</remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus1.op_Explicit(System.Int32)~Aerotech.A3200.Tasks.TaskStatus1">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Tasks.TaskStatus1"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus1.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus1.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus1.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus1.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus1.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus1.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Tasks.TaskStatus1.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.MotionModeAbsOffsets">
            <summary culture="en">Motion Mode Abs Offsets</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.AsyncSMCMotionAbortPending">
            <summary culture="en">Async SMC Motion Abort Pending</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.RetraceReversalPending">
            <summary culture="en">Retrace Reversal Pending</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.RetraceRequested">
            <summary culture="en">Retrace Requested</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.MSOChange">
            <summary culture="en">MSO Change</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.SpindleFeedHeld">
            <summary culture="en">Spindle FeedHeld</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.FeedHeldAxesStopped">
            <summary culture="en">FeedHeld Axes Stopped</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.CutterRadiusEnabling">
            <summary culture="en">Cutter Radius Enabling</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.CutterRadiusDisabling">
            <summary culture="en">Cutter Radius Disabling</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.CutterOffsetsEnablingPositive">
            <summary culture="en">Cutter Offsets Enabling Positive</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.CutterOffsetsEnablingNegative">
            <summary culture="en">Cutter Offsets Enabling Negative</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.CutterOffsetsDisabling">
            <summary culture="en">Cutter Offsets Disabling</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.MFOChange">
            <summary culture="en">MFO Change</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.OnGosubPending">
            <summary culture="en">Ongosub Pending</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.ProgramStopPending">
            <summary culture="en">Program Stop Pending</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.CannedFunctionPending">
            <summary culture="en">Canned Function Pending</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.NoMFOFloor">
            <summary culture="en">No MFO Minimum</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.Interrupted">
            <summary culture="en">Interrupted</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.ProgramSuppressed">
            <summary culture="en">Program Suppressed</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.GalvoIFVDeactivationPending">
            <summary culture="en">Galvo IFV Deactivation Pending</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.IFOVBufferHold">
            <summary culture="en">IFOV Buffer Hold</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus1.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Tasks.TaskStatus2">
            <summary culture="en">Represents a set of task status</summary><remarks culture="en">
				This value provides status information about this task. The following table describes each bit of this value. More status information for the task is reported in <a href="taskstatus0.html">Task Status 0</a>, <a href="taskstatus1.html">Task Status 1</a>, and <a href="taskmode.html">Task Mode</a>.
			</remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus2.op_Explicit(System.Int32)~Aerotech.A3200.Tasks.TaskStatus2">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Tasks.TaskStatus2"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus2.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus2.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus2.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus2.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus2.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskStatus2.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Tasks.TaskStatus2.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.RotationActive">
            <summary culture="en">Rotation Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.RThetaPolarActive">
            <summary culture="en">RTheta Polar Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.RThetaCylindricalActive">
            <summary culture="en">RTheta Cylindrical Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.ScalingActive">
            <summary culture="en">Scaling Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.OffsetFixtureActive">
            <summary culture="en">Offset Fixture Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.ProfileActive">
            <summary culture="en">Profile Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MotionModeRapid">
            <summary culture="en">Motion Mode Rapid</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MotionModeCoordinated">
            <summary culture="en">Motion Mode Coordinated</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MotionPVT">
            <summary culture="en">Motion PVT</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MotionContinuousActive">
            <summary culture="en">Motion Continuous Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MotionNoAccel">
            <summary culture="en">Motion No Accel</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MotionFiber">
            <summary culture="en">Motion Fiber</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.CutterOffsetsActivePos">
            <summary culture="en">Cutter Offsets Active Positive</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.CutterRadiusActiveLeft">
            <summary culture="en">Cutter Radius Active Left</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.CutterRadiusActiveRight">
            <summary culture="en">Cutter Radius Active Right</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.CutterOffsetsActiveNeg">
            <summary culture="en">Cutter Offsets Active Negative</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.NormalcyActiveLeft">
            <summary culture="en">Normalcy Active Left</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.NormalcyActiveRight">
            <summary culture="en">Normalcy Active Right</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.NormalcyAlignment">
            <summary culture="en">Normalcy Alignment</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MotionModeCW">
            <summary culture="en">Motion Mode CW</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MotionModeCCW">
            <summary culture="en">Motion Mode CCW</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.LimitFeedRateActive">
            <summary culture="en">Limit FeedRate Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.LimitMFOActive">
            <summary culture="en">Limit MFO Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.Coord1Plane1">
            <summary culture="en">Coord1 Plane1</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.Coord1Plane2">
            <summary culture="en">Coord1 Plane2</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.Coord1Plane3">
            <summary culture="en">Coord1 Plane3</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.Coord2Plane1">
            <summary culture="en">Coord2 Plane1</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.Coord2Plane2">
            <summary culture="en">Coord2 Plane2</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.Coord2Plane3">
            <summary culture="en">Coord2 Plane3</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.MirrorActive">
            <summary culture="en">Mirror Active</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskStatus2.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Tasks.TaskMode">
            <summary culture="en">Represents a set of task status</summary><remarks culture="en">
				This value provides status information about this task. The following table describes each bit of this value. More status information for the task is reported in <a href="taskstatus0.html">Task Status 0</a>, <a href="taskstatus1.html">Task Status 1</a>, and <a href="taskstatus2.html">Task Status 2</a>.
			</remarks>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskMode.op_Explicit(System.Int32)~Aerotech.A3200.Tasks.TaskMode">
             <summary>
             Converts the enumeration value as an integer to this class
            </summary>
             <param name="integerValue">The debug flags as an integer</param>
             <returns>The <see cref="T:Aerotech.A3200.Tasks.TaskMode"/> for the given class</returns>
             <exclude/>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskMode.#ctor">
            <summary>Creates a new instance with all things unset (<c>false</c>)</summary>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskMode.#ctor(System.Int32)">
            <summary>Creates a new instance with given mask value</summary>
            <param name="maskValue">The mask value to initialize to</param>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskMode.Equals(System.Object)">
            <summary>
            Compares this object to another one
            </summary>
            <param name="obj">The object to compare to</param>
            <returns><c>true</c> if objects contain the same debug states</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskMode.ToString">
            <summary>
            Converts to a string representation
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskMode.ToString(System.Boolean)">
            <summary>
            Converts to a string representation
            </summary>
            <param name="userReadableFormat">Whether to output the strings in a user readable format</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Aerotech.A3200.Tasks.TaskMode.GetHashCode">
            <summary>
            Calculates the hash code for this object
            </summary>
            <returns>The hash code of this object</returns>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.BitValues">
             <summary>
             Returns a listing of the bit names and their corresponding values
            </summary>
             <remarks>
             This is useful if dealing with <see cref="P:Aerotech.A3200.Tasks.TaskMode.MaskValue"/>
            </remarks>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.ValueNames">
            <summary>
            Returns a mapping of values to their human readable form.
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.ActiveBits">
            <summary>Returns a list of the active bit names.</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.MaskValue">
            <summary>
            The underlying mask value
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.None">
            <summary>
            If all the other properties are not set (<c>false</c>)
            </summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.Secondary">
            <summary culture="en">Secondary</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.Absolute">
            <summary culture="en">Absolute</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.AccelTypeLinear">
            <summary culture="en">Accel Type Linear</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.AccelModeRate">
            <summary culture="en">Accel Mode Rate</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.InverseDominance">
            <summary culture="en">Inverse Dominance</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.MotionContinuous">
            <summary culture="en">Motion Continuous</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.InverseCircular">
            <summary culture="en">Inverse Circular</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.SpindleStopOnProgramHalt">
            <summary culture="en">Spindle Stop On Program Halt</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.BlockDelete">
            <summary culture="en">Block Delete</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.OptionalPause">
            <summary culture="en">Optional Pause</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.AccelTypeScurve">
            <summary culture="en">Accel Type Scurve</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.MFOLock">
            <summary culture="en">MFO Lock</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.MSOLock">
            <summary culture="en">MSO Lock</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.DecelTypeLinear">
            <summary culture="en">Decel Type Linear</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.DecelTypeScurve">
            <summary culture="en">Decel Type Scurve</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.AutoMode">
            <summary culture="en">Auto Mode</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.ProgramFeedRateMPU">
            <summary culture="en">Program Feed Rate MPU</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.ProgramFeedRateUPR">
            <summary culture="en">Program Feed Rate UPR</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.BlockDelete2">
            <summary culture="en">Block Delete 2</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.OverMode">
            <summary culture="en">Over Mode</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.DecelModeRate">
            <summary culture="en">Decel Mode Rate</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.HighSpeedLookAhead">
            <summary culture="en">High-Speed Lookahead</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.MFOActiveOnJog">
            <summary culture="en">MFO Active On Jog</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.WaitForInPos">
            <summary culture="en">Wait For In Position</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.Minutes">
            <summary culture="en">Minutes</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.WaitAuto">
            <summary culture="en">Wait Auto</summary>
        </member>
        <member name="P:Aerotech.A3200.Tasks.TaskMode.BitHelpLinks">
            <summary>
            Returns a dictionary of bit value names (keys) and the associated help file link (values)
            </summary>
            <returns>A dictionary containing the mapping of bit value names to help file links
            </returns>
        </member>
        <member name="T:Aerotech.A3200.Commands.RampType">
            <summary culture="en">Represents the ramp type in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RampType.Linear">
            <summary culture="en">Linear-based ramp type</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RampType.Scurve">
            <summary culture="en">S-curve-based ramp type</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RampType.Sine">
            <summary culture="en">Sine-based ramp type</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.RampMode">
            <summary culture="en">Represents the ramp mode in AeroBasic</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RampMode.Rate">
            <summary culture="en">Rate-based acceleration and deceleration</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.RampMode.Time">
            <summary culture="en">Time-based acceleration and deceleration</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.GearingTrackingMode">
            <summary culture="en">The signal from the master axis from which the slave axis is geared</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.GearingTrackingMode.PositionFeedback">
            <summary culture="en">Track the position feedback of the master</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.GearingTrackingMode.PositionCommand">
            <summary culture="en">Track the position command of the master</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.GearingTrackingMode.AuxiliaryEncoder">
            <summary culture="en">Track the auxiliary encoder channel of the master</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.CammingTrackingMode">
            <summary culture="en">Signal the cam table will track when real axis is used as the master</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.CammingTrackingMode.PositionFeedback">
            <summary culture="en">Track the position feedback of the master</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.CammingTrackingMode.PositionCommand">
            <summary culture="en">Track the position command of the master</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.CammingTrackingMode.AuxiliaryEncoder">
            <summary culture="en">Track the auxiliary encoder channel of the master</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.CammingInterpolationType">
            <summary culture="en">Represents the Interpolation Type to be used for the cam table being loaded</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.CammingInterpolationType.Linear">
            <summary culture="en">Use linear interpolation</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.CammingInterpolationType.CubicSpline">
            <summary culture="en">Use a cubic spline to interpolate between points</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.CammingSyncMode">
            <summary culture="en">The synchronization mode to use for camming</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.CammingSyncMode.Stop">
            <summary culture="en">Stop the slave axis from synchronizing with the master</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.CammingSyncMode.Relative">
            <summary culture="en">Begin camming with relative synchronization</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.CammingSyncMode.Absolute">
            <summary culture="en">Begin camming with absolute synchronization</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.CammingSyncMode.Velocity">
            <summary culture="en">Begin camming where slave values are interpreted as velocities and not positions</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.SharedMemorySize">
            <summary>Shared Memory Size</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.SharedMemorySize.PLC_VARIABLES">
            <summary>PLC_VARIABLES</summary>
        </member>
        <member name="T:Aerotech.A3200.SetupConnectionMode">
            <summary culture="en">The connection mode with which the A3200 was installed.</summary>
        </member>
        <member name="F:Aerotech.A3200.SetupConnectionMode.LocalOrServer">
            <summary culture="en">The connection mode is local machine or remote server.</summary>
        </member>
        <member name="F:Aerotech.A3200.SetupConnectionMode.Client">
            <summary culture="en">The connection mode is remote client.</summary>
        </member>
        <member name="T:Aerotech.A3200.Edge">
            <summary culture="en">The edge kinds that are available.</summary>
        </member>
        <member name="F:Aerotech.A3200.Edge.Rising">
            <summary culture="en">Represents a rising edge.</summary>
        </member>
        <member name="F:Aerotech.A3200.Edge.Falling">
            <summary culture="en">Represents a falling edge.</summary>
        </member>
        <member name="F:Aerotech.A3200.Edge.RisingOrFalling">
            <summary culture="en">Represents a rising or falling edge.</summary>
        </member>
        <member name="T:Aerotech.A3200.Units.TimeUnit">
            <summary culture="en">Specifies the time base units.</summary><remarks target="dotnet">
				<para culture="en">
					The default value is <see cref="F:Aerotech.A3200.Units.TimeUnit.Seconds"/>.
				</para>
				
				
				
				
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Units.TimeUnit.Seconds">
            <summary culture="en">The time units are seconds.</summary>
        </member>
        <member name="F:Aerotech.A3200.Units.TimeUnit.Minutes">
            <summary culture="en">The time units are minutes.</summary>
        </member>
        <member name="F:Aerotech.A3200.Units.TimeUnit.Milliseconds">
            <summary culture="en">The time units are milliseconds.</summary>
        </member>
        <member name="F:Aerotech.A3200.Units.TimeUnit.Microseconds">
            <summary culture="en">The time units are microseconds.</summary>
        </member>
        <member name="T:Aerotech.A3200.StartKind">
            <summary>StartKind</summary>
        </member>
        <member name="F:Aerotech.A3200.StartKind.Immediate">
            <summary>Immediate</summary>
        </member>
        <member name="F:Aerotech.A3200.StartKind.OnDigitalInput">
            <summary>OnDigitalInput</summary>
        </member>
        <member name="F:Aerotech.A3200.StartKind.OnDigitalOutput">
            <summary>OnDigitalOutput</summary>
        </member>
        <member name="F:Aerotech.A3200.StartKind.OnPsoEvent">
            <summary>OnPsoEvent</summary>
        </member>
        <member name="F:Aerotech.A3200.StartKind.OnPsoOutput">
            <summary>OnPsoOutput</summary>
        </member>
        <member name="F:Aerotech.A3200.StartKind.OnPsoWindow">
            <summary>OnPsoWindow</summary>
        </member>
        <member name="T:Aerotech.A3200.TriggerKind">
            <summary>TriggerKind</summary>
        </member>
        <member name="F:Aerotech.A3200.TriggerKind.TimeInterval">
            <summary>TimeInterval</summary>
        </member>
        <member name="F:Aerotech.A3200.TriggerKind.OnDigitalInput">
            <summary>OnDigitalInput</summary>
        </member>
        <member name="F:Aerotech.A3200.TriggerKind.OnDigitalOutput">
            <summary>OnDigitalOutput</summary>
        </member>
        <member name="F:Aerotech.A3200.TriggerKind.OnPsoEvent">
            <summary>OnPsoEvent</summary>
        </member>
        <member name="F:Aerotech.A3200.TriggerKind.OnPsoOutput">
            <summary>OnPsoOutput</summary>
        </member>
        <member name="F:Aerotech.A3200.TriggerKind.OnPsoWindow">
            <summary>OnPsoWindow</summary>
        </member>
        <member name="F:Aerotech.A3200.TriggerKind.TimePoints">
            <summary>TimePoints</summary>
        </member>
        <member name="T:Aerotech.A3200.WindowEvent">
            <summary culture="en">The window range activities that are available.</summary>
        </member>
        <member name="F:Aerotech.A3200.WindowEvent.Entering">
            <summary culture="en">Represents entering a window range.</summary>
        </member>
        <member name="F:Aerotech.A3200.WindowEvent.Exiting">
            <summary culture="en">Represents exiting a window range.</summary>
        </member>
        <member name="F:Aerotech.A3200.WindowEvent.EnteringOrExiting">
            <summary culture="en">Represents entering or exiting a window range.</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.ClientType">
            <summary culture="en">The type of client application connected to the Communication Service.</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ClientType.Unknown">
            <summary culture="en">An unknown or unspecified application.</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ClientType.Loader">
            <summary culture="en">The Firmware Loader.</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ClientType.Scope">
            <summary culture="en">The Digital Scope.</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ClientType.CallbackService">
            <summary culture="en">The Callback Service.</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ClientType.ASCII">
            <summary culture="en">The ASCII Interface.</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.ClientType.DriveConfiguration">
            <summary culture="en">The drive configuration interface.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.FieldbusType">
            <summary culture="en">The type of fieldbus device being configured.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.FieldbusType.EtherCatMaster">
            <summary culture="en">An EtherCAT master device.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.FieldbusType.ProfinetMaster">
            <summary culture="en">A PROFINET master device.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.FieldbusType.Virtual">
            <summary culture="en">A virtual fieldbus device.</summary>
        </member>
        <member name="T:Aerotech.A3200.Status.FiberSearchResult">
            <summary culture="en">
				This value gives information on the most recent result of a fiber search. At the completion of any fiber search, the DATAITEM_FiberSearchResult task status item is set to one of the following values. Refer to <a href="FiberOptic.chm::/Commands/fiber_Category.html">Fiber Command Category</a>).
			</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.SuccessfulSearch">
            <summary>SuccessfulSearch</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.ThresholdNotFound">
            <summary>ThresholdNotFound</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.MaxItersExceeded">
            <summary>MaxItersExceeded</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.NegativeLimitAxis1">
            <summary>NegativeLimitAxis1</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.PositiveLimitAxis1">
            <summary>PositiveLimitAxis1</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.NegativeLimitAxis2">
            <summary>NegativeLimitAxis2</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.PositiveLimitAxis2">
            <summary>PositiveLimitAxis2</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.NegativeLimitAxis3">
            <summary>NegativeLimitAxis3</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.PositiveLimitAxis3">
            <summary>PositiveLimitAxis3</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.NegativeLimitAxis4">
            <summary>NegativeLimitAxis4</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.PositiveLimitAxis4">
            <summary>PositiveLimitAxis4</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.NegativeLimitAxis5">
            <summary>NegativeLimitAxis5</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.PositiveLimitAxis5">
            <summary>PositiveLimitAxis5</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.NegativeLimitAxis6">
            <summary>NegativeLimitAxis6</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.PositiveLimitAxis6">
            <summary>PositiveLimitAxis6</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.PowerSaturated">
            <summary>PowerSaturated</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.PeakNotFound">
            <summary>PeakNotFound</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.NoAxis1EdgesFound">
            <summary>NoAxis1EdgesFound</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.NoAxis2EdgesFound">
            <summary>NoAxis2EdgesFound</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.NoAxis3EdgesFound">
            <summary>NoAxis3EdgesFound</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.Axis1EdgesOutOfOrder">
            <summary>Axis1EdgesOutOfOrder</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.FiberSearchResult.Axis2EdgesOutOfOrder">
            <summary>Axis2EdgesOutOfOrder</summary>
        </member>
        <member name="T:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum">
            <summary>MinimumMaximum</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.DRIVE_MODBUS_MAX_NUM">
            <summary>DRIVE_MODBUS_MAX_NUM</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.AXES">
            <summary>AXES</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.TEXT_LEN">
            <summary>TEXT_LEN</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.STRING_DATA_LEN">
            <summary>STRING_DATA_LEN</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.NAME_LEN">
            <summary>NAME_LEN</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.NUMBUFF">
            <summary>NUMBUFF</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.REG_SZ_SIZE">
            <summary>REG_SZ_SIZE</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.TOOL_NAME_LEN">
            <summary>TOOL_NAME_LEN</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.DECODED_TEXT_LINE_LEN">
            <summary>DECODED_TEXT_LINE_LEN</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.TASKS">
            <summary>TASKS</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.TASKS_RESTRICTED">
            <summary>TASKS_RESTRICTED</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.VIRT_BINARY_BITS">
            <summary>VIRT_BINARY_BITS</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.VIRT_REGISTERS">
            <summary>VIRT_REGISTERS</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.MAX_PROGRAMS">
            <summary>MAX_PROGRAMS</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.FIELDBUS_CONFIG_FILE_COUNT">
            <summary>FIELDBUS_CONFIG_FILE_COUNT</summary>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.MinimumMaximum.FIELDBUS_HILSCHER_DEVICES">
            <summary>FIELDBUS_HILSCHER_DEVICES</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.SafeZoneType">
            <summary culture="en">This value specifies the type of a safe zone.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.SafeZoneType.NoEnter">
            <summary culture="en">The zone cannot be entered.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.SafeZoneType.NoExit">
            <summary culture="en">The zone cannot be exited.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.SafeZoneType.NoEnterAxisFault">
            <summary culture="en">The zone cannot be entered. A safe zone axis fault is generated after the decelerations complete.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.SafeZoneType.NoExitAxisFault">
            <summary culture="en">The zone cannot be exited. A safe zone axis fault is generated after the decelerations complete.</summary>
        </member>
        <member name="T:Aerotech.A3200.PulseOutputMode">
            <summary culture="en">
				This value gives specifies the output mode for a PULSE SET command. Refer to the <a href="A3200.chm::/Commands/PULSE%20SET%20OUTPUT_Command.html"> PULSE SET OUTPUT</a> Command.
			</summary>
        </member>
        <member name="F:Aerotech.A3200.PulseOutputMode.ClockDirection">
            <summary>ClockDirection</summary>
        </member>
        <member name="F:Aerotech.A3200.PulseOutputMode.Quadrature">
            <summary>Quadrature</summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.VariableContext">
            <summary culture="en">The context of a variable.</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.Program">
            <summary culture="en">The variable is a program-defined variable</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.Task">
            <summary culture="en">The variable is a task variable</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.Global">
            <summary culture="en">The variable is a global variable</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.Stack">
            <summary culture="en">The variable is a stack variable</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.Plc">
            <summary culture="en">The variable is a PLC variable</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.TaskInfo">
            <summary culture="en">The variable is a task info variable</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.TaskReturn">
            <summary culture="en">The variable is a task return variable</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.VirtualBinaryInput">
            <summary culture="en">The variable is a virtual binary input</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.VirtualBinaryOutput">
            <summary culture="en">The variable is a virtual binary output</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.VirtualRegisterInput">
            <summary culture="en">The variable is a virtual register input</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.VirtualRegisterOutput">
            <summary culture="en">The variable is a virtual register output</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusMasterInputWord">
            <summary culture="en">The variable is a modbus master input word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusMasterOutputWord">
            <summary culture="en">The variable is a modbus master output word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusMasterOutputWordStatus">
            <summary culture="en">The variable is a modbus master output status word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusMasterInputBit">
            <summary culture="en">The variable is a modbus master input bit</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusMasterOutputBit">
            <summary culture="en">The variable is a modbus master output bit</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusMasterOutputBitStatus">
            <summary culture="en">The variable is a modbus master output status bit</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusSlaveInputWord">
            <summary culture="en">The variable is a modbus slave input word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusSlaveOutputWord">
            <summary culture="en">The variable is a modbus slave output word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusSlaveInputBit">
            <summary culture="en">The variable is a modbus slave input bit</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.ModbusSlaveOutputBit">
            <summary culture="en">The variable is a modbus slave output bit</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.DriveModbusMasterInputWord">
            <summary culture="en">The variable is a drive modbus master input word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.DriveModbusMasterOutputWord">
            <summary culture="en">The variable is a drive modbus master output word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.DriveModbusMasterOutputWordStatus">
            <summary culture="en">The variable is a drive modbus master output status word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.DriveModbusMasterInputBit">
            <summary culture="en">The variable is a drive modbus master input bit</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.DriveModbusMasterOutputBit">
            <summary culture="en">The variable is a drive modbus master output bit</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.DriveModbusMasterOutputBitStatus">
            <summary culture="en">The variable is a drive modbus master output status bit</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.FieldbusInput">
            <summary culture="en">The variable is a fieldbus input</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableContext.FieldbusOutput">
            <summary culture="en">The variable is a fieldbus output</summary>
        </member>
        <member name="T:Aerotech.A3200.Variables.VariableType">
            <summary culture="en">The type of a variable.</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Double">
            <summary culture="en">The variable is a double</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.String">
            <summary culture="en">The variable is a string</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Bit">
            <summary culture="en">The variable is a Bit</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Bool">
            <summary culture="en">The variable is a Boolean</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Byte">
            <summary culture="en">The variable is a Byte</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Word">
            <summary culture="en">The variable is a Word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.DWord">
            <summary culture="en">The variable is a Double Word</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.SInt">
            <summary culture="en">The variable is a Short Integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Int">
            <summary culture="en">The variable is an Integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.DInt">
            <summary culture="en">The variable is a Double Integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.USInt">
            <summary culture="en">The variable is an Unsigned Short Integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.UInt">
            <summary culture="en">The variable is a Unsigned Integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.UDInt">
            <summary culture="en">The variable is an Unsigned Double Integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Real">
            <summary culture="en">The variable is a Real (floating point)</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.LReal">
            <summary culture="en">The variable is a Long Real (floating point)</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.VirtualBinaryIO">
            <summary culture="en">The variable is a virtual binary I/O (boolean)</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.VirtualRegisterIO">
            <summary culture="en">The variable is a virtual register I/O (floating point)</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Int8">
            <summary culture="en">The variable is an 8-bit signed integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Int16">
            <summary culture="en">The variable is an 16-bit signed integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Int32">
            <summary culture="en">The variable is an 32-bit signed integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.UInt8">
            <summary culture="en">The variable is an 8-bit unsigned integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.UInt16">
            <summary culture="en">The variable is an 16-bit unsigned integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.UInt32">
            <summary culture="en">The variable is an 32-bit unsigned integer</summary>
        </member>
        <member name="F:Aerotech.A3200.Variables.VariableType.Single">
            <summary culture="en">The variable is a single-precision floating point.</summary>
        </member>
        <member name="T:Aerotech.A3200.TaskId">
            <summary culture="en">The available tasks on a controller.</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.TLibrary">
            <summary culture="en">The library task</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T01">
            <summary culture="en">Task 1</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T02">
            <summary culture="en">Task 2</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T03">
            <summary culture="en">Task 3</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T04">
            <summary culture="en">Task 4</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T05">
            <summary culture="en">Task 5</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T06">
            <summary culture="en">Task 6</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T07">
            <summary culture="en">Task 7</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T08">
            <summary culture="en">Task 8</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T09">
            <summary culture="en">Task 9</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T10">
            <summary culture="en">Task 10</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T11">
            <summary culture="en">Task 11</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T12">
            <summary culture="en">Task 12</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T13">
            <summary culture="en">Task 13</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T14">
            <summary culture="en">Task 14</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T15">
            <summary culture="en">Task 15</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T16">
            <summary culture="en">Task 16</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T17">
            <summary culture="en">Task 17</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T18">
            <summary culture="en">Task 18</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T19">
            <summary culture="en">Task 19</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T20">
            <summary culture="en">Task 20</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T21">
            <summary culture="en">Task 21</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T22">
            <summary culture="en">Task 22</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T23">
            <summary culture="en">Task 23</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T24">
            <summary culture="en">Task 24</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T25">
            <summary culture="en">Task 25</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T26">
            <summary culture="en">Task 26</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T27">
            <summary culture="en">Task 27</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T28">
            <summary culture="en">Task 28</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T29">
            <summary culture="en">Task 29</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T30">
            <summary culture="en">Task 30</summary>
        </member>
        <member name="F:Aerotech.A3200.TaskId.T31">
            <summary culture="en">Task 31</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.HilscherMappingKind">
            <summary culture="en">The available mapping kinds available for a Hilscher fieldbus connection.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.HilscherMappingKind.Inputs">
            <summary culture="en">Represents a Hilscher fieldbus input mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.HilscherMappingKind.Outputs">
            <summary culture="en">Represents a Hilscher fieldbus output mapping.</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind">
            <summary culture="en">The available mapping kinds available for a PC modbus master connection.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind.InputWords">
            <summary culture="en">Represents a PC modbus master input words mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind.OutputWords">
            <summary culture="en">Represents a PC modbus master output words mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind.InputBits">
            <summary culture="en">Represents a PC modbus master input bits mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind.OutputBits">
            <summary culture="en">Represents a PC modbus master output bits mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind.OutputWordsStatus">
            <summary culture="en">Represents a PC modbus master output status words mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusMasterMappingKind.OutputBitsStatus">
            <summary culture="en">Represents a PC modbus master output status bits mapping.</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind">
            <summary culture="en">The available mapping kinds available for a drive modbus master connection.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind.InputWords">
            <summary culture="en">Represents a drive modbus master input words mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind.OutputWords">
            <summary culture="en">Represents a drive modbus master output words mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind.InputBits">
            <summary culture="en">Represents a drive modbus master input bits mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind.OutputBits">
            <summary culture="en">Represents a drive modbus master output bits mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind.OutputWordsStatus">
            <summary culture="en">Represents a drive modbus master output status words mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.DriveModbusMappingKind.OutputBitsStatus">
            <summary culture="en">Represents a drive modbus master output status bits mapping.</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMappingKind">
            <summary culture="en">The available mapping kinds available for a PC modbus slave connection.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMappingKind.InputWords">
            <summary culture="en">Represents a PC modbus slave input words mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMappingKind.OutputWords">
            <summary culture="en">Represents a PC modbus slave output words mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMappingKind.InputBits">
            <summary culture="en">Represents a PC modbus slave input bits mapping.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.PCModbusSlaveMappingKind.OutputBits">
            <summary culture="en">Represents a PC modbus slave output bits mapping.</summary>
        </member>
        <member name="T:Aerotech.A3200.SocketInterfaceOperation">
            <summary>SocketInterfaceOperation</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.Connect">
            <summary>Connect</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.Listen">
            <summary>Listen</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.Accept">
            <summary>Accept</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.Close">
            <summary>Close</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.PendingClient">
            <summary>PendingClient</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.PendingOctets">
            <summary>PendingOctets</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.Read">
            <summary>Read</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.Write">
            <summary>Write</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.Flush">
            <summary>Flush</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.AutoFlush">
            <summary>AutoFlush</summary>
        </member>
        <member name="F:Aerotech.A3200.SocketInterfaceOperation.Timeout">
            <summary>Timeout</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType">
            <summary>FieldbusRegisterType</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.HilscherInput">
            <summary>HilscherInput</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.HilscherOutput">
            <summary>HilscherOutput</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusMasterInputWord">
            <summary>ModbusMasterInputWord</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusMasterOutputWord">
            <summary>ModbusMasterOutputWord</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusMasterInputBit">
            <summary>ModbusMasterInputBit</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusMasterOutputBit">
            <summary>ModbusMasterOutputBit</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusMasterOutputWordStatus">
            <summary>ModbusMasterOutputWordStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusMasterOutputBitStatus">
            <summary>ModbusMasterOutputBitStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusSlaveInputWord">
            <summary>ModbusSlaveInputWord</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusSlaveOutputWord">
            <summary>ModbusSlaveOutputWord</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusSlaveInputBit">
            <summary>ModbusSlaveInputBit</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.ModbusSlaveOutputBit">
            <summary>ModbusSlaveOutputBit</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.DriveModbusMasterInputWord">
            <summary>DriveModbusMasterInputWord</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.DriveModbusMasterOutputWord">
            <summary>DriveModbusMasterOutputWord</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.DriveModbusMasterInputBit">
            <summary>DriveModbusMasterInputBit</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.DriveModbusMasterOutputBit">
            <summary>DriveModbusMasterOutputBit</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.DriveModbusMasterOutputWordStatus">
            <summary>DriveModbusMasterOutputWordStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusRegisterType.DriveModbusMasterOutputBitStatus">
            <summary>DriveModbusMasterOutputBitStatus</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_ModbusRead">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_ModbusRead&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_ModbusWrite">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_ModbusWrite&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_Hilscher">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_Hilscher&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_DriveModbusRead">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_DriveModbusRead&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusConstants.FieldbusSectionSize_DriveModbusWrite">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;FieldbusSectionSize_DriveModbusWrite&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusConstants.FieldbusMappingData_MaxModbusRegBytes">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;FieldbusMappingData_MaxModbusRegBytes&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusConstants.FieldbusMappingData_MaxModbusBitBytes">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;FieldbusMappingData_MaxModbusBitBytes&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.Parameters.Fieldbus.FieldbusConstants.FieldbusMappingData_MaxHilscherBytes">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;FieldbusMappingData_MaxHilscherBytes&quot;]/*"/>
        </member>
        <member name="F:Aerotech.A3200.SystemDLLWrapper.WrapperConstants.ErrorMessages_MessageLength">
            <!-- No matching elements were found for the following include tag --><include file="c:\Aerotech\controller\5.xx.xxx\A3200\pc\libs\dotnet\2.0\doc\CommonStructDoc.xml" path="/*/constants[@name=&quot;ErrorMessages_MessageLength&quot;]/*"/>
        </member>
        <member name="T:Aerotech.A3200.Commands.DataMatrixEncoding">
            <summary culture="en">The Data Matrix encoding options.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixEncoding.Auto">
            <summary culture="en">Automatic encoding</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixEncoding.Ascii">
            <summary culture="en">Ascii encoding</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixEncoding.C40">
            <summary culture="en">C40 encoding</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixEncoding.Text">
            <summary culture="en">Text encoding</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixEncoding.X12">
            <summary culture="en">X12 encoding</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixEncoding.Edifact">
            <summary culture="en">Edifact encoding</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixEncoding.Binary">
            <summary culture="en">Binary encoding</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.BarcodeOptions">
            <summary culture="en">Options for encoding the data.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.BarcodeOptions.None">
            <summary culture="en">No encoding options</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.BarcodeOptions.InvertPolarity">
            <summary culture="en">The polarity determines whether a dark cell will be represented by a 1 or 0 in the output data.</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.DataMatrixFormat">
            <summary culture="en">The format of the data matrix output table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.SizeAuto">
            <summary culture="en">The format is determined automatically.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size10x10">
            <summary culture="en">The output is a 10x10 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size12x12">
            <summary culture="en">The output is a 12x12 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size14x14">
            <summary culture="en">The output is a 14x14 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size16x16">
            <summary culture="en">The output is a 16x16 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size18x18">
            <summary culture="en">The output is a 18x18 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size20x20">
            <summary culture="en">The output is a 20x20 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size22x22">
            <summary culture="en">The output is a 22x22 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size24x24">
            <summary culture="en">The output is a 24x24 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size26x26">
            <summary culture="en">The output is a 26x26 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size32x32">
            <summary culture="en">The output is a 32x32 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size36x36">
            <summary culture="en">The output is a 36x36 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size40x40">
            <summary culture="en">The output is a 40x40 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size44x44">
            <summary culture="en">The output is a 44x44 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size8x18">
            <summary culture="en">The output is a 8x18 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size8x32">
            <summary culture="en">The output is a 8x32 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size12x26">
            <summary culture="en">The output is a 12x26 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size12x36">
            <summary culture="en">The output is a 12x36 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size16x36">
            <summary culture="en">The output is a 16x36 matrix.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.DataMatrixFormat.Size16x48">
            <summary culture="en">The output is a 16x48 matrix.</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.GalvoWobbleMode">
            <summary culture="en">Mode for determining when the wobble pattern is repeated.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.GalvoWobbleMode.TimeBased">
            <summary culture="en">Wobble is repeated at a fixed time interval.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.GalvoWobbleMode.DistanceBased">
            <summary culture="en">Wobble is repeated at a fixed vector distance.</summary>
        </member>
        <member name="T:Aerotech.A3200.Commands.GalvoWobbleType">
            <summary culture="en">Type of pattern that is generated by the wobble.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.GalvoWobbleType.Ellipse">
            <summary culture="en">An ellipse shape.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.GalvoWobbleType.Figure8Parallel">
            <summary culture="en">A figure 8 shape parallel to the vector path.</summary>
        </member>
        <member name="F:Aerotech.A3200.Commands.GalvoWobbleType.Figure8Perpendicular">
            <summary culture="en">A figure 8 shape perpendicular to the vector path.</summary>
        </member>
        <member name="T:Aerotech.A3200.Tasks.PathKind">
            <summary culture="en">Represents the kind of file specified by a file path.</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.PathKind.Object">
            <summary culture="en">The file is an object file.</summary>
        </member>
        <member name="F:Aerotech.A3200.Tasks.PathKind.Source">
            <summary culture="en">The file is a source file.</summary>
        </member>
        <member name="T:Aerotech.A3200.Information.CommandOutputType">
            <summary culture="en">Represents the type of output an axis generates.</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.CommandOutputType.None">
            <summary culture="en">No output is generated.</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.CommandOutputType.Current">
            <summary culture="en">Current output is generated.</summary>
        </member>
        <member name="F:Aerotech.A3200.Information.CommandOutputType.Voltage">
            <summary culture="en">Voltage output is generated.</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollectionSampleTrigger">
            <summary culture="en">Specifies the condition for data collection sampling.</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollectionSampleTrigger.OnAnyChange">
            <summary culture="en">Collect sample when the condition item changes.</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollectionSampleTrigger.OnIncrease">
            <summary culture="en">Collect sample when the condition item increases.</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollectionSampleTrigger.OnDecrease">
            <summary culture="en">Collect sample when the condition item decreases.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibration1D2DTablePrecision">
            <summary culture="en">Specifies the precision of position and correction values in a 1D/2D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1D2DTablePrecision.SingleFloat">
            <summary culture="en">Position and correction values are stored as single-precision floating-point values.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1D2DTablePrecision.DoubleFloat">
            <summary culture="en">Position and correction values are stored as double-precision floating-point values.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibration1D2DTableStorageFormat">
            <summary culture="en">Specifies the storage format of a 1D/2D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1D2DTableStorageFormat.FullCorrections">
            <summary culture="en">Correction values for all axes in the calibration table are stored.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1D2DTableStorageFormat.PartialCorrections">
            <summary culture="en">Correction values for only the corrected axis in the calibration table are stored.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibration1DTableFormat">
            <summary culture="en">Specifies the format of a 1D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1DTableFormat.Corrections">
            <summary culture="en">Only correction values are stored.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1DTableFormat.PositionsCorrections">
            <summary culture="en">Both position and correction values are stored.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibration1DTableNEGPOS">
            <summary culture="en">Specifies whether to negate position values in a 1D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1DTableNEGPOS.NotSpecified">
            <summary culture="en">Position values in the calibration table are not negated.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1DTableNEGPOS.Specified">
            <summary culture="en">Position values in the calibration table are negated.</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.BinaryCalibration1DTableNEGCOR">
            <summary culture="en">Specifies whether to negate correction values in a 1D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.BinaryCalibration1DTableNEGCOR.NotSpecified">
            <summary culture="en">Correction values in the calibration table are not negated.</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.BinaryCalibration1DTableNEGCOR.Specified">
            <summary culture="en">Correction values in the calibration table are negated.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibration1DTableHOMEDIRECTION">
            <summary culture="en">Specifies the home direction of a 1D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1DTableHOMEDIRECTION.None">
            <summary culture="en">No home direction was specified for the calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1DTableHOMEDIRECTION.CW">
            <summary culture="en">The home direction of the calibration table is clockwise.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration1DTableHOMEDIRECTION.CCW">
            <summary culture="en">The home direction of the calibration table is counter-clockwise.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibration2DTableFormat">
            <summary culture="en">Specifies the format of a 2D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration2DTableFormat.Calibration2D">
            <summary culture="en">2D axis calibration format.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration2DTableFormat.Calibration2DGalvo">
            <summary culture="en">2D galvo axis calibration format.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibration2DTableNEGCOR">
            <summary culture="en">Specifies whether to negate correction values in a 2D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration2DTableNEGCOR.NotSpecified">
            <summary culture="en">Correction values in the calibration table are not negated.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration2DTableNEGCOR.Specified">
            <summary culture="en">Correction values in the calibration table are negated.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibration2DTableNOCPUSIGN">
            <summary culture="en">Specifies whether to ignore ReverseMotionDirection for a 2D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration2DTableNOCPUSIGN.NotSpecified">
            <summary culture="en">ReverseMotionDirection for the calibration table is not ignored.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration2DTableNOCPUSIGN.Specified">
            <summary culture="en">ReverseMotionDirection for the calibration table is ignored</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibration2DTableINTABLE">
            <summary culture="en">Specifies whether to perform axis correction outside of a 2D binary calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration2DTableINTABLE.NotSpecified">
            <summary culture="en">Axes are corrected to the nearest correction value when outside of the calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibration2DTableINTABLE.Specified">
            <summary culture="en">Axes are not corrected when outside of the calibration table.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.CalibrationCammingUnits">
            <summary culture="en">Specifies the units of distance values in a calibration or a camming file.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.CalibrationCammingUnits.None">
            <summary culture="en">No units.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.CalibrationCammingUnits.Counts">
            <summary culture="en">Counts.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.CalibrationCammingUnits.Secondary">
            <summary culture="en">Secondary units.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.CalibrationCammingUnits.Primary">
            <summary culture="en">Primary units.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.CalibrationCammingUnits.DegreeRotary">
            <summary culture="en">Degrees or Rotary units.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.CalibrationCammingUnits.English">
            <summary culture="en">English units.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.CalibrationCammingUnits.Metric">
            <summary culture="en">Metric units.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibrationActionTableType">
            <summary culture="en">Specifies the type of calibration table associated with a calibration file action.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibrationActionTableType.Calibration1D">
            <summary culture="en">1D calibration table.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibrationActionTableType.Calibration2D">
            <summary culture="en">2D calibration table.</summary>
        </member>
        <member name="T:Aerotech.A3200.Configuration.BinaryCalibrationActionStatus">
            <summary culture="en">Specifies the status of a binary calibration file action.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibrationActionStatus.TableAdded">
            <summary culture="en">The calibration table was added.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibrationActionStatus.TableRemoved">
            <summary culture="en">The calibration table was removed.</summary>
        </member>
        <member name="F:Aerotech.A3200.Configuration.BinaryCalibrationActionStatus.TableNotAdded">
            <summary culture="en">The calibration table was not added.</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.PositionFeedbackChannel">
            <summary culture="en">Represents the position feedback channel type</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackChannel.Default">
            <summary culture="en">Default</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackChannel.Channel0">
            <summary culture="en">Channel 0</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackChannel.Channel1">
            <summary culture="en">Channel 1</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackChannel.Channel2">
            <summary culture="en">Channel 2</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackChannel.Channel3">
            <summary culture="en">Channel 3</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackChannel.Channel4">
            <summary culture="en">Channel 4</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackChannel.Channel5">
            <summary culture="en">Channel 5</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackChannel.Channel6">
            <summary culture="en">Channel 6</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.PositionFeedbackChannel.Channel7">
            <summary culture="en">Channel 7</summary>
        </member>
        <member name="T:Aerotech.A3200.Parameters.VelocityFeedbackChannel">
            <summary culture="en">Represents the velocity feedback channel type</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackChannel.Default">
            <summary culture="en">Default</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackChannel.Channel0">
            <summary culture="en">Channel 0</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackChannel.Channel1">
            <summary culture="en">Channel 1</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackChannel.Channel2">
            <summary culture="en">Channel 2</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackChannel.Channel3">
            <summary culture="en">Channel 3</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackChannel.Channel4">
            <summary culture="en">Channel 4</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackChannel.Channel5">
            <summary culture="en">Channel 5</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackChannel.Channel6">
            <summary culture="en">Channel 6</summary>
        </member>
        <member name="F:Aerotech.A3200.Parameters.VelocityFeedbackChannel.Channel7">
            <summary culture="en">Channel 7</summary>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.CategoryDataSignal">
            <summary>The data category</summary>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.CategoryDataSignal.AxisExtended">
            <summary>
					<p>Extended items for a specific axis</p>
				</summary><remarks>
					<p>Axis extended data can be sampled at rates greater than 1 kHz.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.CategoryDataSignal.Axis">
            <summary>
					<p>Items for a specific axis</p>
				</summary><remarks>
					<p>Axis data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.CategoryDataSignal.System">
            <summary>
					<p>Items for the whole system</p>
				</summary><remarks>
					<p>System data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.CategoryDataSignal.Task">
            <summary>
					<p>Items for a specific task</p>
				</summary><remarks>
					<p>Task data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.AxisExtendedDataSignal">
            <summary>
					<p>Extended items for a specific axis</p>
				</summary><remarks>
					<p>Axis extended data can be sampled at rates greater than 1 kHz.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.CurrentFeedback">
            <summary>Current Feedback</summary><remarks>
				<p>This item returns the current feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.CurrentCommand">
            <summary>Current Command</summary><remarks>
				<p>This item returns the current command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AnalogInput0">
            <summary>Analog Input 0</summary><remarks>
				<p>This item returns the value of analog input 0. The returned value corresponds to channel 0 of <a href="../../../Commands/$AI_Function.html">$AI</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AnalogInput1">
            <summary>Analog Input 1</summary><remarks>
				<p>This item returns the value of analog input 1. The returned value corresponds to channel 1 of <a href="../../../Commands/$AI_Function.html">$AI</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PhaseACurrentFeedback">
            <summary>Phase A Current Feedback</summary><remarks>
				<p>This item returns the phase A current feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PhaseBCurrentFeedback">
            <summary>Phase B Current Feedback</summary><remarks>
				<p>This item returns the phase B current feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.EncoderSine">
            <summary>Encoder Sine</summary><remarks>
				<p>This item returns the encoder sine in A/D counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.EncoderCosine">
            <summary>Encoder Cosine</summary><remarks>
				<p>This item returns the encoder cosine in A/D counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AnalogInput2">
            <summary>Analog Input 2</summary><remarks>
				<p>This item returns the value of analog input 2. The returned value corresponds to channel 2 of <a href="../../../Commands/$AI_Function.html">$AI</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AnalogInput3">
            <summary>Analog Input 3</summary><remarks>
				<p>This item returns the value of analog input 3. The returned value corresponds to channel 3 of <a href="../../../Commands/$AI_Function.html">$AI</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.LoopTransmissionBefore">
            <summary>Loop Transmission Before</summary><remarks>
				<p>This item returns the loop transmission value measured before the disturbance is injected.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.LoopTransmissionAfter">
            <summary>Loop Transmission After</summary><remarks>
				<p>This item returns the loop transmission value measured after the disturbance is injected.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ZHSDifference">
            <summary>ZHS Difference</summary><remarks>
				<p>This item returns the Z height sensor difference.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ZHSSum">
            <summary>ZHS Sum</summary><remarks>
				<p>This item returns the Z height sensor sum.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ZHSUnfiltered">
            <summary>ZHS Unfiltered</summary><remarks>
				<p>This item returns the unfiltered Z height sensor signal.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ZHSFiltered">
            <summary>ZHS Filtered</summary><remarks>
				<p>This item returns the filtered Z height sensor signal.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AnalogOutput0">
            <summary>Analog Output 0</summary><remarks>
				<p>This item returns the value of analog output 0. The returned value corresponds to channel 0 of <a href="../../../Commands/$AO_Function.html">$AO</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AnalogOutput1">
            <summary>Analog Output 1</summary><remarks>
				<p>This item returns the value of analog output 1. The returned value corresponds to channel 1 of <a href="../../../Commands/$AO_Function.html">$AO</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AnalogOutput2">
            <summary>Analog Output 2</summary><remarks>
				<p>This item returns the value of analog output 2. The returned value corresponds to channel 2 of <a href="../../../Commands/$AO_Function.html">$AO</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AnalogOutput3">
            <summary>Analog Output 3</summary><remarks>
				<p>This item returns the value of analog output 3. The returned value corresponds to channel 3 of <a href="../../../Commands/$AO_Function.html">$AO</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryInt32">
            <summary>Drive Memory Integer</summary><remarks>
				<p>This item returns the value of a 32-bit integer memory location on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryFloat">
            <summary>Drive Memory Float</summary><remarks>
				<p>This item returns the value of a single precision memory location on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryDouble">
            <summary>Drive Memory Double</summary><remarks>
				<p>This item returns the value of a double precision memory location on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSOStatus">
            <summary>PSO Status</summary><remarks>
				<p>This item returns the value of the <a href="../../../StructsAutoGen/psostatus.html">PSO Status</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveTimer">
            <summary>Drive Timer</summary><remarks>
				<p>This item returns the value of the timer returned by the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PositionFeedbackDrive">
            <summary>Position Feedback Drive</summary><remarks>
				<p>This item returns the position feedback returned by the drive.</p>
				<p>This item includes calibration and backlash. POSOFFSET and HomePositionSet offsets are not included in this value.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PositionCommandDrive">
            <summary>Position Command Drive</summary><remarks>
				<p>This item returns the position command that is read from the drive.</p>
				<p>This item includes calibration and backlash. POSOFFSET and HomePositionSet offsets are not included in this value.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryInt16">
            <summary>Drive Memory Integer</summary><remarks>
				<p>This item returns the value of a 16-bit integer memory location on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryInt8">
            <summary>Drive Memory Integer</summary><remarks>
				<p>This item returns the value of a 8-bit integer memory location on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryInt32Pointer">
            <summary>Drive Memory Integer Pointer</summary><remarks>
				<p>This item returns the value of a 32-bit integer pointer on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryInt16Pointer">
            <summary>Drive Memory Integer Pointer</summary><remarks>
				<p>This item returns the value of a 16-bit integer pointer on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryInt8Pointer">
            <summary>Drive Memory Integer Pointer</summary><remarks>
				<p>This item returns the value of a 8-bit integer pointer on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryFloatPointer">
            <summary>Drive Memory Float Pointer</summary><remarks>
				<p>This item returns the value of a single precision pointer on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveMemoryDoublePointer">
            <summary>Drive Memory Double Pointer</summary><remarks>
				<p>This item returns the value of a double precision pointer on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSOCounter1">
            <summary>PSO Counter 1</summary><remarks>
				<p>This item returns the value of PSO counter 1 in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSOCounter2">
            <summary>PSO Counter 2</summary><remarks>
				<p>This item returns the value of PSO counter 2 in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSOCounter3">
            <summary>PSO Counter 3</summary><remarks>
				<p>This item returns the value of PSO counter 3 in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSOWindow1">
            <summary>PSO Window 1</summary><remarks>
				<p>This item returns the value of the PSO window 1 counter in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSOWindow2">
            <summary>PSO Window 2</summary><remarks>
				<p>This item returns the value of the PSO window 2 counter in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DataAcquisitionSamples">
            <summary>Data Acquisition Samples</summary><remarks>
				<p>This item returns the number of data acquisition samples that have been acquired.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PositionDetectorVoltage">
            <summary>Position Detector Voltage</summary><remarks>
				<p>This item returns the common mode voltage for the Nmark CLS position detector circuit.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PositionCommandGalvo">
            <summary>Position Command Galvo</summary><remarks>
				<p>This item returns the position command of the galvo scanner.  This value represents the location of scanner within its field-of-view, including calibration, but does not include marking-on-the-fly.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ResolverChannel1">
            <summary>Resolver Channel 1</summary><remarks>
			<p>This item returns the value of the first resolver channel in counts.</p>
		  </remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ResolverChannel2">
            <summary>Resolver Channel 2</summary><remarks>
			<p>This item returns the value of the second resolver channel in counts.</p>
		  </remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.EnDatAbsolutePosition">
            <summary>EnDat Absolute Position</summary><remarks>
				<p>This item returns the value of the EnDat absolute position in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.SensorFeedbackPrimary">
            <summary>Sensor Feedback (Primary)</summary><remarks>
				<p>This item returns the value of primary feedback sensor when used with the MIMO control features of the Npaq.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.SensorFeedbackSecondary">
            <summary>Sensor Feedback (Secondary)</summary><remarks>
				<p>This item returns the value of secondary feedback sensor when used with the MIMO control features of the Npaq.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ControlEffort">
            <summary>Control Effort</summary><remarks>
				<p>This item returns the value of the servo loop control effort when used with the MIMO control features of the Npaq.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusBitMasterInputBits">
            <summary>ModbusBit MasterInputBits</summary><remarks>
				<p>This item returns the value of the specified bit from the Modbus MasterInputBits registers.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusBitMasterOutputBits">
            <summary>ModbusBit MasterOutputBits</summary><remarks>
				<p>This item returns the value of the specified bit from the Modbus MasterOutputBits registers.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusRegInt16MasterInputWords">
            <summary>ModbusRegInt16 MasterInputWords</summary><remarks>
				<p>This item returns the 16-bit integer value stored in the specified Modbus MasterInputWords register.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusRegInt16MasterOutputWords">
            <summary>ModbusRegInt16 MasterOutputWords</summary><remarks>
				<p>This item returns the 16-bit integer value stored in the specified Modbus MasterOutputWords register.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusRegInt32MasterInputWords">
            <summary>ModbusRegInt32 MasterInputWords</summary><remarks>
				<p>This item returns the 32-bit integer value stored in the specified Modbus MasterInputWords register.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusRegInt32MasterOutputWords">
            <summary>ModbusRegInt32 MasterOutputWords</summary><remarks>
				<p>This item returns the 32-bit integer value stored in the specified Modbus MasterOutputWords register.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusRegSingleMasterInputWords">
            <summary>ModbusRegSingle MasterInputWords</summary><remarks>
				<p>This item returns the 32-bit floating point value stored in the specified Modbus MasterInputWords register.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusRegSingleMasterOutputWords">
            <summary>ModbusRegSingle MasterOutputWords</summary><remarks>
				<p>This item returns the 32-bit floating point value stored in the specified Modbus MasterOutputWords register.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusRegDoubleMasterInputWords">
            <summary>ModbusRegDouble MasterInputWords</summary><remarks>
				<p>This item returns the 64-bit floating point value stored in the specified Modbus MasterInputWords register.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ModbusRegDoubleMasterOutputWords">
            <summary>ModbusRegDouble MasterOutputWords</summary><remarks>
				<p>This item returns the 64-bit floating point value stored in the specified Modbus MasterOutputWords register.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PhaseAVoltageCommand">
            <summary>Phase A Voltage Command</summary><remarks>
				<p>This item returns the phase A voltage command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PhaseBVoltageCommand">
            <summary>Phase B Voltage Command</summary><remarks>
				<p>This item returns the phase B voltage command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PhaseCVoltageCommand">
            <summary>Phase C Voltage Command</summary><remarks>
				<p>This item returns the phase C voltage command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AmplifierPeakCurrent">
            <summary>Amplifier Peak Current</summary><remarks>
				<p>This item returns the peak current rating of the amplifier.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.FPGAVersion">
            <summary>FPGA Version</summary><remarks>
				<p>This item returns the FPGA version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveTypeID">
            <summary>Drive Type ID</summary><remarks>
				<p>This item returns an ID number identifying the type of drive (e.g., CP, HPe, Npaq etc).</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSOWindow1ArrayIndex">
            <summary>PSO Window 1 Array Index</summary><remarks>
				<p>This item returns the current array index for window 1 when using the PSOWINDOW RANGE ARRAY command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSOWindow2ArrayIndex">
            <summary>PSO Window 2 Array Index</summary><remarks>
				<p>This item returns the current array index for window 2 when using the PSOWINDOW RANGE ARRAY command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSODistanceArrayIndex">
            <summary>PSO Distance Array Index</summary><remarks>
				<p>This item returns the current array index for the PSODISTANCE ARRAY command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.AmplifierTemperature">
            <summary>Amplifier Temperature</summary><remarks>
				<p>This item returns the amplifier heat sink temperature in degrees Celsius.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PSOBitArrayIndex">
            <summary>PSO Bit Array Index</summary><remarks>
				<p>This item returns the current array index for the PSOOUTPUT BIT MAP or PSOOUTPUT PULSE BIT MASK commands.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.MXAbsolutePosition">
            <summary>MX Absolute Position</summary><remarks>
				<p>This item returns the absolute encoder angle for the optional Encoder Multiplier.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ServoUpdateRate">
            <summary>Servo Update Rate</summary><remarks>
				<p>This item returns the servo update rate in kilohertz.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.SettlingTime">
            <summary>Settling Time</summary><remarks>
				<p>This item returns the settling time in milliseconds for the most recently completed move.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.InternalErrorCode">
            <summary>Internal Error Code</summary><remarks>
				<p>This item returns the drive's internal error code.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.FirmwareVersionMajor">
            <summary>Firmware Version Major</summary><remarks>
				<p>This item returns the first portion (major version) of the firmware version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.FirmwareVersionMinor">
            <summary>Firmware Version Minor</summary><remarks>
				<p>This item returns the second portion (minor version) of the firmware version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.FirmwareVersionPatch">
            <summary>Firmware Version Patch</summary><remarks>
				<p>This item returns the third portion (patch version) of the firmware version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.FirmwareVersionBuild">
            <summary>Firmware Version Build</summary><remarks>
				<p>This item returns the fourth portion (build number) of the firmware version number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveTimerMax">
            <summary>Drive Timer Max</summary><remarks>
				<p>This item returns the maximum value of the timer returned by the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.MarkerSearchDistance">
            <summary>Marker Search Distance</summary><remarks>
				<p>This item returns the distance in counts that was traveled while searching for the marker.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PositionFeedbackGalvo">
            <summary>Position Feedback Galvo</summary><remarks>
				<p>This item returns the position feedback of the galvo scanner.  This value represents the location of scanner within its field-of-view, including calibration, but does not include marking-on-the-fly.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.LatchedMarkerPosition">
            <summary>Latched Marker Position</summary><remarks>
				<p>This item returns the position at which the marker was detected during the home cycle.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.TemperatureSensor">
            <summary>Temperature Sensor</summary><remarks>
				<p>This item returns the temperature as reported by the 1-Wire temperature sensor in degrees Celsius (Npaq only).</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.EthernetDebuggingInformation">
            <summary>Ethernet Debugging Information</summary><remarks>
				<p>This item returns the Ethernet debugging value specified by the additional argument.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.NpaqSyncoutStatus">
            <summary>Npaq SYNCOUT Status</summary><remarks>
				<p>This item returns the status of the SYNCOUT signals on the Npaq, for all other drives it will return 0.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.ResoluteAbsolutePosition">
            <summary>Resolute Absolute Position</summary><remarks>
				<p>This item returns the value of the Resolute absolute position in counts.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.FaultPositionFeedback">
            <summary>Fault Position Feedback</summary><remarks>
				<p>This item returns the position at which the most recent axis fault occurred.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.MotorCommutationAngle">
            <summary>Motor Commutation Angle</summary><remarks>
				<p>This item returns the angle of commutation for the motor.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.IOBoardInstalled">
            <summary>I/O Board Installed</summary><remarks>
				<p>This item returns a non-zero value if an I/O board is installed on the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.BusVoltage">
            <summary>Bus Voltage</summary><remarks>
				<p>This item returns the bus voltage of a drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PiezoVoltageCommand">
            <summary>Piezo Voltage Command</summary><remarks>
				<p>This item returns the voltage command for a piezo axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PiezoVoltageFeedback">
            <summary>Piezo Voltage Feedback</summary><remarks>
				<p>This item returns voltage feedback for a piezo axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.TimeSinceReset">
            <summary>Time Since Reset</summary><remarks>
				<p>This item returns the amount of time since the last reset.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.MaximumVoltage">
            <summary>Maximum Voltage</summary><remarks>
				<p>This item returns the maximum voltage output of an axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.CommandOutputType">
            <summary>Command Output Type</summary><remarks>
				<p>This item returns the type of output an axis generates.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.DriveFeedforwardCurrent">
            <summary>Drive Feedforward Current</summary><remarks>
				<p>This item returns the feedforward contribution to the current command as determined by the drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.LastTickCounter">
            <summary>Last Tick Counter</summary><remarks>
			<p>This item returns the drive's tick counter when an internal error is set.</p>
		</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.BoardRevision">
            <summary>Board Revision</summary><remarks>
				<p>This item returns the board revision of the specified drive hardware.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.FirmwareRevision">
            <summary>Firmware Revision</summary><remarks>
				<p>This item returns the firwmare revision of the specified drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.GalvoLaserOutput">
            <summary>Galvo Laser Output</summary><remarks>
				<p>This item returns the value of the galvo laser output.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.GalvoLaserPowerCorrectionOutput">
            <summary>Galvo Laser Power Correction Output</summary><remarks>
				<p>This item returns the value of the analog output after laser power correction is applied. If laser power correction is not enabled, it will return zero. Refer to <a href="../../../Galvo_Power_Correction_Overview.htm">Galvo Power Correction Overview</a> for more information.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.CapacitanceSensorRawPosition">
            <summary>Capacitance Sensor Raw Position</summary><remarks>
				<p>This item returns the raw reading from the capacitance sensor feedback device.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisExtendedDataSignal.PositionCalibrationGalvo">
            <summary>Position Calibration Galvo</summary><remarks>
				<p>This item returns the 2D galvo calibration contribution.</p>
			</remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.AxisDataSignal">
            <summary>
					<p>Items for a specific axis</p>
				</summary><remarks>
					<p>Axis data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionFeedback">
            <summary>Position Feedback</summary><remarks>
				<p>This item returns the position feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCommand">
            <summary>Position Command</summary><remarks>
				<p>This item returns the position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionError">
            <summary>Position Error</summary><remarks>
				<p>This item returns the position error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.VelocityFeedback">
            <summary>Velocity Feedback</summary><remarks>
				<p>This item returns the velocity feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.VelocityCommand">
            <summary>Velocity Command</summary><remarks>
				<p>This item returns the commanded velocity of the axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.VelocityError">
            <summary>Velocity Error</summary><remarks>
				<p>This item returns the velocity error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationCommand">
            <summary>Acceleration Command</summary><remarks>
				<p>This item returns the value of the acceleration command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.CurrentError">
            <summary>Current Error</summary><remarks>
				<p>This item returns the current error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCommandRaw">
            <summary>Position Command Raw</summary><remarks>
				<p>This item returns the raw position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.VelocityCommandRaw">
            <summary>Velocity Command Raw</summary><remarks>
				<p>This item returns the raw velocity command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionFeedbackAuxiliary">
            <summary>Position Feedback Auxiliary</summary><remarks>
				<p>This item returns the position feedback from the auxiliary encoder.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DigitalInput">
            <summary>Digital Input</summary><remarks>
				<p>This item returns the value of the 32-bit digital input word that is read from the drive. The returned value corresponds to the individual <a href="../../../Commands/$DI_Function.html">$DI</a> bits.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DigitalOutput">
            <summary>Digital Output</summary><remarks>
				<p>This item returns the value of the 32-bit digital output word that is read from the drive. The returned value corresponds to the individual <a href="../../../Commands/$DO_Function.html">$DO</a> bits.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FixtureOffset">
            <summary>Fixture Offset</summary><remarks>
				<p>This item returns the value of the specified fixture offset.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.CoordinatedPositionTarget">
            <summary>Coordinated Position Target</summary><remarks>
				<p>This item returns the coordinated target position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DriveStatus">
            <summary>Drive Status</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/drivestatus.html">Drive Status</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AxisStatus">
            <summary>Axis Status</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/axisstatus.html">Axis Status</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AxisFault">
            <summary>Axis Fault</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/axisfault.html">Axis Fault</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationCommandRaw">
            <summary>Acceleration Command Raw</summary><remarks>
				<p>This item returns the value of the raw acceleration command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCalibrationAll">
            <summary>Position Calibration All</summary><remarks>
				<p>This item returns the 1D + 2D position calibration contribution with the backlash contribution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionFeedbackRollover">
            <summary>Position Feedback Rollover</summary><remarks>
				<p>This item returns the position feedback with rollover applied.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCommandRollover">
            <summary>Position Command Rollover</summary><remarks>
				<p>This item returns the position command with rollover applied.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionFeedbackAuxiliaryRollover">
            <summary>Position Feedback Auxiliary Rollover</summary><remarks>
				<p>This item returns the position feedback from the auxiliary encoder with rollover applied.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.VelocityFeedbackAverage">
            <summary>Velocity Feedback Average</summary><remarks>
				<p>This item returns the average velocity feedback.</p>
				<p>The average value is calculated over a period of 100 milliseconds.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.CurrentFeedbackAverage">
            <summary>Current Feedback Average</summary><remarks>
				<p>This item returns the average current feedback.</p>
				<p>The average value is calculated over a period of 100 milliseconds.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AxisParameter">
            <summary>Axis Parameter</summary><remarks>
				<p>This item returns the value of an axis parameter.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PeakCurrent">
            <summary>Peak Current</summary><remarks>
				<p>This item returns the peak current rating.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.Backlash">
            <summary>Backlash</summary><remarks>
				<p>This item returns the backlash contribution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.HomeState">
            <summary>Home State</summary><remarks>
				<p>This item returns the home state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCalibration2D">
            <summary>Position Calibration 2D</summary><remarks>
				<p>This item returns the 2D position calibration contribution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.NormalcyDebug">
            <summary>Normalcy Debug</summary><remarks>
				<p>This item returns normalcy debugging information.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.TotalMoveTime">
            <summary>Total Move Time</summary><remarks>
				<p>This item returns the total move time of the last move.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.Stability0SettleTime">
            <summary>Stability 0 Settle Time</summary><remarks>
				<p>This item returns the stability 0 settle time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.Stability1SettleTime">
            <summary>Stability 1 Settle Time</summary><remarks>
				<p>This item returns the stability 1 settle time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.JerkCommandRaw">
            <summary>Jerk Command Raw</summary><remarks>
				<p>This item returns the raw jerk command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.ProgramPositionCommand">
            <summary>Program Position Command</summary><remarks>
				<p>This item returns the program position command.</p>
				<p>Commanded program position of the axis in user units. The program position command is the position commanded to the motor as it is represented in the program coordinate system. This item does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GantryOffset">
            <summary>Gantry Offset</summary><remarks>
				<p>This item returns the gantry marker offset.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionOffset">
            <summary>Position Offset</summary><remarks>
				<p>This item returns the value of the position offset.</p>
				<p>The position offset value is set using the POSOFFSET SET command and is cleared using the POSOFFSET CLEAR command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.CommunicationRealTimeErrors">
            <summary>Communication Real Time Errors</summary><remarks>
				<p>This item returns the number of times that the A3200 did not have sufficient time to complete all of its operations. Refer to <a href="A3200.chm::/Optimizing_A3200_Performance.htm">Optimizing A3200 Performance</a> for instructions about how to optimize the controller settings and prevent this problem.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCommandRawBackwardsDiff">
            <summary>Position Command Raw Backwards Diff</summary><remarks>
				<p>This item returns the backwards difference of the raw position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.VelocityCommandRawBackwardsDiffDelta">
            <summary>Velocity Command Raw Backwards Diff Delta</summary><remarks>
				<p>This item returns the difference between the raw velocity command and the backwards difference of the raw position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DriveStatusActual">
            <summary>Drive Status Actual</summary><remarks>
				<p>This item returns the value of the drive status word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GantryRealignState">
            <summary>Gantry Realign State</summary><remarks>
				<p>This item returns the gantry realign state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.TransformAutoOffset">
            <summary>Transform Auto Offset</summary><remarks>
				<p>This item returns the auto offset for any active transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.ProgramPositionFeedback">
            <summary>Program Position Feedback</summary><remarks>
				<p>This item returns the program position feedback.</p>
				<p>Feedback program position of the axis in user units. The program position feedback is the position feedback of the motor as it is represented in the program coordinate system. This item does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.JogTrajectoryStatus">
            <summary>Jog Trajectory Status</summary><remarks>
				<p>This item returns the current jog trajectory status.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PingTest">
            <summary>Ping Test</summary><remarks>
				<p>This item returns an arbitrary value and is used to test timing.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GainKposScale">
            <summary>GainKpos Scale</summary><remarks>
				<p>This item returns the active GainKpos scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GainKiScale">
            <summary>GainKi Scale</summary><remarks>
				<p>This item returns the active GainKi scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GainKpScale">
            <summary>GainKp Scale</summary><remarks>
				<p>This item returns the active GainKp scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GainKpiScale">
            <summary>GainKpi Scale</summary><remarks>
				<p>This item returns the active GainKpi scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GainAffScale">
            <summary>GainAff Scale</summary><remarks>
				<p>This item returns the active GainAff scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GainVffScale">
            <summary>GainVff Scale</summary><remarks>
				<p>This item returns the active GainVff scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationTime">
            <summary>Acceleration Time</summary><remarks>
				<p>This item returns the value of the acceleration time.</p>
				<p>Refer to the RAMP TIME command for more information on setting the acceleration time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DecelerationTime">
            <summary>Deceleration Time</summary><remarks>
				<p>This item returns the value of the Deceleration time.</p>
				<p>Refer to the RAMP TIME command for more information on setting the deceleration time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationRate">
            <summary>Acceleration Rate</summary><remarks>
				<p>This item returns the value of the acceleration rate.</p>
				<p>Refer to the RAMP RATE command for more information on setting the acceleration rate.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DecelerationRate">
            <summary>Deceleration Rate</summary><remarks>
				<p>This item returns the value of the deceleration rate.</p>
				<p>Refer to the RAMP RATE command for more information on setting the deceleration rate.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationType">
            <summary>Acceleration Type</summary><remarks>
				<p>This item returns the acceleration type.</p>
				<p>Refer to the RAMP TYPE command for more information on setting the acceleration type.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DecelerationType">
            <summary>Deceleration Type</summary><remarks>
				<p>This item returns the deceleration type.</p>
				<p>Refer to the RAMP TYPE command for more information on setting the deceleration type.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationMode">
            <summary>Acceleration Mode</summary><remarks>
				<p>This item returns the acceleration mode.</p>
				<p>Refer to the RAMP MODE command for more information on setting the acceleration mode.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DecelerationMode">
            <summary>Deceleration Mode</summary><remarks>
				<p>This item returns the deceleration mode.</p>
				<p>Refer to the RAMP MODE command for more information on setting the deceleration mode.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.ProgramPosition">
            <summary>Program Position</summary><remarks>
				<p>This item returns the program position.</p>
				<p>Program position of the axis in user units. The program position reflects the position that you specify in the user program and does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.SpeedTarget">
            <summary>Speed Target</summary><remarks>
				<p>This item returns the target speed for an axis in a RAPID move.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCommandFireWire">
            <summary>Position Command FireWire</summary><remarks>
				<p>This item returns the positions placed into the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DriveSMCMotionState">
            <summary>Drive SMC Motion State</summary><remarks>
				<p>This item returns the internal SMC state regarding whether the drive or SMC is controlling the motion.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCommandRawCal">
            <summary>Position Command Raw Cal</summary><remarks>
				<p>This item returns the raw position command with calibration.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.VelocityCommandRawCal">
            <summary>Velocity Command Raw Cal</summary><remarks>
				<p>This item returns the raw velocity command with calibration.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.VelocityCommandDrive">
            <summary>Velocity Command Drive</summary><remarks>
				<p>This item returns the velocity command that is read from the drive.</p>
				<p>This item includes calibration and backlash.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationCommandDrive">
            <summary>Acceleration Command Drive</summary><remarks>
				<p>This item returns the acceleration command that is read from the drive.</p>
				<p>This item includes calibration and backlash.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GalvoLaserOutputRaw">
            <summary>Galvo Laser Output Raw</summary><remarks>
				<p>This item returns the raw value of the galvo laser output.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketInt32">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a 32-bit integer item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketInt16">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a 16-bit integer item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketInt8">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns an 8-bit integer item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketDouble">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a 64-bit double item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketFloat">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a 32-bit float item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWireDriveCommandCode">
            <summary>FireWire Drive Command Code</summary><remarks>
				<p>This item returns the command code that was sent to the drive in the given slot number in the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationFeedback">
            <summary>Acceleration Feedback</summary><remarks>
				<p>This item returns the value of the acceleration feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationCommandRawCal">
            <summary>Acceleration Command Raw Cal</summary><remarks>
				<p>This item returns the value of the raw acceleration command with calibration.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCalibrationAllDrive">
            <summary>Position Calibration All Drive</summary><remarks>
				<p>This item returns the 1D + 2D position calibration contribution with the backlash contribution synchronized with the drive positions.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.BacklashTarget">
            <summary>Backlash Target</summary><remarks>
				<p>This item returns the target backlash contribution.  It does not take into consideration any backlash filtering.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DriveMotionRate">
            <summary>Drive Motion Rate</summary><remarks>
				<p>This item returns the drive motion rate of an axis in kHz.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DriveMotionDelay">
            <summary>Drive Motion Delay</summary><remarks>
				<p>This item returns the delay in milliseconds between PositionCommandRaw and PositionCommand.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.CalibrationAdjustmentValue">
            <summary>Calibration Adjustment Freeze Value</summary><remarks>
				<p>This item returns the Calibration Adjustment Freeze Value.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.ServoRounding">
            <summary>Servo Rounding</summary><remarks>
				<p>This item indicates whether the position was rounded before sending it to the servo loop.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FeedforwardCurrent">
            <summary>Feedforward Current</summary><remarks>
				<p>This item returns the feedforward current calculated by the SMC. The value is normalized to +/- 1 on virtual axes.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketInfoBitValue">
            <summary>FireWire Packet Info Bit Value</summary><remarks>
				<p>This item returns the value of specified bit of the firewire info packet</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccelerationError">
            <summary>Acceleration Error</summary><remarks>
				<p>This item returns the value of the acceleration error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.SuppressedFaults">
            <summary>Suppressed Faults</summary><remarks>
				<p>This item returns the fault mask suppressed during a HOME or ENABLE.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketStreamingData">
            <summary>FireWire Packet Streaming Data</summary><remarks>
				<p>DWORD representation of the streaming data in the packet (used in ANALOG and PROBE commands).</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionCommandRawUnfiltered">
            <summary>Position Command Raw Unfiltered</summary><remarks>
				<p>This item returns the raw position command before trajectory filtering.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.TransitionOffsetErrors">
            <summary>Transition Offset Errors</summary><remarks>
				<p>This item returns the number of "transition offset" errors since the last reset.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FreezeVelocityCommand">
            <summary>Freeze Velocity Command</summary><remarks>
				<p>This item returns TRUE when the drive step changes the value of Position Command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FreezeVelocityFeedback">
            <summary>Freeze Velocity Feedback</summary><remarks>
				<p>This item returns TRUE when the drive step changes the value of Position Feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.InternalPositionOffsets">
            <summary>Internal Position Offsets</summary><remarks>
				<p>This item is for internal use only.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.StatusHighLevelOffsetsLastMsec">
            <summary>StatusHighLevelOffsetsLastMsec</summary><remarks>
				<p>This item is for internal use only.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.ProgramVelocityCommand">
            <summary>Program Velocity Command</summary><remarks>
				<p>This item returns the program velocity command.</p>
				<p>The program velocity command is the velocity command as it is represented in the program coordinate system. This item does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.ProgramVelocityFeedback">
            <summary>Program Velocity Feedback</summary><remarks>
				<p>This item returns the program velocity feedback.</p>
				<p>The program velocity feedback is the velocity feedback as it is represented in the program coordinate system. This item does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DriveMotionDelayLive">
            <summary>Drive Motion Delay Live</summary><remarks>
				<p>This item returns the delay in milliseconds between PositionCommandRaw and PositionCommand, dynamically updated.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DriveCommunicationDelay">
            <summary>Drive Communication Delay</summary><remarks>
				<p>This item returns the communication delay in milliseconds between the SMC and drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DriveCommunicationDelayLive">
            <summary>Drive Communication Delay Live</summary><remarks>
				<p>This item returns the communication delay in milliseconds between the SMC and drive, dynamically updated.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketResponseInt32">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a 32-bit integer item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketResponseInt16">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a 16-bit integer item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketResponseInt8">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns an 8-bit integer item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketResponseDouble">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a 64-bit double item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketResponseFloat">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a 32-bit float item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketBit">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a bit item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.FireWirePacketResponseBit">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a bit item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.SpeedTargetActual">
            <summary>Speed Target Actual</summary><remarks>
				<p>This item returns the limited target speed for an axis in a RAPID move.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.CoordinatedDistanceRemaining">
            <summary>Coordinated Distance Remaining</summary><remarks>
				<p>This item returns the distance remaining in a coordinated motion.</p>
				<p>The distance remaining is defined as the coordinated target position minus the program position. The program position reflects the position specified in the program and does not include the output of any transformations.</p>
				<p>This item is valid only during coordinated motion. Its value is zero for all other types of motion.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.SafeZoneState">
            <summary>Safe Zone State</summary><remarks>
				<p>This item returns the current safe zone state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.PositionErrorGalvo">
            <summary>Position Error Galvo</summary><remarks>
				<p>This item returns the position error of the galvo scanner.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GainKd1Scale">
            <summary>GainKd1 Scale</summary><remarks>
				<p>This item returns the active GainKd1 scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GainKp1Scale">
            <summary>GainKp1 Scale</summary><remarks>
				<p>This item returns the active GainKp1 scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.MoveReferencePosition">
            <summary>Move Reference Position</summary><remarks>
				<p>This item returns the move reference position of an axis on a given task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.MoveReferenceCutterOffset">
            <summary>Move Reference Cutter Offset</summary><remarks>
				<p>This item returns the move reference cutter offset of an axis on a given task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.MoveReferenceCornerOffset">
            <summary>Move Reference Corner Offset</summary><remarks>
				<p>This item returns the move reference corner offset of an axis on a given task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.MoveReferenceTotalOffset">
            <summary>Move Reference Total Offset</summary><remarks>
				<p>This item returns the move reference total offset of an axis on a given task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GantryMarkerLatchPosition">
            <summary>Gantry Marker Latch Position</summary><remarks>
				<p>This item returns the marker position that is latched during a gantry home.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.DistanceLog">
            <summary>Distance Log</summary><remarks>
				<p>This item returns the total distance traveled by this axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AutoFocusError">
            <summary>AutoFocus Error</summary><remarks>
				<p>This item returns the autofocus error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GalvoLaserOutputRawAdvance">
            <summary>Galvo Laser Output Raw Advance</summary><remarks>
				<p>This item returns the galvo laser output advance in 200 nanosecond intervals.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GalvoLaserOnDelay">
            <summary>Galvo Laser On Delay</summary><remarks>
				<p>This item returns the time that the Nmark will command the laser to go on relative to the rising edge of the Galvo Laser Output signal.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.GalvoLaserOffDelay">
            <summary>Galvo Laser Off Delay</summary><remarks>
				<p>This item returns the time that the Nmark will command the laser to go off relative to the falling edge of the Galvo Laser Output signal.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.CalibrationAdjustmentState">
            <summary>Calibration Adjustment State</summary><remarks>
				<p>This item returns the calibration adjustment state of the axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccuracyCorrectionStartingPosition">
            <summary>Accuracy Correction Starting Position</summary><remarks>
				<p>This item returns the minimum position that is corrected by accuracy calibration.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.AxisDataSignal.AccuracyCorrectionEndingPosition">
            <summary>Accuracy Correction Ending Position</summary><remarks>
				<p>This item returns the maximum position that is corrected by accuracy calibration.</p>
			</remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.SystemDataSignal">
            <summary>
					<p>Items for the whole system</p>
				</summary><remarks>
					<p>System data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.VirtualBinaryInput">
            <summary>Virtual Binary Input</summary><remarks>
            <p>
              This item returns the value of a 16-bit virtual binary input word that corresponds to the individual $BI bits.
            </p>
          </remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.VirtualBinaryOutput">
            <summary>Virtual Binary Output</summary><remarks>
            <p>
              This item returns the value of a 16-bit virtual binary output word that corresponds to the individual $BO bits.
            </p>
          </remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.VirtualRegisterInput">
            <summary>Virtual Register Input</summary><remarks>
            <p>
              This item returns the value of a double-precision floating-point virtual register input word that corresponds to the &lt;Register&gt; argument of $RI.
            </p>
          </remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.VirtualRegisterOutput">
            <summary>Virtual Register Output</summary><remarks>
            <p>
              This item returns the value of a double-precision floating-point virtual register output word that corresponds to the &lt;Register&gt; argument of $RO.
            </p>
          </remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.Timer">
            <summary>Timer</summary><remarks>
				<p>This item returns the value of a system timer.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.TimerPerformance">
            <summary>Timer Performance</summary><remarks>
				<p>This item returns the value of a system performance timer.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.GlobalVariable">
            <summary>Global Variable</summary><remarks>
				<p>This item returns the value of a global variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.LibraryCommand">
            <summary>Library Command</summary><remarks>
				<p>This item returns the opcode, subcode, or number of library commands.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.DataCollectionSampleTime">
            <summary>Data Collection Sample Time</summary><remarks>
				<p>This item returns the data collection sample time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.DataCollectionSampleIndex">
            <summary>Data Collection Sample Index</summary><remarks>
				<p>This item returns the data collection sample index.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ZYGOPosition1">
            <summary>ZYGO Position 1</summary><remarks>
				<p>This item returns the value of the ZYGO laser position for the first axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ZYGOPosition2">
            <summary>ZYGO Position 2</summary><remarks>
				<p>This item returns the value of the ZYGO laser position for the second axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ZYGOPosition3">
            <summary>ZYGO Position 3</summary><remarks>
				<p>This item returns the value of the ZYGO laser position for the third axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ZYGOPosition4">
            <summary>ZYGO Position 4</summary><remarks>
				<p>This item returns the value of the ZYGO laser position for the fourth axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PCModbusMasterConnected">
            <summary>PC Modbus Master Connected</summary><remarks>
				<p>This item returns a boolean value that indicates if the connection is established.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PCModbusSlaveConnected">
            <summary>PC Modbus Slave Connected</summary><remarks>
				<p>This item returns a boolean value that indicates if the connection is established.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PCModbusMasterErrorCode">
            <summary>PC Modbus Master Error Code</summary><remarks>
				<p>This item returns the value of the last system error code to occur on this connection.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PCModbusSlaveErrorCode">
            <summary>PC Modbus Slave Error Code</summary><remarks>
				<p>This item returns the value of the last system error code to occur on this connection.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PCModbusMasterErrorLocation">
            <summary>PC Modbus Master Error Location</summary><remarks>
				<p>This item returns the value of the last system error location code to occur on this connection.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PCModbusSlaveErrorLocation">
            <summary>PC Modbus Slave Error Location</summary><remarks>
				<p>This item returns the value of the last system location code to occur on this connection.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.StopWatchTimer">
            <summary>Stop Watch Timer</summary><remarks>
				<p>
					This item returns the value of the StopWatch Timer
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ScopetrigID">
            <summary>Scopetrig ID</summary><remarks>
				<p>This item returns the value of the most recent SCOPETRIG ID.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCBool">
            <summary>PLC Bool</summary><remarks>
				<p>This item returns a bit from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCByte">
            <summary>PLC Byte</summary><remarks>
				<p>This item returns a BYTE from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCWord">
            <summary>PLC Word</summary><remarks>
				<p>This item returns a WORD from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCDword">
            <summary>PLC Dword</summary><remarks>
				<p>This item returns a DWORD from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCSint">
            <summary>PLC Sint</summary><remarks>
				<p>This item returns a SINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCInt">
            <summary>PLC Int</summary><remarks>
				<p>This item returns a INT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCDint">
            <summary>PLC Dint</summary><remarks>
				<p>This item returns a DINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCUsint">
            <summary>PLC Usint</summary><remarks>
				<p>This item returns a USINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCUint">
            <summary>PLC Uint</summary><remarks>
				<p>This item returns a UINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCUdint">
            <summary>PLC Udint</summary><remarks>
				<p>This item returns a UDINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCReal">
            <summary>PLC Real</summary><remarks>
				<p>This item returns a REAL from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.PLCLreal">
            <summary>PLC Lreal</summary><remarks>
				<p>This item returns a LREAL from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.EstimatedProcessorUsage">
            <summary>Estimated Processor Usage</summary><remarks>
				<p>This item returns the estimated SMC processor usage as a percentage.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.DataCollectionStatus">
            <summary>Data Collection Status</summary><remarks>
				<p>
                    This item returns the value of the <a href="../../../StructsAutoGen/datacollectionflags.html">Data Collection Flags</a> word.
                </p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.SignalLogState">
            <summary>Signal Log State</summary><remarks>
				<p>This item returns the state of the Signal Log.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.FieldbusConnected">
            <summary>Fieldbus Connected</summary><remarks>
				<p>This item returns true if a connection to the Fieldbus slave is established.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.FieldbusErrorCode">
            <summary>Fieldbus Error Code</summary><remarks>
				<p>This item returns the current error code of the Fieldbus device.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.FieldbusErrorLocation">
            <summary>Fieldbus Error Location</summary><remarks>
				<p>This item returns the current error location of the Fieldbus device.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.FieldbusActiveConnections">
            <summary>Fieldbus Active Connections</summary><remarks>
				<p>This item returns the number of Fieldbus connections in an active state for this device.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.FieldbusInactiveConnections">
            <summary>Fieldbus Inactive Connections</summary><remarks>
				<p>This item returns the number of Fieldbus connections in an inactive state for this device.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.SafeZoneViolationMask">
            <summary>Safe Zone Violation Mask</summary><remarks>
				<p>This item returns the mask of violated safe zones. Once a zone is violated it will remain violated until any one of the axes in the safe zone is moved again.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.SafeZoneActiveMask">
            <summary>Safe Zone Active Mask</summary><remarks>
				<p>This item returns the mask of active safe zones.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.FieldbusInputs">
            <summary>Fieldbus Inputs I/O</summary><remarks>
				<p>This item returns the current state of the Fieldbus Inputs I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.FieldbusOutputs">
            <summary>Fieldbus Outputs I/O</summary><remarks>
				<p>This item returns the current state of the Fieldbus Outputs I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusMasterInputWords">
            <summary>Modbus Master Input Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Input Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusMasterOutputWords">
            <summary>Modbus Master Output Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Output Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusMasterInputBits">
            <summary>Modbus Master Input Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Input Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusMasterOutputBits">
            <summary>Modbus Master Output Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Output Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusMasterOutputStatusBits">
            <summary>Modbus Master Output Status Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Output Status Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusMasterOutputStatusWords">
            <summary>Modbus Master Output Status Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Output Status Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusSlaveInputWords">
            <summary>Modbus Slave Input Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Slave Input Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusSlaveOutputWords">
            <summary>Modbus Slave Output Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Slave Output Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusSlaveInputBits">
            <summary>Modbus Slave Input Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Slave Input Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.ModbusSlaveOutputBits">
            <summary>Modbus Slave Output Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Slave Output Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.DriveModbusMasterInputWords">
            <summary>Drive Modbus Master Input Words I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Input Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.DriveModbusMasterOutputWords">
            <summary>Drive Modbus Master Output Words I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Output Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.DriveModbusMasterInputBits">
            <summary>Drive Modbus Master Input Bits I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Input Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.DriveModbusMasterOutputBits">
            <summary>Drive Modbus Master Output Bits I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Output Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.DriveModbusMasterOutputStatusBits">
            <summary>Drive Modbus Master Output Status Bits I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Output Status Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.DriveModbusMasterOutputStatusWords">
            <summary>Drive Modbus Master Output Status Words I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Output Status Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.SystemDataSignal.SystemParameter">
            <summary>System Parameter</summary><remarks>
				<p>This item returns the value of a system parameter.</p>
			</remarks>
        </member>
        <member name="T:Aerotech.A3200.DataCollection.TaskDataSignal">
            <summary>
					<p>Items for a specific task</p>
				</summary><remarks>
					<p>Task data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ProgramLineNumber">
            <summary>Program Line Number</summary><remarks>
				<p>This item returns the value of the program line number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedFlags">
            <summary>Coordinated Flags</summary><remarks>
				<p>This item returns the value of the coordinated flags.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedArcStartAngle">
            <summary>Coordinated Arc Start Angle</summary><remarks>
				<p>This item returns the starting angle for a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedArcEndAngle">
            <summary>Coordinated Arc End Angle</summary><remarks>
				<p>This item returns the ending angle for a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedArcRadius">
            <summary>Coordinated Arc Radius</summary><remarks>
				<p>This item returns the radius of a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedArcRadiusError">
            <summary>Coordinated Arc Radius Error</summary><remarks>
				<p>This item returns the percentage radius error of a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedPositionCommand">
            <summary>Coordinated Position Command</summary><remarks>
				<p>This item returns the coordinated position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedSpeedCommand">
            <summary>Coordinated Speed Command</summary><remarks>
				<p>This item returns the absolute value of the coordinated velocity command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedAccelerationCommand">
            <summary>Coordinated Acceleration Command</summary><remarks>
				<p>This item returns the absolute value of the coordinated acceleration command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedTotalDistance">
            <summary>Coordinated Total Distance</summary><remarks>
				<p>This item returns the total distance of the coordinated move.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedPercentDone">
            <summary>Coordinated Percent Done</summary><remarks>
				<p>This item returns the percentage of the coordinated move that has been completed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedPositionCommandBackwardsDiff">
            <summary>Coordinated Position Command Backwards Diff</summary><remarks>
				<p>This item returns the backwards difference of the coordinated position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ProgramVariable">
            <summary>Program Variable</summary><remarks>
				<p>This item returns the value of a program variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskParameter">
            <summary>Task Parameter</summary><remarks>
				<p>This item returns the value of an task parameter.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskErrorCode">
            <summary>Task Error Code</summary><remarks>
				<p>This item returns the task error code that is currently active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskWarningCode">
            <summary>Task Warning Code</summary><remarks>
				<p>This item returns the task warning code that is currently active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.DwellCommandPercentComplete">
            <summary>Dwell Command Percent Complete</summary><remarks>
				<p>This item returns the percentage of completeness of a Dwell command. If a Dwell command is not executing, 100% is returned.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.WaitCommandDuration">
            <summary>Wait Command Duration</summary><remarks>
				<p>This item returns the number of milliseconds that a Wait command has been executing. If a Wait command is not executing, 0 is returned.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedSpeedTargetActual">
            <summary>Coordinated Speed Target Actual</summary><remarks>
				<p>This item returns the actual target speed for dominant axes in a coordinated move. The actual target speed may differ from the commanded speed if the move does not reach constant velocity.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.DependentCoordinatedSpeedTargetActual">
            <summary>Dependent Coordinated Speed Target Actual</summary><remarks>
				<p>This item returns the actual target speed for dependent axes in a coordinated move. The actual target speed may differ from the commanded speed if the move does not reach constant velocity.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ActiveFixtureOffset">
            <summary>Active Fixture Offset</summary><remarks>
				<p>This item returns the one-based index of the active fixture offset.</p>
				<p>If zero is returned, then no fixture offsets are active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskStatus0">
            <summary>Task Status 0</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/taskstatus0.html">Task Status 0</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskStatus1">
            <summary>Task Status 1</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/taskstatus1.html">Task Status 1</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskStatus2">
            <summary>Task Status 2</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/taskstatus2.html">Task Status 2</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ProgramLineNumberNoSync">
            <summary>Program Line Number No Sync</summary><remarks>
				<p>This item returns the value of the program line number not synchronized to the motion queue.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.Spindle0SpeedTarget">
            <summary>Spindle 0 Speed Target</summary><remarks>
				<p>This item returns the spindle 0 target speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.Spindle1SpeedTarget">
            <summary>Spindle 1 Speed Target</summary><remarks>
				<p>This item returns the spindle 1 target speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.Spindle2SpeedTarget">
            <summary>Spindle 2 Speed Target</summary><remarks>
				<p>This item returns the spindle 2 target speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.Spindle3SpeedTarget">
            <summary>Spindle 3 Speed Target</summary><remarks>
				<p>This item returns the spindle 3 target speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinateSystem1I">
            <summary>Coordinate System 1 I</summary><remarks>
				<p>This item returns the axis index assigned to the I-axis of coordinate system 1.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinateSystem1J">
            <summary>Coordinate System 1 J</summary><remarks>
				<p>This item returns the axis index assigned to the J-axis of coordinate system 1.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinateSystem1K">
            <summary>Coordinate System 1 K</summary><remarks>
				<p>This item returns the axis index assigned to the K-axis of coordinate system 1.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinateSystem1Plane">
            <summary>Coordinate System 1 Plane</summary><remarks>
				<p>This item returns the active plane index for coordinate system 1.</p>
				<p>Refer to the G17, G18, and G19 commands for more information on coordinate system planes.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ToolNumberActive">
            <summary>Tool Number Active</summary><remarks>
				<p>This item returns the active tool that was set by the T command.</p>
				<p>This item returns zero if no tool is active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.MFO">
            <summary>MFO</summary><remarks>
				<p>This item returns the MFO value.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedSpeedTarget">
            <summary>Coordinated Speed Target</summary><remarks>
				<p>This item returns the target speed for dominant axes in a coordinated move. The target speed is set using the F command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.DependentCoordinatedSpeedTarget">
            <summary>Dependent Coordinated Speed Target</summary><remarks>
				<p>This item returns the target speed for dependent axes in a coordinated move. The dependent target speed is set using the E command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedAccelerationRate">
            <summary>Coordinated Acceleration Rate</summary><remarks>
				<p>This item returns the value of the coordinated acceleration rate.</p>
				<p>Refer to the RAMP RATE command for more information on setting the coordinated acceleration rate.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedDecelerationRate">
            <summary>Coordinated Deceleration Rate</summary><remarks>
				<p>This item returns the value of the coordinated deceleration rate.</p>
				<p>Refer to the RAMP RATE command for more information on setting the coordinated deceleration rate.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedAccelerationTime">
            <summary>Coordinated Acceleration Time</summary><remarks>
				<p>This item returns the value of the coordinated acceleration time.</p>
				<p>Refer to the RAMP TIME command for more information on setting the coordinated acceleration time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedDecelerationTime">
            <summary>Coordinated Deceleration Time</summary><remarks>
				<p>This item returns the value of the coordinated deceleration time.</p>
				<p>Refer to the RAMP TIME command for more information on setting the coordinated deceleration time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskMode">
            <summary>Task Mode</summary><remarks>
				<p>
					This item returns the value of the <a href="a3200.chm::/StructsAutoGen/taskmode.html">Task Mode</a> word.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskState">
            <summary>Task State</summary><remarks>
				<p>This item returns the current <a href="a3200.chm::/StructsAutoGen/taskstate.html">Task State</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskStateInternal">
            <summary>Task State Internal</summary><remarks>
				<p>This item returns the current internal task state and is for internal use only.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ExecutionMode">
            <summary>Execution Mode</summary><remarks>
				<p>This item returns the task execution mode.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskErrorLocation">
            <summary>Task Error Location</summary><remarks>
				<p>This item returns the task error location code that is currently active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskWarningLocation">
            <summary>Task Warning Location</summary><remarks>
				<p>This item returns the task warning location code that is currently active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ProgramPersistent">
            <summary>Program Persistent</summary><remarks>
				<p>This item indicates that a program is persistent to this task.</p>
				<p>All associated programs that are not immediate commands are considered persistent.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ImmediateState">
            <summary>Immediate State</summary><remarks>
				<p>This item returns the immediate thread state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.EnableAlignmentAxes">
            <summary>Enable Alignment Axes</summary><remarks>
				<p>This is an internal status item.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.QueueStatus">
            <summary>Queue Status</summary><remarks>
				<p>
					This item returns the value of the <a href="a3200.chm::/StructsAutoGen/queuestatus.html">Queue Status</a> word.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedGalvoLaserOutput">
            <summary>Coordinated Galvo Laser Output</summary><remarks>
				<p>This item returns the value of the coordinated galvo laser output.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedMotionRate">
            <summary>Coordinated Motion Rate</summary><remarks>
				<p>This item returns the coordinated motion rate in kHz.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedTaskCommand">
            <summary>Coordinated Task Command</summary><remarks>
				<p>This item returns the argument to the coordinated task command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.FiberMoveCount">
            <summary>Fiber Move Count</summary><remarks>
				<p>This item returns the number of moves in a fiber search</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.EnableState">
            <summary>Enable State</summary><remarks>
				<p>This item returns the enable state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CannedFunctionID">
            <summary>Canned Function ID</summary><remarks>
				<p>This item returns the identification number of the canned function pending execution on the task. This value becomes zero once the canned function is executing.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskDoubleVariable">
            <summary>Task Double Variable</summary><remarks>
				<p>This item returns the value of a double-precision task variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskInfoVariable">
            <summary>Task Info Variable</summary><remarks>
				<p>This item returns the value of a task info variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskReturnVariable">
            <summary>Task Return Variable</summary><remarks>
				<p>This item returns the value of the task return variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.FiberPower">
            <summary>Fiber Power</summary><remarks>
				<p>
					This item returns the most recent power sample from a <a href="A3200.chm::/StructsAutoGen/fibersearchresult.html">fiber search</a>.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.FiberPowerOptimal">
            <summary>Fiber Optimum</summary><remarks>
				<p>
					This item returns the optimal power sample seen in a <a href="A3200.chm::/StructsAutoGen/fibersearchresult.html">fiber search</a>.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.FiberPowerSampleCount">
            <summary>Fiber Power Count</summary><remarks>
				<p>
					This item returns the number of power samples performed in a <a href="A3200.chm::/StructsAutoGen/fibersearchresult.html">fiber search</a>.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.FiberSearchResult">
            <summary>Fiber Search Result</summary><remarks>
				<p>
					This item returns information on the result of a <a href="a3200.chm::/StructsAutoGen/fibersearchresult.html">fiber search</a>.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.LookaheadMovesExamined">
            <summary>Number of moves lookahead examined</summary><remarks>
				<p>This item returns number of moves lookahead examined.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.LookaheadMovesRecomputed">
            <summary>Number of moves lookahead recomputed</summary><remarks>
				<p>This item returns number of moves lookahead recomputed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ProgramLineNumberInternal">
            <summary>Program Line Number Internal</summary><remarks>
				<p>This item returns the value of the program line number internal to the SMC.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ProfileControlMask">
            <summary>Profile Control Mask</summary><remarks>
				<p>This item returns the profile control axis mask of the task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.QueueLineCount">
            <summary>Queue Line Count</summary><remarks>
				<p>This item returns the number of items loaded in the program queue.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.QueueLineCapacity">
            <summary>Queue Line Capacity</summary><remarks>
				<p>This item returns the total capacity of the program queue.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ImmediateCommandErrorCode">
            <summary>Immediate Command Error Code</summary><remarks>
				<p>This item returns the error code of the last condition that caused the immediate command to fail execution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ImmediateCommandErrorLocation">
            <summary>Immediate Command Error Location</summary><remarks>
				<p>This item returns the error location of the last condition that caused the immediate command to fail execution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.LookaheadErrorCode">
            <summary>Lookahead Error Code</summary><remarks>
				<p>This item returns the error code that occurred during lookahead.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.LookaheadErrorLocation">
            <summary>Lookahead Error Location</summary><remarks>
				<p>This item returns the error location that occurred during lookahead.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.LookaheadMovePoolIndex">
            <summary>Lookahead Move Pool Index</summary><remarks>
				<p>This item returns the current index of the lookahead move pool.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ActiveMovePoolIndex">
            <summary>Active Move Pool Index</summary><remarks>
				<p>This item returns the current index of the active move pool.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedArcRadiusReciprocal">
            <summary>Reciprocal of the Coordinated Arc Radius</summary><remarks>
				<p>This item returns one over the radius of a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.ActiveMoveElementAddedOrderIndex">
            <summary>Active Move Element Added Order Index</summary><remarks>
				<p>The order that this move element was added into the active move queue</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.MotionEngineStage">
            <summary>Motion Engine Stage</summary><remarks>
				<p>This item returns the stage of the motion engine.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedTimeScale">
            <summary>Coordinated Time Scale</summary><remarks>
				<p>This item returns the time scaling ratio being applied to the trajectory</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.CoordinatedTimeScaleDerivative">
            <summary>Coordinated Time Scale Derivative</summary><remarks>
				<p>This item returns the derivative of the time scaling ratio being applied to the trajectory</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVSpeedScale">
            <summary>IFOV Speed Scale</summary><remarks>
				<p>This item returns the instantaneous speed scaling of your marking and non-marking moves in IFOV. A value of 1.0 indicates full programmed speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVSpeedScaleAverage">
            <summary>IFOV Speed Scale Average</summary><remarks>
				<p>This item returns the average speed scaling of your marking and non-marking moves in IFOV. A value of 1.0 indicates full programmed speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVGenerationFrameCounter">
            <summary>IFOV Generation Frame Counter</summary><remarks>
				<p>This item returns the number of IFOV generation frame triggers.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVGenerationTimeOriginal">
            <summary>IFOV Generation Time Original</summary><remarks>
				<p>This item returns the original number of milliseconds (elements) in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVGenerationTimeModified">
            <summary>IFOV Generation Time Modified</summary><remarks>
				<p>This item returns the modified number of milliseconds in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVCoordinatedPositionCommand">
            <summary>IFOV Coordinated Position Command</summary><remarks>
				<p>This item returns the coordinated servo position of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVCoordinatedSpeedCommand">
            <summary>IFOV Coordinated Speed Command</summary><remarks>
				<p>This item returns the coordinated servo speed of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVCenterPointH">
            <summary>IFOV Center Point H</summary><remarks>
				<p>This item returns the horizontal axis component of the servo center point of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVCenterPointV">
            <summary>IFOV Center Point V</summary><remarks>
				<p>This item returns the vertical axis component of the servo center point of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVTrajectoryCount">
            <summary>IFOV Trajectory Count</summary><remarks>
				<p>This item returns the number of servo trajectories in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVTrajectoryIndex">
            <summary>IFOV Trajectory Index</summary><remarks>
				<p>This item returns the index of the servo trajectory active in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVAttemptCode">
            <summary>IFOV Attempt Code</summary><remarks>
				<p>This item returns the trajectory attempt that was used for the active move in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVGenerationFrameIndex">
            <summary>IFOV Generation Frame Index</summary><remarks>
				<p>This item returns the frame index of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVMaximumVelocity">
            <summary>IFOV Maximum Velocity</summary><remarks>
				<p>This item returns the maximum allowable velocity of the current servo move in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVIdealVelocity">
            <summary>IFOV Ideal Velocity</summary><remarks>
				<p>This item returns the attempted ideal velocity of the current servo move in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.TaskInternalDebug">
            <summary>Task Internal Debug</summary><remarks>
				<p>This item returns internal debugging information.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVCoordinatedAccelerationCommand">
            <summary>IFOV Coordinated Acceleration Command</summary><remarks>
				<p>This item returns the coordinated servo acceleration of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVFOVPositionH">
            <summary>IFOV FOV Position H</summary><remarks>
				<p>This item returns the commanded horizontal FOV position of the galvo head.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVFOVPositionV">
            <summary>IFOV FOV Position V</summary><remarks>
				<p>This item returns the commanded vertical FOV position of the galvo head.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVFOVDimensionH">
            <summary>IFOV FOV Dimension H</summary><remarks>
				<p>This item returns the horizontal FOV dimension used by the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.DataCollection.TaskDataSignal.IFOVFOVDimensionV">
            <summary>IFOV FOV Dimension V</summary><remarks>
				<p>This item returns the vertical FOV dimension used by the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.CategoryStatusSignal">
            <summary>The data category</summary>
        </member>
        <member name="F:Aerotech.A3200.Status.CategoryStatusSignal.Axis">
            <summary>
					<p>Items for a specific axis</p>
				</summary><remarks>
					<p>Axis data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.CategoryStatusSignal.System">
            <summary>
					<p>Items for the whole system</p>
				</summary><remarks>
					<p>System data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.CategoryStatusSignal.Task">
            <summary>
					<p>Items for a specific task</p>
				</summary><remarks>
					<p>Task data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.AxisStatusSignal">
            <summary>
					<p>Items for a specific axis</p>
				</summary><remarks>
					<p>Axis data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionFeedback">
            <summary>Position Feedback</summary><remarks>
				<p>This item returns the position feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCommand">
            <summary>Position Command</summary><remarks>
				<p>This item returns the position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionError">
            <summary>Position Error</summary><remarks>
				<p>This item returns the position error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.VelocityFeedback">
            <summary>Velocity Feedback</summary><remarks>
				<p>This item returns the velocity feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.VelocityCommand">
            <summary>Velocity Command</summary><remarks>
				<p>This item returns the commanded velocity of the axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.VelocityError">
            <summary>Velocity Error</summary><remarks>
				<p>This item returns the velocity error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationCommand">
            <summary>Acceleration Command</summary><remarks>
				<p>This item returns the value of the acceleration command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.CurrentFeedback">
            <summary>Current Feedback</summary><remarks>
				<p>This item returns the current feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.CurrentCommand">
            <summary>Current Command</summary><remarks>
				<p>This item returns the current command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.CurrentError">
            <summary>Current Error</summary><remarks>
				<p>This item returns the current error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AnalogInput0">
            <summary>Analog Input 0</summary><remarks>
				<p>This item returns the value of analog input 0. The returned value corresponds to channel 0 of <a href="../../../Commands/$AI_Function.html">$AI</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AnalogInput1">
            <summary>Analog Input 1</summary><remarks>
				<p>This item returns the value of analog input 1. The returned value corresponds to channel 1 of <a href="../../../Commands/$AI_Function.html">$AI</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCommandRaw">
            <summary>Position Command Raw</summary><remarks>
				<p>This item returns the raw position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.VelocityCommandRaw">
            <summary>Velocity Command Raw</summary><remarks>
				<p>This item returns the raw velocity command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionFeedbackAuxiliary">
            <summary>Position Feedback Auxiliary</summary><remarks>
				<p>This item returns the position feedback from the auxiliary encoder.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DigitalInput">
            <summary>Digital Input</summary><remarks>
				<p>This item returns the value of the 32-bit digital input word that is read from the drive. The returned value corresponds to the individual <a href="../../../Commands/$DI_Function.html">$DI</a> bits.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DigitalOutput">
            <summary>Digital Output</summary><remarks>
				<p>This item returns the value of the 32-bit digital output word that is read from the drive. The returned value corresponds to the individual <a href="../../../Commands/$DO_Function.html">$DO</a> bits.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FixtureOffset">
            <summary>Fixture Offset</summary><remarks>
				<p>This item returns the value of the specified fixture offset.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AnalogInput2">
            <summary>Analog Input 2</summary><remarks>
				<p>This item returns the value of analog input 2. The returned value corresponds to channel 2 of <a href="../../../Commands/$AI_Function.html">$AI</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AnalogInput3">
            <summary>Analog Input 3</summary><remarks>
				<p>This item returns the value of analog input 3. The returned value corresponds to channel 3 of <a href="../../../Commands/$AI_Function.html">$AI</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AnalogOutput0">
            <summary>Analog Output 0</summary><remarks>
				<p>This item returns the value of analog output 0. The returned value corresponds to channel 0 of <a href="../../../Commands/$AO_Function.html">$AO</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AnalogOutput1">
            <summary>Analog Output 1</summary><remarks>
				<p>This item returns the value of analog output 1. The returned value corresponds to channel 1 of <a href="../../../Commands/$AO_Function.html">$AO</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AnalogOutput2">
            <summary>Analog Output 2</summary><remarks>
				<p>This item returns the value of analog output 2. The returned value corresponds to channel 2 of <a href="../../../Commands/$AO_Function.html">$AO</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AnalogOutput3">
            <summary>Analog Output 3</summary><remarks>
				<p>This item returns the value of analog output 3. The returned value corresponds to channel 3 of <a href="../../../Commands/$AO_Function.html">$AO</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.CoordinatedPositionTarget">
            <summary>Coordinated Position Target</summary><remarks>
				<p>This item returns the coordinated target position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DriveStatus">
            <summary>Drive Status</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/drivestatus.html">Drive Status</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AxisStatus">
            <summary>Axis Status</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/axisstatus.html">Axis Status</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AxisFault">
            <summary>Axis Fault</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/axisfault.html">Axis Fault</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationCommandRaw">
            <summary>Acceleration Command Raw</summary><remarks>
				<p>This item returns the value of the raw acceleration command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCalibrationAll">
            <summary>Position Calibration All</summary><remarks>
				<p>This item returns the 1D + 2D position calibration contribution with the backlash contribution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionFeedbackRollover">
            <summary>Position Feedback Rollover</summary><remarks>
				<p>This item returns the position feedback with rollover applied.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCommandRollover">
            <summary>Position Command Rollover</summary><remarks>
				<p>This item returns the position command with rollover applied.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionFeedbackAuxiliaryRollover">
            <summary>Position Feedback Auxiliary Rollover</summary><remarks>
				<p>This item returns the position feedback from the auxiliary encoder with rollover applied.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.VelocityFeedbackAverage">
            <summary>Velocity Feedback Average</summary><remarks>
				<p>This item returns the average velocity feedback.</p>
				<p>The average value is calculated over a period of 100 milliseconds.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.CurrentFeedbackAverage">
            <summary>Current Feedback Average</summary><remarks>
				<p>This item returns the average current feedback.</p>
				<p>The average value is calculated over a period of 100 milliseconds.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AxisParameter">
            <summary>Axis Parameter</summary><remarks>
				<p>This item returns the value of an axis parameter.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PeakCurrent">
            <summary>Peak Current</summary><remarks>
				<p>This item returns the peak current rating.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.Backlash">
            <summary>Backlash</summary><remarks>
				<p>This item returns the backlash contribution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.HomeState">
            <summary>Home State</summary><remarks>
				<p>This item returns the home state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCalibration2D">
            <summary>Position Calibration 2D</summary><remarks>
				<p>This item returns the 2D position calibration contribution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.NormalcyDebug">
            <summary>Normalcy Debug</summary><remarks>
				<p>This item returns normalcy debugging information.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.TotalMoveTime">
            <summary>Total Move Time</summary><remarks>
				<p>This item returns the total move time of the last move.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.Stability0SettleTime">
            <summary>Stability 0 Settle Time</summary><remarks>
				<p>This item returns the stability 0 settle time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.Stability1SettleTime">
            <summary>Stability 1 Settle Time</summary><remarks>
				<p>This item returns the stability 1 settle time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionFeedbackDrive">
            <summary>Position Feedback Drive</summary><remarks>
				<p>This item returns the position feedback returned by the drive.</p>
				<p>This item includes calibration and backlash. POSOFFSET and HomePositionSet offsets are not included in this value.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.JerkCommandRaw">
            <summary>Jerk Command Raw</summary><remarks>
				<p>This item returns the raw jerk command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.ProgramPositionCommand">
            <summary>Program Position Command</summary><remarks>
				<p>This item returns the program position command.</p>
				<p>Commanded program position of the axis in user units. The program position command is the position commanded to the motor as it is represented in the program coordinate system. This item does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GantryOffset">
            <summary>Gantry Offset</summary><remarks>
				<p>This item returns the gantry marker offset.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionOffset">
            <summary>Position Offset</summary><remarks>
				<p>This item returns the value of the position offset.</p>
				<p>The position offset value is set using the POSOFFSET SET command and is cleared using the POSOFFSET CLEAR command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.CommunicationRealTimeErrors">
            <summary>Communication Real Time Errors</summary><remarks>
				<p>This item returns the number of times that the A3200 did not have sufficient time to complete all of its operations. Refer to <a href="A3200.chm::/Optimizing_A3200_Performance.htm">Optimizing A3200 Performance</a> for instructions about how to optimize the controller settings and prevent this problem.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCommandRawBackwardsDiff">
            <summary>Position Command Raw Backwards Diff</summary><remarks>
				<p>This item returns the backwards difference of the raw position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.VelocityCommandRawBackwardsDiffDelta">
            <summary>Velocity Command Raw Backwards Diff Delta</summary><remarks>
				<p>This item returns the difference between the raw velocity command and the backwards difference of the raw position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCommandDrive">
            <summary>Position Command Drive</summary><remarks>
				<p>This item returns the position command that is read from the drive.</p>
				<p>This item includes calibration and backlash. POSOFFSET and HomePositionSet offsets are not included in this value.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DriveStatusActual">
            <summary>Drive Status Actual</summary><remarks>
				<p>This item returns the value of the drive status word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GantryRealignState">
            <summary>Gantry Realign State</summary><remarks>
				<p>This item returns the gantry realign state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.TransformAutoOffset">
            <summary>Transform Auto Offset</summary><remarks>
				<p>This item returns the auto offset for any active transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.ProgramPositionFeedback">
            <summary>Program Position Feedback</summary><remarks>
				<p>This item returns the program position feedback.</p>
				<p>Feedback program position of the axis in user units. The program position feedback is the position feedback of the motor as it is represented in the program coordinate system. This item does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.JogTrajectoryStatus">
            <summary>Jog Trajectory Status</summary><remarks>
				<p>This item returns the current jog trajectory status.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PingTest">
            <summary>Ping Test</summary><remarks>
				<p>This item returns an arbitrary value and is used to test timing.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GainKposScale">
            <summary>GainKpos Scale</summary><remarks>
				<p>This item returns the active GainKpos scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GainKiScale">
            <summary>GainKi Scale</summary><remarks>
				<p>This item returns the active GainKi scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GainKpScale">
            <summary>GainKp Scale</summary><remarks>
				<p>This item returns the active GainKp scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GainKpiScale">
            <summary>GainKpi Scale</summary><remarks>
				<p>This item returns the active GainKpi scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GainAffScale">
            <summary>GainAff Scale</summary><remarks>
				<p>This item returns the active GainAff scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GainVffScale">
            <summary>GainVff Scale</summary><remarks>
				<p>This item returns the active GainVff scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationTime">
            <summary>Acceleration Time</summary><remarks>
				<p>This item returns the value of the acceleration time.</p>
				<p>Refer to the RAMP TIME command for more information on setting the acceleration time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DecelerationTime">
            <summary>Deceleration Time</summary><remarks>
				<p>This item returns the value of the Deceleration time.</p>
				<p>Refer to the RAMP TIME command for more information on setting the deceleration time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationRate">
            <summary>Acceleration Rate</summary><remarks>
				<p>This item returns the value of the acceleration rate.</p>
				<p>Refer to the RAMP RATE command for more information on setting the acceleration rate.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DecelerationRate">
            <summary>Deceleration Rate</summary><remarks>
				<p>This item returns the value of the deceleration rate.</p>
				<p>Refer to the RAMP RATE command for more information on setting the deceleration rate.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationType">
            <summary>Acceleration Type</summary><remarks>
				<p>This item returns the acceleration type.</p>
				<p>Refer to the RAMP TYPE command for more information on setting the acceleration type.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DecelerationType">
            <summary>Deceleration Type</summary><remarks>
				<p>This item returns the deceleration type.</p>
				<p>Refer to the RAMP TYPE command for more information on setting the deceleration type.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationMode">
            <summary>Acceleration Mode</summary><remarks>
				<p>This item returns the acceleration mode.</p>
				<p>Refer to the RAMP MODE command for more information on setting the acceleration mode.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DecelerationMode">
            <summary>Deceleration Mode</summary><remarks>
				<p>This item returns the deceleration mode.</p>
				<p>Refer to the RAMP MODE command for more information on setting the deceleration mode.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.ProgramPosition">
            <summary>Program Position</summary><remarks>
				<p>This item returns the program position.</p>
				<p>Program position of the axis in user units. The program position reflects the position that you specify in the user program and does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.SpeedTarget">
            <summary>Speed Target</summary><remarks>
				<p>This item returns the target speed for an axis in a RAPID move.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCommandFireWire">
            <summary>Position Command FireWire</summary><remarks>
				<p>This item returns the positions placed into the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DriveSMCMotionState">
            <summary>Drive SMC Motion State</summary><remarks>
				<p>This item returns the internal SMC state regarding whether the drive or SMC is controlling the motion.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCommandRawCal">
            <summary>Position Command Raw Cal</summary><remarks>
				<p>This item returns the raw position command with calibration.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.VelocityCommandRawCal">
            <summary>Velocity Command Raw Cal</summary><remarks>
				<p>This item returns the raw velocity command with calibration.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.VelocityCommandDrive">
            <summary>Velocity Command Drive</summary><remarks>
				<p>This item returns the velocity command that is read from the drive.</p>
				<p>This item includes calibration and backlash.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationCommandDrive">
            <summary>Acceleration Command Drive</summary><remarks>
				<p>This item returns the acceleration command that is read from the drive.</p>
				<p>This item includes calibration and backlash.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GalvoLaserOutputRaw">
            <summary>Galvo Laser Output Raw</summary><remarks>
				<p>This item returns the raw value of the galvo laser output.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketInt32">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a 32-bit integer item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketInt16">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a 16-bit integer item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketInt8">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns an 8-bit integer item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketDouble">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a 64-bit double item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketFloat">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a 32-bit float item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWireDriveCommandCode">
            <summary>FireWire Drive Command Code</summary><remarks>
				<p>This item returns the command code that was sent to the drive in the given slot number in the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationFeedback">
            <summary>Acceleration Feedback</summary><remarks>
				<p>This item returns the value of the acceleration feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationCommandRawCal">
            <summary>Acceleration Command Raw Cal</summary><remarks>
				<p>This item returns the value of the raw acceleration command with calibration.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCalibrationAllDrive">
            <summary>Position Calibration All Drive</summary><remarks>
				<p>This item returns the 1D + 2D position calibration contribution with the backlash contribution synchronized with the drive positions.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.BacklashTarget">
            <summary>Backlash Target</summary><remarks>
				<p>This item returns the target backlash contribution.  It does not take into consideration any backlash filtering.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DriveMotionRate">
            <summary>Drive Motion Rate</summary><remarks>
				<p>This item returns the drive motion rate of an axis in kHz.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DriveMotionDelay">
            <summary>Drive Motion Delay</summary><remarks>
				<p>This item returns the delay in milliseconds between PositionCommandRaw and PositionCommand.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.CalibrationAdjustmentValue">
            <summary>Calibration Adjustment Freeze Value</summary><remarks>
				<p>This item returns the Calibration Adjustment Freeze Value.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.ServoRounding">
            <summary>Servo Rounding</summary><remarks>
				<p>This item indicates whether the position was rounded before sending it to the servo loop.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FeedforwardCurrent">
            <summary>Feedforward Current</summary><remarks>
				<p>This item returns the feedforward current calculated by the SMC. The value is normalized to +/- 1 on virtual axes.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketInfoBitValue">
            <summary>FireWire Packet Info Bit Value</summary><remarks>
				<p>This item returns the value of specified bit of the firewire info packet</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccelerationError">
            <summary>Acceleration Error</summary><remarks>
				<p>This item returns the value of the acceleration error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.SuppressedFaults">
            <summary>Suppressed Faults</summary><remarks>
				<p>This item returns the fault mask suppressed during a HOME or ENABLE.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketStreamingData">
            <summary>FireWire Packet Streaming Data</summary><remarks>
				<p>DWORD representation of the streaming data in the packet (used in ANALOG and PROBE commands).</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PositionCommandRawUnfiltered">
            <summary>Position Command Raw Unfiltered</summary><remarks>
				<p>This item returns the raw position command before trajectory filtering.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.TransitionOffsetErrors">
            <summary>Transition Offset Errors</summary><remarks>
				<p>This item returns the number of "transition offset" errors since the last reset.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FreezeVelocityCommand">
            <summary>Freeze Velocity Command</summary><remarks>
				<p>This item returns TRUE when the drive step changes the value of Position Command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FreezeVelocityFeedback">
            <summary>Freeze Velocity Feedback</summary><remarks>
				<p>This item returns TRUE when the drive step changes the value of Position Feedback.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.InternalPositionOffsets">
            <summary>Internal Position Offsets</summary><remarks>
				<p>This item is for internal use only.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.StatusHighLevelOffsetsLastMsec">
            <summary>StatusHighLevelOffsetsLastMsec</summary><remarks>
				<p>This item is for internal use only.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.ProgramVelocityCommand">
            <summary>Program Velocity Command</summary><remarks>
				<p>This item returns the program velocity command.</p>
				<p>The program velocity command is the velocity command as it is represented in the program coordinate system. This item does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.ProgramVelocityFeedback">
            <summary>Program Velocity Feedback</summary><remarks>
				<p>This item returns the program velocity feedback.</p>
				<p>The program velocity feedback is the velocity feedback as it is represented in the program coordinate system. This item does not include the output of any of the transformations.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DriveMotionDelayLive">
            <summary>Drive Motion Delay Live</summary><remarks>
				<p>This item returns the delay in milliseconds between PositionCommandRaw and PositionCommand, dynamically updated.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DriveCommunicationDelay">
            <summary>Drive Communication Delay</summary><remarks>
				<p>This item returns the communication delay in milliseconds between the SMC and drive.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DriveCommunicationDelayLive">
            <summary>Drive Communication Delay Live</summary><remarks>
				<p>This item returns the communication delay in milliseconds between the SMC and drive, dynamically updated.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketResponseInt32">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a 32-bit integer item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketResponseInt16">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a 16-bit integer item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketResponseInt8">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns an 8-bit integer item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketResponseDouble">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a 64-bit double item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketResponseFloat">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a 32-bit float item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketBit">
            <summary>FireWire Packet</summary><remarks>
				<p>This item returns a bit item from the FireWire packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.FireWirePacketResponseBit">
            <summary>FireWire Packet Response</summary><remarks>
				<p>This item returns a bit item from the FireWire response packet.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.SpeedTargetActual">
            <summary>Speed Target Actual</summary><remarks>
				<p>This item returns the limited target speed for an axis in a RAPID move.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.CoordinatedDistanceRemaining">
            <summary>Coordinated Distance Remaining</summary><remarks>
				<p>This item returns the distance remaining in a coordinated motion.</p>
				<p>The distance remaining is defined as the coordinated target position minus the program position. The program position reflects the position specified in the program and does not include the output of any transformations.</p>
				<p>This item is valid only during coordinated motion. Its value is zero for all other types of motion.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.SafeZoneState">
            <summary>Safe Zone State</summary><remarks>
				<p>This item returns the current safe zone state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GainKd1Scale">
            <summary>GainKd1 Scale</summary><remarks>
				<p>This item returns the active GainKd1 scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GainKp1Scale">
            <summary>GainKp1 Scale</summary><remarks>
				<p>This item returns the active GainKp1 scale factor when using Gain Mapping.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.MoveReferencePosition">
            <summary>Move Reference Position</summary><remarks>
				<p>This item returns the move reference position of an axis on a given task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.MoveReferenceCutterOffset">
            <summary>Move Reference Cutter Offset</summary><remarks>
				<p>This item returns the move reference cutter offset of an axis on a given task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.MoveReferenceCornerOffset">
            <summary>Move Reference Corner Offset</summary><remarks>
				<p>This item returns the move reference corner offset of an axis on a given task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.MoveReferenceTotalOffset">
            <summary>Move Reference Total Offset</summary><remarks>
				<p>This item returns the move reference total offset of an axis on a given task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GantryMarkerLatchPosition">
            <summary>Gantry Marker Latch Position</summary><remarks>
				<p>This item returns the marker position that is latched during a gantry home.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PiezoVoltageCommand">
            <summary>Piezo Voltage Command</summary><remarks>
				<p>This item returns the voltage command for a piezo axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.PiezoVoltageFeedback">
            <summary>Piezo Voltage Feedback</summary><remarks>
				<p>This item returns voltage feedback for a piezo axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.DistanceLog">
            <summary>Distance Log</summary><remarks>
				<p>This item returns the total distance traveled by this axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AutoFocusError">
            <summary>AutoFocus Error</summary><remarks>
				<p>This item returns the autofocus error.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GalvoLaserOutputRawAdvance">
            <summary>Galvo Laser Output Raw Advance</summary><remarks>
				<p>This item returns the galvo laser output advance in 200 nanosecond intervals.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GalvoLaserOnDelay">
            <summary>Galvo Laser On Delay</summary><remarks>
				<p>This item returns the time that the Nmark will command the laser to go on relative to the rising edge of the Galvo Laser Output signal.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.GalvoLaserOffDelay">
            <summary>Galvo Laser Off Delay</summary><remarks>
				<p>This item returns the time that the Nmark will command the laser to go off relative to the falling edge of the Galvo Laser Output signal.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.CalibrationAdjustmentState">
            <summary>Calibration Adjustment State</summary><remarks>
				<p>This item returns the calibration adjustment state of the axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccuracyCorrectionStartingPosition">
            <summary>Accuracy Correction Starting Position</summary><remarks>
				<p>This item returns the minimum position that is corrected by accuracy calibration.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.AxisStatusSignal.AccuracyCorrectionEndingPosition">
            <summary>Accuracy Correction Ending Position</summary><remarks>
				<p>This item returns the maximum position that is corrected by accuracy calibration.</p>
			</remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.SystemStatusSignal">
            <summary>
					<p>Items for the whole system</p>
				</summary><remarks>
					<p>System data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.VirtualBinaryInput">
            <summary>Virtual Binary Input</summary><remarks>
            <p>
              This item returns the value of a 16-bit virtual binary input word that corresponds to the individual $BI bits.
            </p>
          </remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.VirtualBinaryOutput">
            <summary>Virtual Binary Output</summary><remarks>
            <p>
              This item returns the value of a 16-bit virtual binary output word that corresponds to the individual $BO bits.
            </p>
          </remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.VirtualRegisterInput">
            <summary>Virtual Register Input</summary><remarks>
            <p>
              This item returns the value of a double-precision floating-point virtual register input word that corresponds to the &lt;Register&gt; argument of $RI.
            </p>
          </remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.VirtualRegisterOutput">
            <summary>Virtual Register Output</summary><remarks>
            <p>
              This item returns the value of a double-precision floating-point virtual register output word that corresponds to the &lt;Register&gt; argument of $RO.
            </p>
          </remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.Timer">
            <summary>Timer</summary><remarks>
				<p>This item returns the value of a system timer.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.TimerPerformance">
            <summary>Timer Performance</summary><remarks>
				<p>This item returns the value of a system performance timer.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.GlobalVariable">
            <summary>Global Variable</summary><remarks>
				<p>This item returns the value of a global variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.LibraryCommand">
            <summary>Library Command</summary><remarks>
				<p>This item returns the opcode, subcode, or number of library commands.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.DataCollectionSampleTime">
            <summary>Data Collection Sample Time</summary><remarks>
				<p>This item returns the data collection sample time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.DataCollectionSampleIndex">
            <summary>Data Collection Sample Index</summary><remarks>
				<p>This item returns the data collection sample index.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ZYGOPosition1">
            <summary>ZYGO Position 1</summary><remarks>
				<p>This item returns the value of the ZYGO laser position for the first axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ZYGOPosition2">
            <summary>ZYGO Position 2</summary><remarks>
				<p>This item returns the value of the ZYGO laser position for the second axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ZYGOPosition3">
            <summary>ZYGO Position 3</summary><remarks>
				<p>This item returns the value of the ZYGO laser position for the third axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ZYGOPosition4">
            <summary>ZYGO Position 4</summary><remarks>
				<p>This item returns the value of the ZYGO laser position for the fourth axis.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PCModbusMasterConnected">
            <summary>PC Modbus Master Connected</summary><remarks>
				<p>This item returns a boolean value that indicates if the connection is established.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PCModbusSlaveConnected">
            <summary>PC Modbus Slave Connected</summary><remarks>
				<p>This item returns a boolean value that indicates if the connection is established.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PCModbusMasterErrorCode">
            <summary>PC Modbus Master Error Code</summary><remarks>
				<p>This item returns the value of the last system error code to occur on this connection.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PCModbusSlaveErrorCode">
            <summary>PC Modbus Slave Error Code</summary><remarks>
				<p>This item returns the value of the last system error code to occur on this connection.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PCModbusMasterErrorLocation">
            <summary>PC Modbus Master Error Location</summary><remarks>
				<p>This item returns the value of the last system error location code to occur on this connection.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PCModbusSlaveErrorLocation">
            <summary>PC Modbus Slave Error Location</summary><remarks>
				<p>This item returns the value of the last system location code to occur on this connection.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.StopWatchTimer">
            <summary>Stop Watch Timer</summary><remarks>
				<p>
					This item returns the value of the StopWatch Timer
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ScopetrigID">
            <summary>Scopetrig ID</summary><remarks>
				<p>This item returns the value of the most recent SCOPETRIG ID.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCBool">
            <summary>PLC Bool</summary><remarks>
				<p>This item returns a bit from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCByte">
            <summary>PLC Byte</summary><remarks>
				<p>This item returns a BYTE from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCWord">
            <summary>PLC Word</summary><remarks>
				<p>This item returns a WORD from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCDword">
            <summary>PLC Dword</summary><remarks>
				<p>This item returns a DWORD from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCSint">
            <summary>PLC Sint</summary><remarks>
				<p>This item returns a SINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCInt">
            <summary>PLC Int</summary><remarks>
				<p>This item returns a INT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCDint">
            <summary>PLC Dint</summary><remarks>
				<p>This item returns a DINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCUsint">
            <summary>PLC Usint</summary><remarks>
				<p>This item returns a USINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCUint">
            <summary>PLC Uint</summary><remarks>
				<p>This item returns a UINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCUdint">
            <summary>PLC Udint</summary><remarks>
				<p>This item returns a UDINT from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCReal">
            <summary>PLC Real</summary><remarks>
				<p>This item returns a REAL from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.PLCLreal">
            <summary>PLC Lreal</summary><remarks>
				<p>This item returns a LREAL from the PLC shared variable memory.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.EstimatedProcessorUsage">
            <summary>Estimated Processor Usage</summary><remarks>
				<p>This item returns the estimated SMC processor usage as a percentage.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.DataCollectionStatus">
            <summary>Data Collection Status</summary><remarks>
				<p>
                    This item returns the value of the <a href="../../../StructsAutoGen/datacollectionflags.html">Data Collection Flags</a> word.
                </p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.SignalLogState">
            <summary>Signal Log State</summary><remarks>
				<p>This item returns the state of the Signal Log.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.FieldbusConnected">
            <summary>Fieldbus Connected</summary><remarks>
				<p>This item returns true if a connection to the Fieldbus slave is established.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.FieldbusErrorCode">
            <summary>Fieldbus Error Code</summary><remarks>
				<p>This item returns the current error code of the Fieldbus device.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.FieldbusErrorLocation">
            <summary>Fieldbus Error Location</summary><remarks>
				<p>This item returns the current error location of the Fieldbus device.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.FieldbusActiveConnections">
            <summary>Fieldbus Active Connections</summary><remarks>
				<p>This item returns the number of Fieldbus connections in an active state for this device.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.FieldbusInactiveConnections">
            <summary>Fieldbus Inactive Connections</summary><remarks>
				<p>This item returns the number of Fieldbus connections in an inactive state for this device.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.SafeZoneViolationMask">
            <summary>Safe Zone Violation Mask</summary><remarks>
				<p>This item returns the mask of violated safe zones. Once a zone is violated it will remain violated until any one of the axes in the safe zone is moved again.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.SafeZoneActiveMask">
            <summary>Safe Zone Active Mask</summary><remarks>
				<p>This item returns the mask of active safe zones.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.FieldbusInputs">
            <summary>Fieldbus Inputs I/O</summary><remarks>
				<p>This item returns the current state of the Fieldbus Inputs I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.FieldbusOutputs">
            <summary>Fieldbus Outputs I/O</summary><remarks>
				<p>This item returns the current state of the Fieldbus Outputs I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusMasterInputWords">
            <summary>Modbus Master Input Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Input Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusMasterOutputWords">
            <summary>Modbus Master Output Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Output Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusMasterInputBits">
            <summary>Modbus Master Input Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Input Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusMasterOutputBits">
            <summary>Modbus Master Output Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Output Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusMasterOutputStatusBits">
            <summary>Modbus Master Output Status Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Output Status Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusMasterOutputStatusWords">
            <summary>Modbus Master Output Status Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Master Output Status Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusSlaveInputWords">
            <summary>Modbus Slave Input Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Slave Input Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusSlaveOutputWords">
            <summary>Modbus Slave Output Words I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Slave Output Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusSlaveInputBits">
            <summary>Modbus Slave Input Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Slave Input Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.ModbusSlaveOutputBits">
            <summary>Modbus Slave Output Bits I/O</summary><remarks>
				<p>This item returns the current state of the Modbus Slave Output Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.DriveModbusMasterInputWords">
            <summary>Drive Modbus Master Input Words I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Input Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.DriveModbusMasterOutputWords">
            <summary>Drive Modbus Master Output Words I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Output Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.DriveModbusMasterInputBits">
            <summary>Drive Modbus Master Input Bits I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Input Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.DriveModbusMasterOutputBits">
            <summary>Drive Modbus Master Output Bits I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Output Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.DriveModbusMasterOutputStatusBits">
            <summary>Drive Modbus Master Output Status Bits I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Output Status Bits I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.DriveModbusMasterOutputStatusWords">
            <summary>Drive Modbus Master Output Status Words I/O</summary><remarks>
				<p>This item returns the current state of the Drive Modbus Master Output Status Words I/O.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.SystemStatusSignal.SystemParameter">
            <summary>System Parameter</summary><remarks>
				<p>This item returns the value of a system parameter.</p>
			</remarks>
        </member>
        <member name="T:Aerotech.A3200.Status.TaskStatusSignal">
            <summary>
					<p>Items for a specific task</p>
				</summary><remarks>
					<p>Task data can be sampled at rate of 1 kHz or lower.</p>
				</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ProgramLineNumber">
            <summary>Program Line Number</summary><remarks>
				<p>This item returns the value of the program line number.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedFlags">
            <summary>Coordinated Flags</summary><remarks>
				<p>This item returns the value of the coordinated flags.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedArcStartAngle">
            <summary>Coordinated Arc Start Angle</summary><remarks>
				<p>This item returns the starting angle for a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedArcEndAngle">
            <summary>Coordinated Arc End Angle</summary><remarks>
				<p>This item returns the ending angle for a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedArcRadius">
            <summary>Coordinated Arc Radius</summary><remarks>
				<p>This item returns the radius of a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedArcRadiusError">
            <summary>Coordinated Arc Radius Error</summary><remarks>
				<p>This item returns the percentage radius error of a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedPositionCommand">
            <summary>Coordinated Position Command</summary><remarks>
				<p>This item returns the coordinated position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedSpeedCommand">
            <summary>Coordinated Speed Command</summary><remarks>
				<p>This item returns the absolute value of the coordinated velocity command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedAccelerationCommand">
            <summary>Coordinated Acceleration Command</summary><remarks>
				<p>This item returns the absolute value of the coordinated acceleration command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedTotalDistance">
            <summary>Coordinated Total Distance</summary><remarks>
				<p>This item returns the total distance of the coordinated move.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedPercentDone">
            <summary>Coordinated Percent Done</summary><remarks>
				<p>This item returns the percentage of the coordinated move that has been completed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedPositionCommandBackwardsDiff">
            <summary>Coordinated Position Command Backwards Diff</summary><remarks>
				<p>This item returns the backwards difference of the coordinated position command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ProgramVariable">
            <summary>Program Variable</summary><remarks>
				<p>This item returns the value of a program variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskParameter">
            <summary>Task Parameter</summary><remarks>
				<p>This item returns the value of an task parameter.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskErrorCode">
            <summary>Task Error Code</summary><remarks>
				<p>This item returns the task error code that is currently active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskWarningCode">
            <summary>Task Warning Code</summary><remarks>
				<p>This item returns the task warning code that is currently active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.DwellCommandPercentComplete">
            <summary>Dwell Command Percent Complete</summary><remarks>
				<p>This item returns the percentage of completeness of a Dwell command. If a Dwell command is not executing, 100% is returned.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.WaitCommandDuration">
            <summary>Wait Command Duration</summary><remarks>
				<p>This item returns the number of milliseconds that a Wait command has been executing. If a Wait command is not executing, 0 is returned.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedSpeedTargetActual">
            <summary>Coordinated Speed Target Actual</summary><remarks>
				<p>This item returns the actual target speed for dominant axes in a coordinated move. The actual target speed may differ from the commanded speed if the move does not reach constant velocity.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.DependentCoordinatedSpeedTargetActual">
            <summary>Dependent Coordinated Speed Target Actual</summary><remarks>
				<p>This item returns the actual target speed for dependent axes in a coordinated move. The actual target speed may differ from the commanded speed if the move does not reach constant velocity.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ActiveFixtureOffset">
            <summary>Active Fixture Offset</summary><remarks>
				<p>This item returns the one-based index of the active fixture offset.</p>
				<p>If zero is returned, then no fixture offsets are active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskStatus0">
            <summary>Task Status 0</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/taskstatus0.html">Task Status 0</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskStatus1">
            <summary>Task Status 1</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/taskstatus1.html">Task Status 1</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskStatus2">
            <summary>Task Status 2</summary><remarks>
				<p>This item returns the value of the <a href="a3200.chm::/StructsAutoGen/taskstatus2.html">Task Status 2</a> word.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ProgramLineNumberNoSync">
            <summary>Program Line Number No Sync</summary><remarks>
				<p>This item returns the value of the program line number not synchronized to the motion queue.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.Spindle0SpeedTarget">
            <summary>Spindle 0 Speed Target</summary><remarks>
				<p>This item returns the spindle 0 target speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.Spindle1SpeedTarget">
            <summary>Spindle 1 Speed Target</summary><remarks>
				<p>This item returns the spindle 1 target speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.Spindle2SpeedTarget">
            <summary>Spindle 2 Speed Target</summary><remarks>
				<p>This item returns the spindle 2 target speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.Spindle3SpeedTarget">
            <summary>Spindle 3 Speed Target</summary><remarks>
				<p>This item returns the spindle 3 target speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinateSystem1I">
            <summary>Coordinate System 1 I</summary><remarks>
				<p>This item returns the axis index assigned to the I-axis of coordinate system 1.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinateSystem1J">
            <summary>Coordinate System 1 J</summary><remarks>
				<p>This item returns the axis index assigned to the J-axis of coordinate system 1.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinateSystem1K">
            <summary>Coordinate System 1 K</summary><remarks>
				<p>This item returns the axis index assigned to the K-axis of coordinate system 1.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinateSystem1Plane">
            <summary>Coordinate System 1 Plane</summary><remarks>
				<p>This item returns the active plane index for coordinate system 1.</p>
				<p>Refer to the G17, G18, and G19 commands for more information on coordinate system planes.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ToolNumberActive">
            <summary>Tool Number Active</summary><remarks>
				<p>This item returns the active tool that was set by the T command.</p>
				<p>This item returns zero if no tool is active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.MFO">
            <summary>MFO</summary><remarks>
				<p>This item returns the MFO value.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedSpeedTarget">
            <summary>Coordinated Speed Target</summary><remarks>
				<p>This item returns the target speed for dominant axes in a coordinated move. The target speed is set using the F command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.DependentCoordinatedSpeedTarget">
            <summary>Dependent Coordinated Speed Target</summary><remarks>
				<p>This item returns the target speed for dependent axes in a coordinated move. The dependent target speed is set using the E command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedAccelerationRate">
            <summary>Coordinated Acceleration Rate</summary><remarks>
				<p>This item returns the value of the coordinated acceleration rate.</p>
				<p>Refer to the RAMP RATE command for more information on setting the coordinated acceleration rate.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedDecelerationRate">
            <summary>Coordinated Deceleration Rate</summary><remarks>
				<p>This item returns the value of the coordinated deceleration rate.</p>
				<p>Refer to the RAMP RATE command for more information on setting the coordinated deceleration rate.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedAccelerationTime">
            <summary>Coordinated Acceleration Time</summary><remarks>
				<p>This item returns the value of the coordinated acceleration time.</p>
				<p>Refer to the RAMP TIME command for more information on setting the coordinated acceleration time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedDecelerationTime">
            <summary>Coordinated Deceleration Time</summary><remarks>
				<p>This item returns the value of the coordinated deceleration time.</p>
				<p>Refer to the RAMP TIME command for more information on setting the coordinated deceleration time.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskMode">
            <summary>Task Mode</summary><remarks>
				<p>
					This item returns the value of the <a href="a3200.chm::/StructsAutoGen/taskmode.html">Task Mode</a> word.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskState">
            <summary>Task State</summary><remarks>
				<p>This item returns the current <a href="a3200.chm::/StructsAutoGen/taskstate.html">Task State</a>.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskStateInternal">
            <summary>Task State Internal</summary><remarks>
				<p>This item returns the current internal task state and is for internal use only.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ExecutionMode">
            <summary>Execution Mode</summary><remarks>
				<p>This item returns the task execution mode.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskErrorLocation">
            <summary>Task Error Location</summary><remarks>
				<p>This item returns the task error location code that is currently active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskWarningLocation">
            <summary>Task Warning Location</summary><remarks>
				<p>This item returns the task warning location code that is currently active.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ProgramPersistent">
            <summary>Program Persistent</summary><remarks>
				<p>This item indicates that a program is persistent to this task.</p>
				<p>All associated programs that are not immediate commands are considered persistent.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ImmediateState">
            <summary>Immediate State</summary><remarks>
				<p>This item returns the immediate thread state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.EnableAlignmentAxes">
            <summary>Enable Alignment Axes</summary><remarks>
				<p>This is an internal status item.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.QueueStatus">
            <summary>Queue Status</summary><remarks>
				<p>
					This item returns the value of the <a href="a3200.chm::/StructsAutoGen/queuestatus.html">Queue Status</a> word.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedGalvoLaserOutput">
            <summary>Coordinated Galvo Laser Output</summary><remarks>
				<p>This item returns the value of the coordinated galvo laser output.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedMotionRate">
            <summary>Coordinated Motion Rate</summary><remarks>
				<p>This item returns the coordinated motion rate in kHz.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedTaskCommand">
            <summary>Coordinated Task Command</summary><remarks>
				<p>This item returns the argument to the coordinated task command.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.FiberMoveCount">
            <summary>Fiber Move Count</summary><remarks>
				<p>This item returns the number of moves in a fiber search</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.EnableState">
            <summary>Enable State</summary><remarks>
				<p>This item returns the enable state.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CannedFunctionID">
            <summary>Canned Function ID</summary><remarks>
				<p>This item returns the identification number of the canned function pending execution on the task. This value becomes zero once the canned function is executing.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskDoubleVariable">
            <summary>Task Double Variable</summary><remarks>
				<p>This item returns the value of a double-precision task variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskInfoVariable">
            <summary>Task Info Variable</summary><remarks>
				<p>This item returns the value of a task info variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskReturnVariable">
            <summary>Task Return Variable</summary><remarks>
				<p>This item returns the value of the task return variable.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.FiberPower">
            <summary>Fiber Power</summary><remarks>
				<p>
					This item returns the most recent power sample from a <a href="A3200.chm::/StructsAutoGen/fibersearchresult.html">fiber search</a>.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.FiberPowerOptimal">
            <summary>Fiber Optimum</summary><remarks>
				<p>
					This item returns the optimal power sample seen in a <a href="A3200.chm::/StructsAutoGen/fibersearchresult.html">fiber search</a>.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.FiberPowerSampleCount">
            <summary>Fiber Power Count</summary><remarks>
				<p>
					This item returns the number of power samples performed in a <a href="A3200.chm::/StructsAutoGen/fibersearchresult.html">fiber search</a>.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.FiberSearchResult">
            <summary>Fiber Search Result</summary><remarks>
				<p>
					This item returns information on the result of a <a href="a3200.chm::/StructsAutoGen/fibersearchresult.html">fiber search</a>.
				</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.LookaheadMovesExamined">
            <summary>Number of moves lookahead examined</summary><remarks>
				<p>This item returns number of moves lookahead examined.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.LookaheadMovesRecomputed">
            <summary>Number of moves lookahead recomputed</summary><remarks>
				<p>This item returns number of moves lookahead recomputed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ProgramLineNumberInternal">
            <summary>Program Line Number Internal</summary><remarks>
				<p>This item returns the value of the program line number internal to the SMC.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ProfileControlMask">
            <summary>Profile Control Mask</summary><remarks>
				<p>This item returns the profile control axis mask of the task.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.QueueLineCount">
            <summary>Queue Line Count</summary><remarks>
				<p>This item returns the number of items loaded in the program queue.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.QueueLineCapacity">
            <summary>Queue Line Capacity</summary><remarks>
				<p>This item returns the total capacity of the program queue.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ImmediateCommandErrorCode">
            <summary>Immediate Command Error Code</summary><remarks>
				<p>This item returns the error code of the last condition that caused the immediate command to fail execution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ImmediateCommandErrorLocation">
            <summary>Immediate Command Error Location</summary><remarks>
				<p>This item returns the error location of the last condition that caused the immediate command to fail execution.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.LookaheadErrorCode">
            <summary>Lookahead Error Code</summary><remarks>
				<p>This item returns the error code that occurred during lookahead.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.LookaheadErrorLocation">
            <summary>Lookahead Error Location</summary><remarks>
				<p>This item returns the error location that occurred during lookahead.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.LookaheadMovePoolIndex">
            <summary>Lookahead Move Pool Index</summary><remarks>
				<p>This item returns the current index of the lookahead move pool.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ActiveMovePoolIndex">
            <summary>Active Move Pool Index</summary><remarks>
				<p>This item returns the current index of the active move pool.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedArcRadiusReciprocal">
            <summary>Reciprocal of the Coordinated Arc Radius</summary><remarks>
				<p>This item returns one over the radius of a coordinated arc.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.ActiveMoveElementAddedOrderIndex">
            <summary>Active Move Element Added Order Index</summary><remarks>
				<p>The order that this move element was added into the active move queue</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.MotionEngineStage">
            <summary>Motion Engine Stage</summary><remarks>
				<p>This item returns the stage of the motion engine.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedTimeScale">
            <summary>Coordinated Time Scale</summary><remarks>
				<p>This item returns the time scaling ratio being applied to the trajectory</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.CoordinatedTimeScaleDerivative">
            <summary>Coordinated Time Scale Derivative</summary><remarks>
				<p>This item returns the derivative of the time scaling ratio being applied to the trajectory</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVSpeedScale">
            <summary>IFOV Speed Scale</summary><remarks>
				<p>This item returns the instantaneous speed scaling of your marking and non-marking moves in IFOV. A value of 1.0 indicates full programmed speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVSpeedScaleAverage">
            <summary>IFOV Speed Scale Average</summary><remarks>
				<p>This item returns the average speed scaling of your marking and non-marking moves in IFOV. A value of 1.0 indicates full programmed speed.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVGenerationFrameCounter">
            <summary>IFOV Generation Frame Counter</summary><remarks>
				<p>This item returns the number of IFOV generation frame triggers.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVGenerationTimeOriginal">
            <summary>IFOV Generation Time Original</summary><remarks>
				<p>This item returns the original number of milliseconds (elements) in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVGenerationTimeModified">
            <summary>IFOV Generation Time Modified</summary><remarks>
				<p>This item returns the modified number of milliseconds in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVCoordinatedPositionCommand">
            <summary>IFOV Coordinated Position Command</summary><remarks>
				<p>This item returns the coordinated servo position of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVCoordinatedSpeedCommand">
            <summary>IFOV Coordinated Speed Command</summary><remarks>
				<p>This item returns the coordinated servo speed of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVCenterPointH">
            <summary>IFOV Center Point H</summary><remarks>
				<p>This item returns the horizontal axis component of the servo center point of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVCenterPointV">
            <summary>IFOV Center Point V</summary><remarks>
				<p>This item returns the vertical axis component of the servo center point of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVTrajectoryCount">
            <summary>IFOV Trajectory Count</summary><remarks>
				<p>This item returns the number of servo trajectories in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVTrajectoryIndex">
            <summary>IFOV Trajectory Index</summary><remarks>
				<p>This item returns the index of the servo trajectory active in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVAttemptCode">
            <summary>IFOV Attempt Code</summary><remarks>
				<p>This item returns the trajectory attempt that was used for the active move in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVGenerationFrameIndex">
            <summary>IFOV Generation Frame Index</summary><remarks>
				<p>This item returns the frame index of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVMaximumVelocity">
            <summary>IFOV Maximum Velocity</summary><remarks>
				<p>This item returns the maximum allowable velocity of the current servo move in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVIdealVelocity">
            <summary>IFOV Ideal Velocity</summary><remarks>
				<p>This item returns the attempted ideal velocity of the current servo move in the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.TaskInternalDebug">
            <summary>Task Internal Debug</summary><remarks>
				<p>This item returns internal debugging information.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVCoordinatedAccelerationCommand">
            <summary>IFOV Coordinated Acceleration Command</summary><remarks>
				<p>This item returns the coordinated servo acceleration of the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVFOVPositionH">
            <summary>IFOV FOV Position H</summary><remarks>
				<p>This item returns the commanded horizontal FOV position of the galvo head.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVFOVPositionV">
            <summary>IFOV FOV Position V</summary><remarks>
				<p>This item returns the commanded vertical FOV position of the galvo head.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVFOVDimensionH">
            <summary>IFOV FOV Dimension H</summary><remarks>
				<p>This item returns the horizontal FOV dimension used by the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="F:Aerotech.A3200.Status.TaskStatusSignal.IFOVFOVDimensionV">
            <summary>IFOV FOV Dimension V</summary><remarks>
				<p>This item returns the vertical FOV dimension used by the IFOV generation frame.</p>
			</remarks>
        </member>
        <member name="T:Aerotech.A3200.InternalUtilities">
            <summary>
            Utilities internal to this assembly
            </summary>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets a part of an array
            </summary>
            <typeparam name="T">The type of elements of the array</typeparam>
            <param name="data">The array from which to extract elements</param>
            <param name="start">The starting index to extract from</param>
            <param name="end">The last index to extract</param>
            <returns>An array of size <paramref name="end"/>-<paramref name="start"/> containing
            the specified elements on the <paramref name="data"/>.</returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.FillArray``1(``0[],``0)">
            <summary>
            Populates every element of an array with a specified value
            </summary>
            <typeparam name="T">The type of elements of the array</typeparam>
            <param name="data">The array to populate</param>
            <param name="value">The value to set each element of the array</param>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.Flip``1(``0[])">
            <summary>
            Flips a given array
            </summary>
            <typeparam name="T">The type of elements of the array</typeparam>
            <param name="data">The array which to flip</param>
            <returns>The new array with ith element in (<paramref name="data"/>.Length-i)th position</returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.EnsureCapacity``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Ensures that the <paramref name="list"/> has enough elements
            </summary>
            <typeparam name="T">The type of elements</typeparam>
            <param name="list">The list in which to ensure the size</param>
            <param name="capacity">The capacity to ensure</param>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.OutputMyInfo(System.Object)">
            <summary>
            Outputs properties/fields of an object to the console
            </summary>
            <param name="o">The object whose data to output</param>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.DoubleAsIntOrUIntToInt(System.Double)">
            <summary>Converts a double that stores an <see cref="T:System.Int32"/> or <see cref="T:System.UInt32"/> value into an <see cref="T:System.Int32"/></summary>
            <param name="value">The value to convert</param>
            <returns><see cref="T:System.Int32"/> representation of <paramref name="value"/></returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.MaskCount(System.Int32)">
            <summary>
            Counts the number of set bits
            </summary>
            <param name="mask">The mask to check</param>
            <returns>The number of bits set in <paramref name="mask"/></returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.MaskCount(System.Int32,System.Int32)">
            <summary>
            Counts the number of set bits
            </summary>
            <param name="mask">The mask to check</param>
            <param name="max">The number of bits to check</param>
            <returns>The number of bits set in <paramref name="mask"/></returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.GetTypeObjectFromPrimitiveType(Aerotech.A3200.Parameters.PrimitiveType)">
            <summary>
            Returns a Type object which maps to the PrimitiveType argument
            </summary>
            <param name="primType">The PrimitiveType value to retrieve the native type for</param>
            <returns>The Type object for the specified PrimitiveType</returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.ConvertStringToPrimitive(System.String,Aerotech.A3200.Parameters.PrimitiveType,System.Globalization.CultureInfo)">
            <summary>
            Returns an object that is the converted numeric value of the string given the PrimitiveType argument
            </summary>
            <param name="input">The value that will be converted to the desired type</param>
            <param name="primType">The PrimitiveType value to convert the value to</param>
            <param name="culture">The CultureInfo used in determining the format of the numeric string</param>
            <returns>The converted numeric value</returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.Mask2Index(System.Int32)">
            <summary>
            Figures out which bit is set
            </summary>
            <param name="mask">The mask in which to check the bit</param>
            <returns>The number of the bit that is set, or <c>-1</c> if none is set</returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.Mask2Index(System.Int32,System.Int32)">
            <summary>
            Figures out which bit is set
            </summary>
            <param name="mask">The mask in which to check the bit</param>
            <param name="max">The number of bits to check</param>
            <returns>The number of the bit that is set, or <c>-1</c> if none is set</returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.ArrayToPrettyString(System.Array)">
            <summary>
            Converts an array to a string representation of the array
            </summary>
            <param name="arr">The array to convert</param>
            <returns>String representation of <paramref name="arr"/></returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.ArrayToString(System.Array)">
            <summary>
            Converts an array of strings to one string
            </summary>
            <param name="objects">The strings to combine</param>
            <returns>One string that contains all passed strings</returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.GetEmbeddedStream(System.String)">
            <summary>
            Gets an embedded stream by name
            </summary>
            <param name="name">The name of the embedded resource</param>
            <returns>The <see cref="T:System.IO.Stream"/> representing the embedded resource</returns>
            <remarks>
            This takes the embedded stream from this assembly
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.DeleteFiles(System.String,System.String[])">
            <summary>
            Deletes files
            </summary>
            <param name="fileNameBase">The common part of the path</param>
            <param name="endings">The endings of the path that are different</param>
            <remarks>
            This uses <see cref="M:Aerotech.A3200.InternalUtilities.DeleteFile(System.String)"/>, check it for specifics on file deletion.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.DeleteFile(System.String)">
            <summary>
            Deletes the file
            </summary>
            <param name="fileName">The file to delete</param>
            <remarks>
            Check if file exists first, if it exists, makes sure that it is not read only, and
            then deletes it.
            </remarks>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.FindNextElement(System.Xml.XmlNode)">
            <summary>
            Finds the next Element node after the current node
            </summary>
            <param name="xnCurr">The node from which to start</param>
            <returns>The next element node, or <c>null</c> if none found</returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.CreateAttributeWithValue(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlAttribute"/> with the specific name and value.
            </summary>
            <param name="xmlDoc">The <see cref="T:System.Xml.XmlDocument"/> that will be used to create the attribute.</param>
            <param name="qualifiedName">The name of the new attribute.</param>
            <param name="value">The value of the new attribute.</param>
            <returns>An <see cref="T:System.Xml.XmlAttribute"/> with its name and value set to the specified parameter values.</returns>
        </member>
        <member name="M:Aerotech.A3200.InternalUtilities.ValidateTaskId(System.Nullable{Aerotech.A3200.TaskId})">
            <summary>Tests whether a given object is a member of the TaskId enumeration.</summary>
            <param name="taskId">The object to check.</param>
            <returns>taskId is returned if valid, null is returned if not.</returns>
        </member>
    </members>
</doc>
